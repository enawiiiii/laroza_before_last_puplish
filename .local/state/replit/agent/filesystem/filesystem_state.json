{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Store Management System - LAROZA\n\n## Overview\n\nThis is a full-stack web application for LAROZA (لاروزا), an internal store management system designed for Arabic-speaking employees. The system provides comprehensive inventory management, sales tracking, returns processing, and accounting features specifically tailored for a fashion retail business.\n\nThe application follows a modern web architecture with React frontend, Express.js backend, and PostgreSQL database, utilizing TypeScript throughout for type safety and better development experience. The UI is designed with RTL (right-to-left) support and Arabic localization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development\n- **UI Library**: Shadcn/ui components with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with RTL support and Arabic color scheme (primary: burgundy, accent: emerald green)\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation for type-safe forms\n- **Layout**: Responsive design with sidebar navigation optimized for Arabic interface\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework using ES modules\n- **Language**: TypeScript with strict type checking\n- **API Design**: RESTful endpoints following REST conventions\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n- **Development**: Hot reloading with Vite integration for seamless full-stack development\n- **Logging**: Custom request logging middleware for API monitoring\n\n### Database Architecture\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Migration Strategy**: Drizzle Kit for schema migrations and database management\n- **Schema Design**: Normalized relational structure with proper foreign key relationships\n- **Key Tables**:\n  - Products: Core product information with unique model numbers\n  - Product Inventory: Multi-dimensional inventory (color × size × quantity matrix)\n  - Sales: Transaction records with channel-specific payment methods\n  - Sale Items: Line items linking products to sales with pricing\n  - Returns: Return transactions with refund/exchange tracking\n  - Return Items: Individual returned items for inventory restoration\n\n### Business Logic Architecture\n- **Inventory Management**: Multi-color/multi-size product variants with real-time stock tracking\n- **Sales Processing**: Dual-channel sales (in-store vs online) with payment method-specific fee calculations\n- **Returns System**: Intelligent inventory restoration with accounting adjustments for refunds vs exchanges\n- **Status Calculation**: Dynamic product status based on inventory levels (in-stock/low-stock/out-of-stock)\n\n### Component Architecture\n- **Modular Design**: Feature-based component organization (products, sales, returns, layout)\n- **Reusable Components**: Shared UI components from Shadcn/ui library\n- **Form Components**: Specialized form components for complex inventory management\n- **Modal System**: Dialog-based forms for data entry operations\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18**: Frontend framework with hooks and modern patterns\n- **Express.js**: Backend web framework for Node.js\n- **TypeScript**: Static type checking for both frontend and backend\n- **Vite**: Frontend build tool and development server\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with RTL support\n- **Radix UI**: Headless UI components for accessibility\n- **Shadcn/ui**: Pre-built component library with consistent design\n- **Lucide React**: Icon library for modern interface icons\n\n### Database and Data Management\n- **PostgreSQL**: Primary database (configured for Neon Database)\n- **Drizzle ORM**: Type-safe ORM with automatic migrations\n- **TanStack Query**: Server state management and caching\n- **Zod**: Runtime type validation for API contracts\n\n### Development Tools\n- **ESBuild**: Fast bundling for production builds\n- **PostCSS**: CSS processing with Autoprefixer\n- **React Hook Form**: Performance-optimized form library\n- **Date-fns**: Date manipulation and formatting utilities\n\n### Hosting and Deployment\n- **Replit Environment**: Development and hosting platform\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Node.js Runtime**: Server-side JavaScript execution","size_bytes":4572},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/AccountingReports_1756384544194.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\n\nexport default function AccountingReports() {\n  const [dateRange, setDateRange] = useState({\n    startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days ago\n    endDate: new Date().toISOString().split('T')[0], // today\n  });\n  \n  const [reportType, setReportType] = useState(\"monthly\");\n\n  const { data: salesReport, refetch: refetchSales } = useQuery({\n    queryKey: [\"/api/reports/sales\", dateRange.startDate, dateRange.endDate],\n    queryFn: () => api.getSalesReport(dateRange.startDate, dateRange.endDate),\n  });\n\n  const { data: expensesReport, refetch: refetchExpenses } = useQuery({\n    queryKey: [\"/api/reports/expenses\", dateRange.startDate, dateRange.endDate],\n    queryFn: () => api.getExpensesReport(dateRange.startDate, dateRange.endDate),\n  });\n\n  const { data: expenses } = useQuery({\n    queryKey: [\"/api/expenses\"],\n    queryFn: api.getExpenses,\n  });\n\n  const handleDateRangeChange = () => {\n    refetchSales();\n    refetchExpenses();\n  };\n\n  const calculateProfitLoss = () => {\n    const totalRevenue = salesReport?.summary.totalSales || 0;\n    const totalExpenses = expensesReport?.totalExpenses || 0;\n    return totalRevenue - totalExpenses;\n  };\n\n  const getQuickDateRange = (type: string) => {\n    const today = new Date();\n    let startDate: Date;\n    \n    switch (type) {\n      case \"today\":\n        startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n        break;\n      case \"week\":\n        startDate = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case \"month\":\n        startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        break;\n      case \"year\":\n        startDate = new Date(today.getFullYear(), 0, 1);\n        break;\n      default:\n        return;\n    }\n    \n    setDateRange({\n      startDate: startDate.toISOString().split('T')[0],\n      endDate: today.toISOString().split('T')[0],\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Date Range Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle>فترة التقرير</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n            <div>\n              <Label htmlFor=\"startDate\">من تاريخ</Label>\n              <Input\n                id=\"startDate\"\n                type=\"date\"\n                value={dateRange.startDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}\n                data-testid=\"input-start-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"endDate\">إلى تاريخ</Label>\n              <Input\n                id=\"endDate\"\n                type=\"date\"\n                value={dateRange.endDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}\n                data-testid=\"input-end-date\"\n              />\n            </div>\n            <div className=\"flex items-end\">\n              <Button \n                onClick={handleDateRangeChange}\n                data-testid=\"button-apply-date-range\"\n              >\n                تطبيق\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-wrap gap-2\">\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => getQuickDateRange(\"today\")}\n              data-testid=\"button-today\"\n            >\n              اليوم\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => getQuickDateRange(\"week\")}\n              data-testid=\"button-week\"\n            >\n              هذا الأسبوع\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => getQuickDateRange(\"month\")}\n              data-testid=\"button-month\"\n            >\n              هذا الشهر\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => getQuickDateRange(\"year\")}\n              data-testid=\"button-year\"\n            >\n              هذا العام\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">إجمالي المبيعات</CardTitle>\n            <i className=\"fas fa-chart-line text-accent\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-accent\" data-testid=\"text-total-sales\">\n              {salesReport?.summary.totalSales?.toFixed(2) || \"0.00\"} درهم\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">مبيعات المتجر</CardTitle>\n            <i className=\"fas fa-store text-primary\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-instore-sales\">\n              {salesReport?.summary.inStoreTotal?.toFixed(2) || \"0.00\"} درهم\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {salesReport?.summary.inStoreCount || 0} معاملة\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">مبيعات أونلاين</CardTitle>\n            <i className=\"fas fa-globe text-blue-500\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-500\" data-testid=\"text-online-sales\">\n              {salesReport?.summary.onlineTotal?.toFixed(2) || \"0.00\"} درهم\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {salesReport?.summary.onlineCount || 0} معاملة\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">إجمالي المصروفات</CardTitle>\n            <i className=\"fas fa-receipt text-destructive\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-destructive\" data-testid=\"text-total-expenses\">\n              {expensesReport?.totalExpenses?.toFixed(2) || \"0.00\"} درهم\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Profit/Loss Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle>الربح والخسارة</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-3xl font-bold\" data-testid=\"text-profit-loss\">\n            <span className={calculateProfitLoss() >= 0 ? \"text-accent\" : \"text-destructive\"}>\n              {calculateProfitLoss().toFixed(2)} درهم\n            </span>\n            <span className=\"text-sm font-normal text-muted-foreground mr-2\">\n              {calculateProfitLoss() >= 0 ? \"(ربح)\" : \"(خسارة)\"}\n            </span>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Reports */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Sales Report */}\n        <Card>\n          <CardHeader>\n            <CardTitle>تفاصيل المبيعات</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-right\">رقم الفاتورة</TableHead>\n                    <TableHead className=\"text-right\">القناة</TableHead>\n                    <TableHead className=\"text-right\">المبلغ</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {salesReport?.sales.slice(0, 10).map((sale: any) => (\n                    <TableRow key={sale.id}>\n                      <TableCell data-testid={`sale-invoice-${sale.id}`}>\n                        {sale.invoiceNumber}\n                      </TableCell>\n                      <TableCell data-testid={`sale-channel-${sale.id}`}>\n                        {sale.channel === 'in-store' ? 'متجر' : 'أونلاين'}\n                      </TableCell>\n                      <TableCell data-testid={`sale-total-${sale.id}`}>\n                        {parseFloat(sale.total).toFixed(2)} درهم\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Expenses Report */}\n        <Card>\n          <CardHeader>\n            <CardTitle>تفاصيل المصروفات</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-right\">الوصف</TableHead>\n                    <TableHead className=\"text-right\">الفئة</TableHead>\n                    <TableHead className=\"text-right\">المبلغ</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {expensesReport?.expenses.slice(0, 10).map((expense: any) => (\n                    <TableRow key={expense.id}>\n                      <TableCell data-testid={`expense-desc-${expense.id}`}>\n                        {expense.description}\n                      </TableCell>\n                      <TableCell data-testid={`expense-category-${expense.id}`}>\n                        {expense.category}\n                      </TableCell>\n                      <TableCell data-testid={`expense-amount-${expense.id}`}>\n                        {parseFloat(expense.amount).toFixed(2)} درهم\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11160},"attached_assets/Accounting_1756384514932.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { EXPENSE_CATEGORIES } from \"@/lib/constants\";\nimport AccountingReports from \"@/components/accounting/AccountingReports\";\n\nexport default function Accounting() {\n  const [showExpenseForm, setShowExpenseForm] = useState(false);\n  const [showPurchaseForm, setShowPurchaseForm] = useState(false);\n  const [expenseData, setExpenseData] = useState({\n    description: \"\",\n    category: \"\",\n    amount: \"\",\n  });\n  const [purchaseData, setPurchaseData] = useState({\n    supplierName: \"\",\n    invoiceNumber: \"\",\n    totalAmount: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createExpenseMutation = useMutation({\n    mutationFn: api.createExpense,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تسجيل المصروف بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/expenses\"] });\n      setShowExpenseForm(false);\n      setExpenseData({ description: \"\", category: \"\", amount: \"\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ\",\n        description: error.message || \"فشل في تسجيل المصروف\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createPurchaseMutation = useMutation({\n    mutationFn: api.createPurchase,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تسجيل فاتورة الشراء بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      setShowPurchaseForm(false);\n      setPurchaseData({ supplierName: \"\", invoiceNumber: \"\", totalAmount: \"\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ\",\n        description: error.message || \"فشل في تسجيل فاتورة الشراء\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleExpenseSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createExpenseMutation.mutate(expenseData);\n  };\n\n  const handlePurchaseSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createPurchaseMutation.mutate(purchaseData);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">المحاسبة</h1>\n          <p className=\"text-muted-foreground\">إدارة الشؤون المالية والتقارير المحاسبية</p>\n        </div>\n        <div className=\"flex items-center space-x-4 space-x-reverse\">\n          <Dialog open={showExpenseForm} onOpenChange={setShowExpenseForm}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" data-testid=\"button-add-expense\">\n                <i className=\"fas fa-receipt mr-2 ml-0\"></i>\n                إضافة مصروف\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>إضافة مصروف جديد</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleExpenseSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"description\">وصف المصروف <span className=\"text-destructive\">*</span></Label>\n                  <Textarea\n                    id=\"description\"\n                    value={expenseData.description}\n                    onChange={(e) => setExpenseData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"وصف تفصيلي للمصروف\"\n                    required\n                    data-testid=\"textarea-expense-description\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"category\">فئة المصروف <span className=\"text-destructive\">*</span></Label>\n                  <Select onValueChange={(value) => setExpenseData(prev => ({ ...prev, category: value }))}>\n                    <SelectTrigger data-testid=\"select-expense-category\">\n                      <SelectValue placeholder=\"اختر فئة المصروف\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {EXPENSE_CATEGORIES.map((category) => (\n                        <SelectItem key={category.value} value={category.value}>\n                          {category.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"amount\">المبلغ (درهم) <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={expenseData.amount}\n                    onChange={(e) => setExpenseData(prev => ({ ...prev, amount: e.target.value }))}\n                    placeholder=\"0.00\"\n                    required\n                    data-testid=\"input-expense-amount\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-4 border-t border-border\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowExpenseForm(false)}\n                  >\n                    إلغاء\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createExpenseMutation.isPending}\n                    data-testid=\"button-save-expense\"\n                  >\n                    {createExpenseMutation.isPending ? \"جاري الحفظ...\" : \"حفظ المصروف\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={showPurchaseForm} onOpenChange={setShowPurchaseForm}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-purchase\">\n                <i className=\"fas fa-file-invoice mr-2 ml-0\"></i>\n                فاتورة شراء\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>إضافة فاتورة شراء</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handlePurchaseSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"supplierName\">اسم المورد <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"supplierName\"\n                    value={purchaseData.supplierName}\n                    onChange={(e) => setPurchaseData(prev => ({ ...prev, supplierName: e.target.value }))}\n                    placeholder=\"اسم المورد أو الشركة\"\n                    required\n                    data-testid=\"input-supplier-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"invoiceNumber\">رقم الفاتورة <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"invoiceNumber\"\n                    value={purchaseData.invoiceNumber}\n                    onChange={(e) => setPurchaseData(prev => ({ ...prev, invoiceNumber: e.target.value }))}\n                    placeholder=\"رقم فاتورة المورد\"\n                    required\n                    data-testid=\"input-purchase-invoice-number\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"totalAmount\">إجمالي المبلغ (درهم) <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"totalAmount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={purchaseData.totalAmount}\n                    onChange={(e) => setPurchaseData(prev => ({ ...prev, totalAmount: e.target.value }))}\n                    placeholder=\"0.00\"\n                    required\n                    data-testid=\"input-purchase-total-amount\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-4 border-t border-border\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowPurchaseForm(false)}\n                  >\n                    إلغاء\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createPurchaseMutation.isPending}\n                    data-testid=\"button-save-purchase\"\n                  >\n                    {createPurchaseMutation.isPending ? \"جاري الحفظ...\" : \"حفظ الفاتورة\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Accounting Reports */}\n      <AccountingReports />\n    </div>\n  );\n}\n","size_bytes":9969},"attached_assets/AddProductModal_1756384552049.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport ColorSizeManager from \"./ColorSizeManager\";\nimport { PRODUCT_TYPES } from \"@/lib/constants\";\n\ninterface AddProductModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AddProductModal({ open, onOpenChange }: AddProductModalProps) {\n  const [formData, setFormData] = useState({\n    modelNumber: \"\",\n    companyName: \"\", \n    productType: \"\",\n    storePrice: \"\",\n    onlinePrice: \"\",\n    imageUrl: \"\",\n    specifications: \"\",\n  });\n  \n  const [inventory, setInventory] = useState<Record<string, Record<string, number>>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createProductMutation = useMutation({\n    mutationFn: api.createProduct,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم إضافة المنتج بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ\",\n        description: error.message || \"فشل في إضافة المنتج\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      modelNumber: \"\",\n      companyName: \"\",\n      productType: \"\",\n      storePrice: \"\",\n      onlinePrice: \"\",\n      imageUrl: \"\",\n      specifications: \"\",\n    });\n    setInventory({});\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Prepare inventory data\n    const inventoryItems = [];\n    for (const color in inventory) {\n      for (const size in inventory[color]) {\n        if (inventory[color][size] > 0) {\n          inventoryItems.push({\n            color,\n            size,\n            quantity: inventory[color][size],\n            productId: \"\", // Will be set by the backend\n          });\n        }\n      }\n    }\n\n    createProductMutation.mutate({\n      product: formData,\n      inventory: inventoryItems,\n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>إضافة منتج جديد</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Basic Product Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"modelNumber\">رقم الموديل <span className=\"text-destructive\">*</span></Label>\n              <Input\n                id=\"modelNumber\"\n                data-testid=\"input-model-number\"\n                value={formData.modelNumber}\n                onChange={(e) => handleInputChange(\"modelNumber\", e.target.value)}\n                placeholder=\"مثال: DRS-001\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"companyName\">اسم الشركة <span className=\"text-destructive\">*</span></Label>\n              <Input\n                id=\"companyName\"\n                data-testid=\"input-company-name\"\n                value={formData.companyName}\n                onChange={(e) => handleInputChange(\"companyName\", e.target.value)}\n                placeholder=\"مثال: شركة الأزياء الراقية\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"productType\">نوع المنتج <span className=\"text-destructive\">*</span></Label>\n              <Select onValueChange={(value) => handleInputChange(\"productType\", value)}>\n                <SelectTrigger data-testid=\"select-product-type\">\n                  <SelectValue placeholder=\"اختر نوع المنتج\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {PRODUCT_TYPES.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"imageUrl\">رابط الصورة</Label>\n              <Input\n                id=\"imageUrl\"\n                data-testid=\"input-image-url\"\n                value={formData.imageUrl}\n                onChange={(e) => handleInputChange(\"imageUrl\", e.target.value)}\n                placeholder=\"https://example.com/image.jpg\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"storePrice\">سعر المتجر (درهم) <span className=\"text-destructive\">*</span></Label>\n              <Input\n                id=\"storePrice\"\n                data-testid=\"input-store-price\"\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.storePrice}\n                onChange={(e) => handleInputChange(\"storePrice\", e.target.value)}\n                placeholder=\"0.00\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"onlinePrice\">سعر الأونلاين (درهم) <span className=\"text-destructive\">*</span></Label>\n              <Input\n                id=\"onlinePrice\"\n                data-testid=\"input-online-price\"\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.onlinePrice}\n                onChange={(e) => handleInputChange(\"onlinePrice\", e.target.value)}\n                placeholder=\"0.00\"\n                required\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"specifications\">مواصفات المنتج</Label>\n            <Textarea\n              id=\"specifications\"\n              data-testid=\"textarea-specifications\"\n              value={formData.specifications}\n              onChange={(e) => handleInputChange(\"specifications\", e.target.value)}\n              placeholder=\"وصف تفصيلي للمنتج...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Colors and Sizes */}\n          <div>\n            <ColorSizeManager \n              inventory={inventory}\n              onInventoryChange={setInventory}\n            />\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-6 border-t border-border\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              إلغاء\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createProductMutation.isPending}\n              data-testid=\"button-save-product\"\n            >\n              {createProductMutation.isPending ? \"جاري الحفظ...\" : \"حفظ المنتج\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7790},"attached_assets/AvailableInventory_1756384565249.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface InventoryItem {\n  id: string;\n  productId: string;\n  color: string;\n  size: string;\n  quantity: number;\n}\n\ninterface AvailableInventoryProps {\n  productId: string;\n  onColorSelect: (color: string) => void;\n  onSizeSelect: (size: string) => void;\n  selectedColor?: string;\n  selectedSize?: string;\n}\n\nexport default function AvailableInventory({ \n  productId, \n  onColorSelect, \n  onSizeSelect, \n  selectedColor, \n  selectedSize \n}: AvailableInventoryProps) {\n  const { data: inventory, isLoading } = useQuery<InventoryItem[]>({\n    queryKey: [\"/api/products\", productId, \"inventory\"],\n    queryFn: () => api.getProductInventory(productId),\n    enabled: !!productId,\n  });\n\n  if (isLoading) {\n    return <div className=\"text-sm text-muted-foreground\">جاري تحميل المخزون...</div>;\n  }\n\n  if (!inventory || inventory.length === 0) {\n    return <div className=\"text-sm text-muted-foreground\">لا توجد كميات متوفرة لهذا المنتج</div>;\n  }\n\n  // Group inventory by colors\n  const colorGroups = inventory.reduce((groups, item) => {\n    if (!groups[item.color]) {\n      groups[item.color] = [];\n    }\n    groups[item.color].push(item);\n    return groups;\n  }, {} as Record<string, InventoryItem[]>);\n\n  // Get available colors (colors with quantity > 0)\n  const availableColors = Object.keys(colorGroups).filter(color => \n    colorGroups[color].some(item => item.quantity > 0)\n  );\n\n  // Get available sizes for selected color\n  const availableSizes = selectedColor && colorGroups[selectedColor] \n    ? colorGroups[selectedColor].filter(item => item.quantity > 0)\n    : [];\n\n  // Get quantity for selected color and size\n  const getQuantity = (color: string, size: string): number => {\n    const item = inventory.find(inv => inv.color === color && inv.size === size);\n    return item ? item.quantity : 0;\n  };\n\n  return (\n    <div className=\"space-y-4 border border-border rounded-lg p-4 bg-muted/20\">\n      <h5 className=\"font-medium text-sm\">المخزون المتوفر:</h5>\n      \n      {/* Available Colors */}\n      <div>\n        <label className=\"text-xs text-muted-foreground mb-2 block\">الألوان المتوفرة:</label>\n        <div className=\"flex flex-wrap gap-2\">\n          {availableColors.map((color) => {\n            const totalQuantity = colorGroups[color].reduce((sum, item) => sum + item.quantity, 0);\n            return (\n              <button\n                key={color}\n                type=\"button\"\n                onClick={() => onColorSelect(color)}\n                className={`px-3 py-1 rounded-full text-xs border transition-colors ${\n                  selectedColor === color\n                    ? 'bg-primary text-primary-foreground border-primary'\n                    : 'bg-background border-border hover:bg-muted'\n                }`}\n                data-testid={`button-select-color-${color}`}\n              >\n                {color} ({totalQuantity})\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Available Sizes for Selected Color */}\n      {selectedColor && availableSizes.length > 0 && (\n        <div>\n          <label className=\"text-xs text-muted-foreground mb-2 block\">المقاسات المتوفرة لـ {selectedColor}:</label>\n          <div className=\"flex flex-wrap gap-2\">\n            {availableSizes.map((item) => (\n              <button\n                key={item.size}\n                type=\"button\"\n                onClick={() => onSizeSelect(item.size)}\n                className={`px-3 py-1 rounded-full text-xs border transition-colors ${\n                  selectedSize === item.size\n                    ? 'bg-primary text-primary-foreground border-primary'\n                    : 'bg-background border-border hover:bg-muted'\n                }`}\n                data-testid={`button-select-size-${item.size}`}\n              >\n                {item.size} ({item.quantity})\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Quantity Info */}\n      {selectedColor && selectedSize && (\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-xs text-muted-foreground\">الكمية المتوفرة:</span>\n          <Badge variant={getQuantity(selectedColor, selectedSize) > 0 ? \"default\" : \"destructive\"}>\n            {getQuantity(selectedColor, selectedSize)} قطعة\n          </Badge>\n        </div>\n      )}\n\n      {/* Summary */}\n      <div className=\"text-xs text-muted-foreground\">\n        إجمالي: {availableColors.length} لون، {inventory.filter(item => item.quantity > 0).length} مقاس متوفر\n      </div>\n    </div>\n  );\n}","size_bytes":4899},"attached_assets/ColorSizeGrid_1756384552050.tsx":{"content":"import { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ColorSizeGridProps {\n  inventory: Record<string, Record<string, number>>;\n  onInventoryChange: (inventory: Record<string, Record<string, number>>) => void;\n}\n\ninterface InventoryItem {\n  color: string;\n  size: string;\n  quantity: number;\n}\n\nexport default function ColorSizeGrid({ inventory, onInventoryChange }: ColorSizeGridProps) {\n  const [items, setItems] = useState<InventoryItem[]>(() => {\n    const existingItems: InventoryItem[] = [];\n    Object.keys(inventory).forEach(color => {\n      Object.keys(inventory[color]).forEach(size => {\n        if (inventory[color][size] > 0) {\n          existingItems.push({\n            color,\n            size,\n            quantity: inventory[color][size]\n          });\n        }\n      });\n    });\n    return existingItems.length > 0 ? existingItems : [{ color: \"\", size: \"\", quantity: 0 }];\n  });\n\n  const updateInventoryFromItems = (newItems: InventoryItem[]) => {\n    const newInventory: Record<string, Record<string, number>> = {};\n    \n    newItems.forEach(item => {\n      if (item.color && item.size && item.quantity > 0) {\n        if (!newInventory[item.color]) {\n          newInventory[item.color] = {};\n        }\n        newInventory[item.color][item.size] = item.quantity;\n      }\n    });\n    \n    onInventoryChange(newInventory);\n  };\n\n  const handleItemChange = (index: number, field: keyof InventoryItem, value: string | number) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], [field]: value };\n    setItems(newItems);\n    updateInventoryFromItems(newItems);\n  };\n\n  const addItem = () => {\n    const newItems = [...items, { color: \"\", size: \"\", quantity: 0 }];\n    setItems(newItems);\n  };\n\n  const removeItem = (index: number) => {\n    const newItems = items.filter((_, i) => i !== index);\n    setItems(newItems);\n    updateInventoryFromItems(newItems);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h5 className=\"font-medium\">إدخال الألوان والمقاسات</h5>\n        <Button \n          type=\"button\" \n          onClick={addItem}\n          size=\"sm\"\n          data-testid=\"button-add-color-size\"\n        >\n          <i className=\"fas fa-plus mr-2 ml-0\"></i>\n          إضافة لون ومقاس\n        </Button>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {items.map((item, index) => (\n          <div key={index} className=\"grid grid-cols-4 gap-3 p-3 border border-border rounded-lg\">\n            <div>\n              <Label className=\"text-xs text-muted-foreground mb-1\">اللون</Label>\n              <Input\n                placeholder=\"مثال: أسود، أبيض، أحمر\"\n                value={item.color}\n                onChange={(e) => handleItemChange(index, \"color\", e.target.value)}\n                data-testid={`input-color-${index}`}\n              />\n            </div>\n            \n            <div>\n              <Label className=\"text-xs text-muted-foreground mb-1\">المقاس</Label>\n              <Input\n                placeholder=\"مثال: 38، 40، L، XL\"\n                value={item.size}\n                onChange={(e) => handleItemChange(index, \"size\", e.target.value)}\n                data-testid={`input-size-${index}`}\n              />\n            </div>\n            \n            <div>\n              <Label className=\"text-xs text-muted-foreground mb-1\">الكمية</Label>\n              <Input\n                type=\"number\"\n                min=\"0\"\n                placeholder=\"0\"\n                value={item.quantity || \"\"}\n                onChange={(e) => handleItemChange(index, \"quantity\", parseInt(e.target.value) || 0)}\n                data-testid={`input-quantity-${index}`}\n              />\n            </div>\n            \n            <div className=\"flex items-end\">\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => removeItem(index)}\n                disabled={items.length === 1}\n                data-testid={`button-remove-item-${index}`}\n              >\n                <i className=\"fas fa-trash text-destructive\"></i>\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {items.length === 0 && (\n        <div className=\"text-center text-muted-foreground py-4\">\n          اضغط \"إضافة لون ومقاس\" لبدء إدخال المخزون\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4664},"attached_assets/ColorSizeManager_1756384552051.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport SizeQuantityGrid from \"./SizeQuantityGrid\";\n\ninterface ColorSizeManagerProps {\n  inventory: Record<string, Record<string, number>>;\n  onInventoryChange: (inventory: Record<string, Record<string, number>>) => void;\n}\n\nexport default function ColorSizeManager({ inventory, onInventoryChange }: ColorSizeManagerProps) {\n  const [colors, setColors] = useState<string[]>(() => {\n    const existingColors = Object.keys(inventory);\n    return existingColors.length > 0 ? existingColors : [\"افتراضي\"];\n  });\n  \n  const [newColor, setNewColor] = useState(\"\");\n  const [activeColor, setActiveColor] = useState<string>(colors[0] || \"افتراضي\");\n\n  const addColor = () => {\n    if (newColor.trim() && !colors.includes(newColor.trim())) {\n      const updatedColors = [...colors, newColor.trim()];\n      setColors(updatedColors);\n      setActiveColor(newColor.trim());\n      setNewColor(\"\");\n      \n      // Initialize empty inventory for new color\n      const updatedInventory = { ...inventory };\n      if (!updatedInventory[newColor.trim()]) {\n        updatedInventory[newColor.trim()] = {};\n      }\n      onInventoryChange(updatedInventory);\n    }\n  };\n\n  const removeColor = (colorToRemove: string) => {\n    if (colors.length > 1) {\n      const updatedColors = colors.filter(color => color !== colorToRemove);\n      setColors(updatedColors);\n      \n      // Remove color from inventory\n      const updatedInventory = { ...inventory };\n      delete updatedInventory[colorToRemove];\n      onInventoryChange(updatedInventory);\n      \n      // Set active color to first remaining color\n      if (activeColor === colorToRemove) {\n        setActiveColor(updatedColors[0]);\n      }\n    }\n  };\n\n  const getTotalQuantityForColor = (color: string): number => {\n    if (!inventory[color]) return 0;\n    return Object.values(inventory[color]).reduce((sum, qty) => sum + qty, 0);\n  };\n\n  const getAvailableSizesCount = (color: string): number => {\n    if (!inventory[color]) return 0;\n    return Object.values(inventory[color]).filter(qty => qty > 0).length;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Color Management Header */}\n      <div className=\"flex items-center justify-between\">\n        <h4 className=\"text-lg font-semibold\">إدارة الألوان والمقاسات</h4>\n        <div className=\"flex items-center gap-2\">\n          <Input\n            value={newColor}\n            onChange={(e) => setNewColor(e.target.value)}\n            placeholder=\"اسم اللون الجديد\"\n            className=\"w-40\"\n            data-testid=\"input-new-color\"\n          />\n          <Button \n            onClick={addColor}\n            disabled={!newColor.trim() || colors.includes(newColor.trim())}\n            size=\"sm\"\n            data-testid=\"button-add-color\"\n          >\n            <i className=\"fas fa-plus mr-2 ml-0\"></i>\n            إضافة لون\n          </Button>\n        </div>\n      </div>\n\n      {/* Color Statistics Overview */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        {colors.map((color) => (\n          <div key={color} className=\"bg-card border border-border rounded-lg p-4 text-center\">\n            <div className=\"font-semibold text-lg mb-2\">{color}</div>\n            <div className=\"text-2xl font-bold text-primary mb-1\">\n              {getTotalQuantityForColor(color)}\n            </div>\n            <div className=\"text-sm text-muted-foreground mb-2\">قطعة إجمالي</div>\n            <div className=\"text-xs text-muted-foreground\">\n              {getAvailableSizesCount(color)} مقاس متوفر\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Color Tabs */}\n      <Tabs value={activeColor} onValueChange={setActiveColor} className=\"w-full\">\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {colors.map((color) => (\n            <div key={color} className=\"relative\">\n              <Button\n                type=\"button\"\n                variant={activeColor === color ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setActiveColor(color)}\n                className=\"pr-8\"\n                data-testid={`button-color-tab-${color}`}\n              >\n                {color}\n              </Button>\n              {colors.length > 1 && (\n                <button\n                  type=\"button\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    removeColor(color);\n                  }}\n                  className=\"absolute -top-1 -right-1 h-4 w-4 bg-destructive text-destructive-foreground rounded-full text-xs flex items-center justify-center hover:bg-destructive/80\"\n                  data-testid={`button-remove-color-${color}`}\n                >\n                  ×\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n        \n        {colors.map((color) => (\n          <TabsContent key={color} value={color} className=\"mt-6\">\n            <SizeQuantityGrid\n              inventory={inventory}\n              onInventoryChange={onInventoryChange}\n              selectedColor={color}\n            />\n          </TabsContent>\n        ))}\n      </Tabs>\n    </div>\n  );\n}","size_bytes":5461},"attached_assets/Dashboard_1756384514933.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { STATUS_LABELS } from \"@/lib/constants\";\nimport { Link } from \"wouter\";\nimport type { ProductWithInventory, SaleWithItems } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: api.getDashboardStats,\n  });\n\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: api.getProducts,\n  });\n\n  const { data: sales, isLoading: salesLoading } = useQuery({\n    queryKey: [\"/api/sales\"],\n    queryFn: api.getSales,\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      'in-stock': { label: STATUS_LABELS['in-stock'], className: 'status-badge status-in-stock' },\n      'low-stock': { label: STATUS_LABELS['low-stock'], className: 'status-badge status-low-stock' },\n      'out-of-stock': { label: STATUS_LABELS['out-of-stock'], className: 'status-badge status-out-of-stock' },\n    };\n    \n    const statusInfo = statusMap[status as keyof typeof statusMap] || statusMap['in-stock'];\n    return (\n      <span className={statusInfo.className}>\n        {statusInfo.label}\n      </span>\n    );\n  };\n\n  const getPaymentMethodIcon = (paymentMethod: string, channel: string) => {\n    if (channel === 'online') {\n      return paymentMethod === 'bank-transfer' ? \n        <i className=\"fas fa-university text-primary\"></i> : \n        <i className=\"fas fa-globe text-primary\"></i>;\n    }\n    return paymentMethod === 'visa' ? \n      <i className=\"fas fa-credit-card text-accent\"></i> : \n      <i className=\"fas fa-money-bill-wave text-accent\"></i>;\n  };\n\n  const formatTimeAgo = (date: string | Date) => {\n    const now = new Date();\n    const saleDate = new Date(date);\n    const diffInMinutes = Math.floor((now.getTime() - saleDate.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 60) {\n      return `منذ ${diffInMinutes} دقيقة`;\n    } else if (diffInMinutes < 1440) {\n      const hours = Math.floor(diffInMinutes / 60);\n      return `منذ ${hours} ساعة`;\n    } else {\n      const days = Math.floor(diffInMinutes / 1440);\n      return `منذ ${days} يوم`;\n    }\n  };\n\n  // Get recent products (last 3)\n  const recentProducts = products?.slice(0, 3) || [];\n  \n  // Get recent sales (last 3)\n  const recentSales = sales?.slice(0, 3) || [];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">إجمالي المنتجات</p>\n                <p className=\"text-3xl font-bold text-primary\" data-testid=\"stat-total-products\">\n                  {statsLoading ? \"...\" : stats?.totalProducts || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-boxes text-primary\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-accent\">↗ 12%</span>\n              <span className=\"text-muted-foreground mr-2\">عن الشهر الماضي</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">مبيعات اليوم</p>\n                <p className=\"text-3xl font-bold text-accent\" data-testid=\"stat-today-sales\">\n                  {statsLoading ? \"...\" : `${stats?.todaySales?.toFixed(2) || \"0.00\"}`}\n                  <span className=\"text-lg mr-1\">درهم</span>\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-chart-line text-accent\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-accent\">↗ 8%</span>\n              <span className=\"text-muted-foreground mr-2\">عن أمس</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">منتجات نفدت</p>\n                <p className=\"text-3xl font-bold text-destructive\" data-testid=\"stat-out-of-stock\">\n                  {statsLoading ? \"...\" : stats?.outOfStockCount || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-exclamation-triangle text-destructive\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-destructive\">تحتاج إعادة تخزين</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">طلبات أونلاين</p>\n                <p className=\"text-3xl font-bold text-primary\" data-testid=\"stat-online-orders\">\n                  {statsLoading ? \"...\" : stats?.onlineOrdersCount || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-globe text-primary\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-muted-foreground\">في انتظار المعالجة</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Content Sections */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Recent Products */}\n        <Card>\n          <CardHeader className=\"border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>أحدث المنتجات</CardTitle>\n              <Link href=\"/inventory\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all-products\">\n                  عرض الكل\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {productsLoading ? (\n              <div>جاري التحميل...</div>\n            ) : (\n              <div className=\"space-y-4\">\n                {recentProducts.map((product: ProductWithInventory) => (\n                  <div key={product.id} className=\"flex items-center space-x-4 space-x-reverse\">\n                    <div className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-tshirt text-muted-foreground\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\" data-testid={`product-name-${product.id}`}>\n                        {product.companyName}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`product-model-${product.id}`}>\n                        موديل: {product.modelNumber}\n                      </p>\n                    </div>\n                    <div className=\"text-left\">\n                      {getStatusBadge(product.status)}\n                      <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`product-price-${product.id}`}>\n                        {product.storePrice} درهم\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {recentProducts.length === 0 && (\n                  <div className=\"text-center text-muted-foreground py-4\">\n                    لا توجد منتجات متاحة\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Recent Sales */}\n        <Card>\n          <CardHeader className=\"border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>المبيعات الأخيرة</CardTitle>\n              <Link href=\"/sales\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all-sales\">\n                  عرض الكل\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {salesLoading ? (\n              <div>جاري التحميل...</div>\n            ) : (\n              <div className=\"space-y-4\">\n                {recentSales.map((sale: SaleWithItems) => (\n                  <div key={sale.id} className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg\">\n                    <div className=\"flex items-center space-x-3 space-x-reverse\">\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                        sale.channel === 'online' ? 'bg-primary' : 'bg-accent'\n                      }`}>\n                        {getPaymentMethodIcon(sale.paymentMethod, sale.channel)}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\" data-testid={`sale-invoice-${sale.id}`}>\n                          فاتورة #{sale.invoiceNumber}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {sale.channel === 'in-store' ? 'متجر' : 'أونلاين'} - {\n                            sale.paymentMethod === 'cash' ? 'نقداً' :\n                            sale.paymentMethod === 'visa' ? 'فيزا' :\n                            sale.paymentMethod === 'bank-transfer' ? 'تحويل بنكي' :\n                            'دفع عند الاستلام'\n                          }\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-left\">\n                      <p className={`font-semibold ${sale.channel === 'online' ? 'text-primary' : 'text-accent'}`} \n                         data-testid={`sale-total-${sale.id}`}>\n                        {parseFloat(sale.total).toFixed(2)} درهم\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {formatTimeAgo(sale.createdAt)}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {recentSales.length === 0 && (\n                  <div className=\"text-center text-muted-foreground py-4\">\n                    لا توجد مبيعات متاحة\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>إجراءات سريعة</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Link href=\"/inventory\">\n              <Button \n                variant=\"outline\" \n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                data-testid=\"quick-action-add-product\"\n              >\n                <i className=\"fas fa-plus text-2xl text-primary\"></i>\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">إضافة منتج</p>\n                  <p className=\"text-sm text-muted-foreground\">أضف منتج جديد للمخزون</p>\n                </div>\n              </Button>\n            </Link>\n            \n            <Link href=\"/sales\">\n              <Button \n                variant=\"outline\" \n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                data-testid=\"quick-action-new-sale\"\n              >\n                <i className=\"fas fa-shopping-cart text-2xl text-accent\"></i>\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">بيع جديد</p>\n                  <p className=\"text-sm text-muted-foreground\">تسجيل عملية بيع</p>\n                </div>\n              </Button>\n            </Link>\n            \n            <Link href=\"/returns\">\n              <Button \n                variant=\"outline\" \n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                data-testid=\"quick-action-return\"\n              >\n                <i className=\"fas fa-undo text-2xl text-destructive\"></i>\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">مرتجع</p>\n                  <p className=\"text-sm text-muted-foreground\">تسجيل مرتجع</p>\n                </div>\n              </Button>\n            </Link>\n            \n            <Link href=\"/accounting\">\n              <Button \n                variant=\"outline\" \n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                data-testid=\"quick-action-reports\"\n              >\n                <i className=\"fas fa-chart-bar text-2xl text-primary\"></i>\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">التقارير</p>\n                  <p className=\"text-sm text-muted-foreground\">عرض التقارير المالية</p>\n                </div>\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14329},"attached_assets/Inventory_1756384514933.tsx":{"content":"import { useState } from \"react\";\nimport ProductTable from \"@/components/inventory/ProductTable\";\nimport AddProductModal from \"@/components/inventory/AddProductModal\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Inventory() {\n  const [showAddProduct, setShowAddProduct] = useState(false);\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">إدارة المخزون</h1>\n          <p className=\"text-muted-foreground\">إدارة وتتبع جميع منتجات المتجر</p>\n        </div>\n        <Button \n          onClick={() => setShowAddProduct(true)}\n          data-testid=\"button-add-product-inventory\"\n        >\n          <i className=\"fas fa-plus mr-2 ml-0\"></i>\n          إضافة منتج جديد\n        </Button>\n      </div>\n\n      {/* Product Table */}\n      <ProductTable />\n\n      {/* Add Product Modal */}\n      <AddProductModal \n        open={showAddProduct} \n        onOpenChange={setShowAddProduct}\n      />\n    </div>\n  );\n}\n","size_bytes":1120},"attached_assets/ProductTable_1756384552052.tsx":{"content":"import { useState } from \"react\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { STATUS_LABELS } from \"@/lib/constants\";\nimport type { ProductWithInventory } from \"@shared/schema\";\n\nexport default function ProductTable() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: api.getProducts,\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: api.deleteProduct,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم حذف المنتج بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في حذف المنتج\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredProducts = products?.filter((product: ProductWithInventory) => {\n    const matchesSearch = product.modelNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.companyName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || product.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذا المنتج؟\")) {\n      deleteProductMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      'in-stock': { label: STATUS_LABELS['in-stock'], variant: 'default' as const },\n      'low-stock': { label: STATUS_LABELS['low-stock'], variant: 'secondary' as const },\n      'out-of-stock': { label: STATUS_LABELS['out-of-stock'], variant: 'destructive' as const },\n    };\n    \n    const statusInfo = statusMap[status as keyof typeof statusMap] || statusMap['in-stock'];\n    return (\n      <Badge variant={statusInfo.variant} className=\"status-badge\">\n        {statusInfo.label}\n      </Badge>\n    );\n  };\n\n  if (isLoading) {\n    return <div>جاري التحميل...</div>;\n  }\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold\">جدول المخزون</h3>\n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Input\n              placeholder=\"البحث في المنتجات...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n              data-testid=\"input-search-products\"\n            />\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"تصفية حسب الحالة\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">جميع المنتجات</SelectItem>\n                <SelectItem value=\"in-stock\">متوفر</SelectItem>\n                <SelectItem value=\"low-stock\">مخزون قليل</SelectItem>\n                <SelectItem value=\"out-of-stock\">نفذ</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"text-right\">الموديل</TableHead>\n              <TableHead className=\"text-right\">الشركة</TableHead>\n              <TableHead className=\"text-right\">النوع</TableHead>\n              <TableHead className=\"text-right\">سعر المتجر</TableHead>\n              <TableHead className=\"text-right\">سعر الأونلاين</TableHead>\n              <TableHead className=\"text-right\">الحالة</TableHead>\n              <TableHead className=\"text-right\">إجراءات</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredProducts.map((product: ProductWithInventory) => (\n              <TableRow key={product.id} className=\"hover:bg-muted/30\">\n                <TableCell data-testid={`cell-model-${product.id}`}>\n                  {product.modelNumber}\n                </TableCell>\n                <TableCell data-testid={`cell-company-${product.id}`}>\n                  {product.companyName}\n                </TableCell>\n                <TableCell data-testid={`cell-type-${product.id}`}>\n                  {product.productType}\n                </TableCell>\n                <TableCell data-testid={`cell-store-price-${product.id}`}>\n                  {product.storePrice} درهم\n                </TableCell>\n                <TableCell data-testid={`cell-online-price-${product.id}`}>\n                  {product.onlinePrice} درهم\n                </TableCell>\n                <TableCell data-testid={`cell-status-${product.id}`}>\n                  {getStatusBadge(product.status)}\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2 space-x-reverse\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      title=\"تعديل\"\n                      data-testid={`button-edit-${product.id}`}\n                    >\n                      <i className=\"fas fa-edit text-primary\"></i>\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      title=\"عرض التفاصيل\"\n                      data-testid={`button-view-${product.id}`}\n                    >\n                      <i className=\"fas fa-eye text-muted-foreground\"></i>\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      title=\"حذف\"\n                      onClick={() => handleDelete(product.id)}\n                      disabled={deleteProductMutation.isPending}\n                      data-testid={`button-delete-${product.id}`}\n                    >\n                      <i className=\"fas fa-trash text-destructive\"></i>\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n      \n      {filteredProducts.length === 0 && (\n        <div className=\"p-8 text-center text-muted-foreground\">\n          لا توجد منتجات تطابق معايير البحث\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7338},"attached_assets/ReturnForm_1756384559595.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { RETURN_TYPES } from \"@/lib/constants\";\n\ninterface ReturnFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface ReturnItem {\n  productId: string;\n  color: string;\n  size: string;\n  quantity: number;\n}\n\nexport default function ReturnForm({ open, onOpenChange }: ReturnFormProps) {\n  const [returnData, setReturnData] = useState({\n    originalSaleId: \"\",\n    returnType: \"\",\n    refundAmount: \"\",\n  });\n  \n  const [items, setItems] = useState<ReturnItem[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: sales } = useQuery({\n    queryKey: [\"/api/sales\"],\n    queryFn: api.getSales,\n  });\n\n  const createReturnMutation = useMutation({\n    mutationFn: api.createReturn,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تسجيل المرتجع بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/returns\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ\",\n        description: error.message || \"فشل في تسجيل المرتجع\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setReturnData({ originalSaleId: \"\", returnType: \"\", refundAmount: \"\" });\n    setItems([]);\n  };\n\n  const loadSaleItems = (saleId: string) => {\n    const sale = sales?.find((s: any) => s.id === saleId);\n    if (sale) {\n      const saleItems = sale.items.map((item: any) => ({\n        productId: item.productId,\n        color: item.color,\n        size: item.size,\n        quantity: 1, // Default to 1, user can adjust\n      }));\n      setItems(saleItems);\n      setReturnData(prev => ({ ...prev, refundAmount: sale.total }));\n    }\n  };\n\n  const addItem = () => {\n    setItems(prev => [...prev, {\n      productId: \"\",\n      color: \"\",\n      size: \"\",\n      quantity: 1,\n    }]);\n  };\n\n  const removeItem = (index: number) => {\n    setItems(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const updateItem = (index: number, field: keyof ReturnItem, value: any) => {\n    setItems(prev => prev.map((item, i) => \n      i === index ? { ...item, [field]: value } : item\n    ));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (items.length === 0) {\n      toast({\n        title: \"خطأ\",\n        description: \"يجب إضافة عنصر واحد على الأقل للإرجاع\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createReturnMutation.mutate({\n      return: {\n        originalSaleId: returnData.originalSaleId,\n        returnType: returnData.returnType,\n        refundAmount: returnData.returnType === 'refund' ? returnData.refundAmount : \"0\",\n      },\n      items,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>تسجيل مرتجع</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Return Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"originalSaleId\">الفاتورة الأصلية <span className=\"text-destructive\">*</span></Label>\n              <Select onValueChange={(value) => {\n                setReturnData(prev => ({ ...prev, originalSaleId: value }));\n                loadSaleItems(value);\n              }}>\n                <SelectTrigger data-testid=\"select-original-sale\">\n                  <SelectValue placeholder=\"اختر الفاتورة الأصلية\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {sales?.map((sale: any) => (\n                    <SelectItem key={sale.id} value={sale.id}>\n                      {sale.invoiceNumber} - {sale.total} درهم\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"returnType\">نوع المرتجع <span className=\"text-destructive\">*</span></Label>\n              <Select onValueChange={(value) => setReturnData(prev => ({ ...prev, returnType: value }))}>\n                <SelectTrigger data-testid=\"select-return-type\">\n                  <SelectValue placeholder=\"اختر نوع المرتجع\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {RETURN_TYPES.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {returnData.returnType === 'refund' && (\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"refundAmount\">مبلغ الاسترداد (درهم) <span className=\"text-destructive\">*</span></Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={returnData.refundAmount}\n                  onChange={(e) => setReturnData(prev => ({ ...prev, refundAmount: e.target.value }))}\n                  placeholder=\"0.00\"\n                  data-testid=\"input-refund-amount\"\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Return Items */}\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"text-lg font-medium\">عناصر المرتجع</h4>\n              <Button \n                type=\"button\" \n                onClick={addItem}\n                data-testid=\"button-add-return-item\"\n              >\n                <i className=\"fas fa-plus mr-2 ml-0\"></i>\n                إضافة عنصر\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {items.map((item, index) => (\n                <div key={index} className=\"border border-border rounded-lg p-4\">\n                  <div className=\"grid grid-cols-2 lg:grid-cols-5 gap-4\">\n                    <div>\n                      <Label>المنتج ID</Label>\n                      <Input\n                        value={item.productId}\n                        onChange={(e) => updateItem(index, \"productId\", e.target.value)}\n                        placeholder=\"معرف المنتج\"\n                        data-testid={`input-product-id-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>اللون</Label>\n                      <Input\n                        value={item.color}\n                        onChange={(e) => updateItem(index, \"color\", e.target.value)}\n                        placeholder=\"مثال: أسود، أبيض، أحمر\"\n                        data-testid={`input-return-color-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>المقاس</Label>\n                      <Input\n                        value={item.size}\n                        onChange={(e) => updateItem(index, \"size\", e.target.value)}\n                        placeholder=\"مثال: 38، 40، L، XL\"\n                        data-testid={`input-return-size-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>الكمية</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        value={item.quantity}\n                        onChange={(e) => updateItem(index, \"quantity\", parseInt(e.target.value) || 1)}\n                        data-testid={`input-return-quantity-${index}`}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-end\">\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => removeItem(index)}\n                        data-testid={`button-remove-return-item-${index}`}\n                      >\n                        <i className=\"fas fa-trash\"></i>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-6 border-t border-border\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-return\"\n            >\n              إلغاء\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createReturnMutation.isPending}\n              data-testid=\"button-save-return\"\n            >\n              {createReturnMutation.isPending ? \"جاري الحفظ...\" : \"تسجيل المرتجع\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9950},"attached_assets/Returns_1756384514934.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport ReturnForm from \"@/components/returns/ReturnForm\";\nimport type { ReturnWithItems } from \"@shared/schema\";\n\nexport default function Returns() {\n  const [showReturnForm, setShowReturnForm] = useState(false);\n\n  const { data: returns, isLoading } = useQuery({\n    queryKey: [\"/api/returns\"],\n    queryFn: api.getReturns,\n  });\n\n  const formatDateTime = (date: string | Date) => {\n    return new Date(date).toLocaleString('ar-EG', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getReturnTypeBadge = (type: string) => {\n    return type === 'refund' ? (\n      <Badge variant=\"destructive\">استرداد</Badge>\n    ) : (\n      <Badge variant=\"default\">استبدال</Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">المرتجعات</h1>\n          <p className=\"text-muted-foreground\">إدارة وتتبع جميع عمليات الإرجاع</p>\n        </div>\n        <Button \n          onClick={() => setShowReturnForm(true)}\n          data-testid=\"button-new-return\"\n        >\n          <i className=\"fas fa-plus mr-2 ml-0\"></i>\n          مرتجع جديد\n        </Button>\n      </div>\n\n      {/* Returns Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">إجمالي المرتجعات</CardTitle>\n            <i className=\"fas fa-undo text-destructive\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-destructive\">\n              {isLoading ? \"...\" : returns?.length || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">إجمالي المستردات</CardTitle>\n            <i className=\"fas fa-money-bill-wave text-orange-500\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-500\">\n              {isLoading ? \"...\" : \n                `${returns?.filter((r: ReturnWithItems) => r.returnType === 'refund')\n                  .reduce((sum: number, returnItem: ReturnWithItems) => sum + parseFloat(returnItem.refundAmount), 0).toFixed(2) || \"0.00\"} درهم`\n              }\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">عمليات الاستبدال</CardTitle>\n            <i className=\"fas fa-exchange-alt text-blue-500\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-500\">\n              {isLoading ? \"...\" : \n                returns?.filter((r: ReturnWithItems) => r.returnType === 'exchange').length || 0\n              }\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Returns Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>سجل المرتجعات</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">جاري التحميل...</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-right\">الفاتورة الأصلية</TableHead>\n                    <TableHead className=\"text-right\">نوع المرتجع</TableHead>\n                    <TableHead className=\"text-right\">مبلغ الاسترداد</TableHead>\n                    <TableHead className=\"text-right\">عدد العناصر</TableHead>\n                    <TableHead className=\"text-right\">التاريخ</TableHead>\n                    <TableHead className=\"text-right\">إجراءات</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {returns?.map((returnItem: ReturnWithItems) => (\n                    <TableRow key={returnItem.id} className=\"hover:bg-muted/30\">\n                      <TableCell className=\"font-medium\" data-testid={`return-original-sale-${returnItem.id}`}>\n                        {returnItem.originalSale.invoiceNumber}\n                      </TableCell>\n                      <TableCell data-testid={`return-type-${returnItem.id}`}>\n                        {getReturnTypeBadge(returnItem.returnType)}\n                      </TableCell>\n                      <TableCell data-testid={`return-refund-${returnItem.id}`}>\n                        {parseFloat(returnItem.refundAmount).toFixed(2)} درهم\n                      </TableCell>\n                      <TableCell data-testid={`return-items-count-${returnItem.id}`}>\n                        {returnItem.items.length}\n                      </TableCell>\n                      <TableCell data-testid={`return-date-${returnItem.id}`}>\n                        {formatDateTime(returnItem.createdAt)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2 space-x-reverse\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            title=\"عرض التفاصيل\"\n                            data-testid={`button-view-return-${returnItem.id}`}\n                          >\n                            <i className=\"fas fa-eye text-muted-foreground\"></i>\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            title=\"طباعة\"\n                            data-testid={`button-print-return-${returnItem.id}`}\n                          >\n                            <i className=\"fas fa-print text-primary\"></i>\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              \n              {returns?.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  لا توجد مرتجعات مسجلة\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Return Form Modal */}\n      <ReturnForm \n        open={showReturnForm} \n        onOpenChange={setShowReturnForm}\n      />\n    </div>\n  );\n}\n","size_bytes":7332},"attached_assets/SaleForm_1756384565250.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { PAYMENT_METHODS, SALES_CHANNELS } from \"@/lib/constants\";\nimport AvailableInventory from \"./AvailableInventory\";\n\ninterface SaleFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface SaleItem {\n  productId: string;\n  color: string;\n  size: string;\n  quantity: number;\n  unitPrice: number;\n}\n\nexport default function SaleForm({ open, onOpenChange }: SaleFormProps) {\n  const [saleData, setSaleData] = useState({\n    channel: \"\",\n    paymentMethod: \"\",\n  });\n  \n  const [items, setItems] = useState<SaleItem[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: api.getProducts,\n  });\n\n  const createSaleMutation = useMutation({\n    mutationFn: api.createSale,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تسجيل البيع بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ\",\n        description: error.message || \"فشل في تسجيل البيع\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSaleData({ channel: \"\", paymentMethod: \"\" });\n    setItems([]);\n  };\n\n  const addItem = () => {\n    setItems(prev => [...prev, {\n      productId: \"\",\n      color: \"\",\n      size: \"\",\n      quantity: 1,\n      unitPrice: 0,\n    }]);\n  };\n\n  const removeItem = (index: number) => {\n    setItems(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const updateItem = (index: number, field: keyof SaleItem, value: any) => {\n    setItems(prev => prev.map((item, i) => \n      i === index ? { ...item, [field]: value } : item\n    ));\n  };\n\n  const calculateSubtotal = () => {\n    return items.reduce((sum, item) => sum + (item.quantity * item.unitPrice), 0);\n  };\n\n  const calculateTotal = () => {\n    const subtotal = calculateSubtotal();\n    const fees = saleData.paymentMethod === 'visa' ? subtotal * 0.05 : 0;\n    return subtotal + fees;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (items.length === 0) {\n      toast({\n        title: \"خطأ\",\n        description: \"يجب إضافة عنصر واحد على الأقل\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const subtotal = calculateSubtotal();\n    \n    const saleItems = items.map(item => ({\n      ...item,\n      totalPrice: item.quantity * item.unitPrice,\n    }));\n\n    createSaleMutation.mutate({\n      sale: {\n        ...saleData,\n        subtotal: subtotal.toFixed(2),\n      },\n      items: saleItems,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>تسجيل بيع جديد</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Sale Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"channel\">قناة البيع <span className=\"text-destructive\">*</span></Label>\n              <Select onValueChange={(value) => setSaleData(prev => ({ ...prev, channel: value }))}>\n                <SelectTrigger data-testid=\"select-sales-channel\">\n                  <SelectValue placeholder=\"اختر قناة البيع\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {SALES_CHANNELS.map((channel) => (\n                    <SelectItem key={channel.value} value={channel.value}>\n                      {channel.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"paymentMethod\">طريقة الدفع <span className=\"text-destructive\">*</span></Label>\n              <Select onValueChange={(value) => setSaleData(prev => ({ ...prev, paymentMethod: value }))}>\n                <SelectTrigger data-testid=\"select-payment-method\">\n                  <SelectValue placeholder=\"اختر طريقة الدفع\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {PAYMENT_METHODS.map((method) => (\n                    <SelectItem key={method.value} value={method.value}>\n                      {method.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Sale Items */}\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"text-lg font-medium\">عناصر البيع</h4>\n              <Button \n                type=\"button\" \n                onClick={addItem}\n                data-testid=\"button-add-item\"\n              >\n                <i className=\"fas fa-plus mr-2 ml-0\"></i>\n                إضافة عنصر\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {items.map((item, index) => (\n                <div key={index} className=\"border border-border rounded-lg p-4\">\n                  <div className=\"grid grid-cols-2 lg:grid-cols-6 gap-4 mb-4\">\n                    <div>\n                      <Label>المنتج</Label>\n                      <Select onValueChange={(value) => {\n                        updateItem(index, \"productId\", value);\n                        const product = products?.find((p: any) => p.id === value);\n                        if (product) {\n                          updateItem(index, \"unitPrice\", parseFloat(saleData.channel === 'in-store' ? product.storePrice : product.onlinePrice));\n                        }\n                      }}>\n                        <SelectTrigger data-testid={`select-product-${index}`}>\n                          <SelectValue placeholder=\"اختر المنتج\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {products?.map((product: any) => (\n                            <SelectItem key={product.id} value={product.id}>\n                              {product.modelNumber} - {product.companyName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label>اللون</Label>\n                      <Input\n                        value={item.color}\n                        onChange={(e) => updateItem(index, \"color\", e.target.value)}\n                        placeholder=\"مثال: أسود، أبيض، أحمر\"\n                        data-testid={`input-color-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>المقاس</Label>\n                      <Input\n                        value={item.size}\n                        onChange={(e) => updateItem(index, \"size\", e.target.value)}\n                        placeholder=\"مثال: 38، 40، L، XL\"\n                        data-testid={`input-size-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>الكمية</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        value={item.quantity}\n                        onChange={(e) => updateItem(index, \"quantity\", parseInt(e.target.value) || 1)}\n                        data-testid={`input-quantity-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>سعر الوحدة</Label>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={item.unitPrice}\n                        onChange={(e) => updateItem(index, \"unitPrice\", parseFloat(e.target.value) || 0)}\n                        data-testid={`input-unit-price-${index}`}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-end\">\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => removeItem(index)}\n                        data-testid={`button-remove-item-${index}`}\n                      >\n                        <i className=\"fas fa-trash\"></i>\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  {/* Available Inventory Display */}\n                  {item.productId && (\n                    <AvailableInventory\n                      productId={item.productId}\n                      onColorSelect={(color) => updateItem(index, \"color\", color)}\n                      onSizeSelect={(size) => updateItem(index, \"size\", size)}\n                      selectedColor={item.color}\n                      selectedSize={item.size}\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Summary */}\n          {items.length > 0 && (\n            <div className=\"bg-muted/30 rounded-lg p-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>المجموع الفرعي:</span>\n                  <span data-testid=\"text-subtotal\">{calculateSubtotal().toFixed(2)} درهم</span>\n                </div>\n                {saleData.paymentMethod === 'visa' && (\n                  <div className=\"flex justify-between\">\n                    <span>رسوم فيزا (5%):</span>\n                    <span data-testid=\"text-fees\">{(calculateSubtotal() * 0.05).toFixed(2)} درهم</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between font-bold text-lg\">\n                  <span>المجموع الإجمالي:</span>\n                  <span data-testid=\"text-total\">{calculateTotal().toFixed(2)} درهم</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Form Actions */}\n          <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-6 border-t border-border\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              إلغاء\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createSaleMutation.isPending}\n              data-testid=\"button-save-sale\"\n            >\n              {createSaleMutation.isPending ? \"جاري الحفظ...\" : \"تسجيل البيع\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11839},"attached_assets/Sales_1756384514935.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport SaleForm from \"@/components/sales/SaleForm\";\nimport type { SaleWithItems } from \"@shared/schema\";\n\nexport default function Sales() {\n  const [showSaleForm, setShowSaleForm] = useState(false);\n\n  const { data: sales, isLoading } = useQuery({\n    queryKey: [\"/api/sales\"],\n    queryFn: api.getSales,\n  });\n\n  const formatDateTime = (date: string | Date) => {\n    return new Date(date).toLocaleString('ar-EG', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getChannelBadge = (channel: string) => {\n    return channel === 'in-store' ? (\n      <Badge variant=\"default\">متجر</Badge>\n    ) : (\n      <Badge variant=\"secondary\">أونلاين</Badge>\n    );\n  };\n\n  const getPaymentMethodLabel = (method: string) => {\n    const methods = {\n      'cash': 'نقداً',\n      'visa': 'فيزا',\n      'bank-transfer': 'تحويل بنكي',\n      'cod': 'دفع عند الاستلام',\n    };\n    return methods[method as keyof typeof methods] || method;\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">المبيعات</h1>\n          <p className=\"text-muted-foreground\">إدارة وتتبع جميع عمليات البيع</p>\n        </div>\n        <Button \n          onClick={() => setShowSaleForm(true)}\n          data-testid=\"button-new-sale\"\n        >\n          <i className=\"fas fa-plus mr-2 ml-0\"></i>\n          بيع جديد\n        </Button>\n      </div>\n\n      {/* Sales Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">إجمالي المبيعات اليوم</CardTitle>\n            <i className=\"fas fa-chart-line text-accent\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-accent\">\n              {isLoading ? \"...\" : \n                `${sales?.filter((s: SaleWithItems) => {\n                  const saleDate = new Date(s.createdAt);\n                  const today = new Date();\n                  return saleDate.toDateString() === today.toDateString();\n                }).reduce((sum: number, sale: SaleWithItems) => sum + parseFloat(sale.total), 0).toFixed(2) || \"0.00\"} درهم`\n              }\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">مبيعات المتجر</CardTitle>\n            <i className=\"fas fa-store text-primary\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">\n              {isLoading ? \"...\" : \n                `${sales?.filter((s: SaleWithItems) => s.channel === 'in-store')\n                  .reduce((sum: number, sale: SaleWithItems) => sum + parseFloat(sale.total), 0).toFixed(2) || \"0.00\"} درهم`\n              }\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">مبيعات أونلاين</CardTitle>\n            <i className=\"fas fa-globe text-blue-500\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-500\">\n              {isLoading ? \"...\" : \n                `${sales?.filter((s: SaleWithItems) => s.channel === 'online')\n                  .reduce((sum: number, sale: SaleWithItems) => sum + parseFloat(sale.total), 0).toFixed(2) || \"0.00\"} درهم`\n              }\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Sales Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>سجل المبيعات</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">جاري التحميل...</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-right\">رقم الفاتورة</TableHead>\n                    <TableHead className=\"text-right\">القناة</TableHead>\n                    <TableHead className=\"text-right\">طريقة الدفع</TableHead>\n                    <TableHead className=\"text-right\">المجموع الفرعي</TableHead>\n                    <TableHead className=\"text-right\">الرسوم</TableHead>\n                    <TableHead className=\"text-right\">المجموع الإجمالي</TableHead>\n                    <TableHead className=\"text-right\">التاريخ</TableHead>\n                    <TableHead className=\"text-right\">إجراءات</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sales?.map((sale: SaleWithItems) => (\n                    <TableRow key={sale.id} className=\"hover:bg-muted/30\">\n                      <TableCell className=\"font-medium\" data-testid={`sale-invoice-${sale.id}`}>\n                        {sale.invoiceNumber}\n                      </TableCell>\n                      <TableCell data-testid={`sale-channel-${sale.id}`}>\n                        {getChannelBadge(sale.channel)}\n                      </TableCell>\n                      <TableCell data-testid={`sale-payment-${sale.id}`}>\n                        {getPaymentMethodLabel(sale.paymentMethod)}\n                      </TableCell>\n                      <TableCell data-testid={`sale-subtotal-${sale.id}`}>\n                        {parseFloat(sale.subtotal).toFixed(2)} درهم\n                      </TableCell>\n                      <TableCell data-testid={`sale-fees-${sale.id}`}>\n                        {parseFloat(sale.fees).toFixed(2)} درهم\n                      </TableCell>\n                      <TableCell className=\"font-semibold\" data-testid={`sale-total-${sale.id}`}>\n                        {parseFloat(sale.total).toFixed(2)} درهم\n                      </TableCell>\n                      <TableCell data-testid={`sale-date-${sale.id}`}>\n                        {formatDateTime(sale.createdAt)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2 space-x-reverse\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            title=\"عرض التفاصيل\"\n                            data-testid={`button-view-sale-${sale.id}`}\n                          >\n                            <i className=\"fas fa-eye text-muted-foreground\"></i>\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            title=\"طباعة\"\n                            data-testid={`button-print-sale-${sale.id}`}\n                          >\n                            <i className=\"fas fa-print text-primary\"></i>\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              \n              {sales?.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  لا توجد مبيعات مسجلة\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Sale Form Modal */}\n      <SaleForm \n        open={showSaleForm} \n        onOpenChange={setShowSaleForm}\n      />\n    </div>\n  );\n}\n","size_bytes":8420},"attached_assets/SizeQuantityGrid_1756384552052.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface SizeQuantityItem {\n  size: string;\n  quantity: number;\n  isAvailable: boolean;\n}\n\ninterface SizeQuantityGridProps {\n  inventory: Record<string, Record<string, number>>;\n  onInventoryChange: (inventory: Record<string, Record<string, number>>) => void;\n  selectedColor?: string;\n}\n\nexport default function SizeQuantityGrid({ inventory, onInventoryChange, selectedColor = \"افتراضي\" }: SizeQuantityGridProps) {\n  const [items, setItems] = useState<SizeQuantityItem[]>(() => {\n    const existingItems: SizeQuantityItem[] = [];\n    if (inventory[selectedColor]) {\n      Object.keys(inventory[selectedColor]).forEach(size => {\n        existingItems.push({\n          size,\n          quantity: inventory[selectedColor][size],\n          isAvailable: inventory[selectedColor][size] > 0\n        });\n      });\n    }\n    return existingItems.length > 0 ? existingItems : [{ size: \"\", quantity: 0, isAvailable: false }];\n  });\n\n  const updateInventoryFromItems = (newItems: SizeQuantityItem[]) => {\n    const newInventory = { ...inventory };\n    \n    if (!newInventory[selectedColor]) {\n      newInventory[selectedColor] = {};\n    }\n    \n    // Clear existing sizes for this color\n    newInventory[selectedColor] = {};\n    \n    newItems.forEach(item => {\n      if (item.size && item.quantity >= 0) {\n        newInventory[selectedColor][item.size] = item.quantity;\n      }\n    });\n    \n    onInventoryChange(newInventory);\n  };\n\n  const handleSizeChange = (index: number, size: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], size };\n    setItems(newItems);\n    updateInventoryFromItems(newItems);\n  };\n\n  const handleQuantityChange = (index: number, quantity: number) => {\n    const newItems = [...items];\n    newItems[index] = { \n      ...newItems[index], \n      quantity: Math.max(0, quantity),\n      isAvailable: quantity > 0\n    };\n    setItems(newItems);\n    updateInventoryFromItems(newItems);\n  };\n\n  const incrementQuantity = (index: number) => {\n    const newQuantity = items[index].quantity + 1;\n    handleQuantityChange(index, newQuantity);\n  };\n\n  const decrementQuantity = (index: number) => {\n    const newQuantity = Math.max(0, items[index].quantity - 1);\n    handleQuantityChange(index, newQuantity);\n  };\n\n  const toggleAvailability = (index: number) => {\n    const newItems = [...items];\n    const newAvailability = !newItems[index].isAvailable;\n    newItems[index] = { \n      ...newItems[index], \n      isAvailable: newAvailability,\n      quantity: newAvailability ? Math.max(1, newItems[index].quantity) : 0\n    };\n    setItems(newItems);\n    updateInventoryFromItems(newItems);\n  };\n\n  const addSizeItem = () => {\n    const newItems = [...items, { size: \"\", quantity: 0, isAvailable: false }];\n    setItems(newItems);\n  };\n\n  const removeSizeItem = (index: number) => {\n    if (items.length > 1) {\n      const newItems = items.filter((_, i) => i !== index);\n      setItems(newItems);\n      updateInventoryFromItems(newItems);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <h5 className=\"font-medium\">إدارة المقاسات والكميات</h5>\n          <span className=\"text-sm text-muted-foreground\">({selectedColor})</span>\n        </div>\n        <Button \n          type=\"button\" \n          onClick={addSizeItem}\n          size=\"sm\"\n          variant=\"outline\"\n          data-testid=\"button-add-size\"\n        >\n          <i className=\"fas fa-plus mr-2 ml-0\"></i>\n          إضافة مقاس\n        </Button>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {items.map((item, index) => (\n          <div key={index} className={`border-2 rounded-lg p-4 transition-all ${\n            item.isAvailable \n              ? 'border-green-200 bg-green-50/50' \n              : 'border-gray-200 bg-gray-50/50'\n          }`}>\n            {/* Size Header */}\n            <div className=\"text-center mb-4\">\n              <Input\n                value={item.size}\n                onChange={(e) => handleSizeChange(index, e.target.value)}\n                placeholder=\"مقاس 44\"\n                className=\"text-center text-lg font-semibold border-none bg-transparent\"\n                data-testid={`input-size-${index}`}\n              />\n            </div>\n\n            {/* Quantity Display */}\n            <div className=\"text-center mb-4\">\n              <div className=\"text-3xl font-bold text-amber-600 mb-1\">\n                {item.quantity}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">قطعة</div>\n            </div>\n\n            {/* Quantity Controls */}\n            <div className=\"flex items-center justify-center mb-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => decrementQuantity(index)}\n                disabled={item.quantity <= 0}\n                className=\"rounded-r-none\"\n                data-testid={`button-decrement-${index}`}\n              >\n                <i className=\"fas fa-minus\"></i>\n              </Button>\n              \n              <Input\n                type=\"number\"\n                min=\"0\"\n                value={item.quantity || \"\"}\n                onChange={(e) => handleQuantityChange(index, parseInt(e.target.value) || 0)}\n                className=\"text-center border-l-0 border-r-0 rounded-none w-20\"\n                data-testid={`input-quantity-${index}`}\n              />\n              \n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => incrementQuantity(index)}\n                className=\"rounded-l-none\"\n                data-testid={`button-increment-${index}`}\n              >\n                <i className=\"fas fa-plus\"></i>\n              </Button>\n            </div>\n\n            {/* Availability Toggle */}\n            <div className=\"space-y-2\">\n              <Button\n                type=\"button\"\n                variant={item.isAvailable ? \"destructive\" : \"default\"}\n                size=\"sm\"\n                onClick={() => toggleAvailability(index)}\n                className=\"w-full\"\n                data-testid={`button-availability-${index}`}\n              >\n                <i className={`fas ${item.isAvailable ? 'fa-minus' : 'fa-plus'} mr-2 ml-0`}></i>\n                {item.isAvailable ? 'نفد المخزون' : 'بيع قطعة'}\n              </Button>\n              \n              <div className=\"text-center\">\n                <span className={`text-sm ${\n                  item.isAvailable ? 'text-green-600' : 'text-orange-500'\n                }`}>\n                  {item.isAvailable ? 'متوفر' : 'مخزون منتهي!'}\n                </span>\n              </div>\n            </div>\n\n            {/* Remove Button */}\n            {items.length > 1 && (\n              <div className=\"mt-3 pt-3 border-t border-border\">\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeSizeItem(index)}\n                  className=\"w-full text-destructive hover:text-destructive\"\n                  data-testid={`button-remove-size-${index}`}\n                >\n                  <i className=\"fas fa-trash mr-2 ml-0\"></i>\n                  حذف المقاس\n                </Button>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      \n      {items.length === 0 && (\n        <div className=\"text-center text-muted-foreground py-8\">\n          <i className=\"fas fa-box-open text-4xl mb-4 block\"></i>\n          اضغط \"إضافة مقاس\" لبدء إضافة المقاسات والكميات\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8083},"attached_assets/drizzle.config_1756384141176.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"attached_assets/index_1756384408394.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"attached_assets/index_1756384432941.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"attached_assets/not-found_1756384514934.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"attached_assets/postcss.config_1756384141179.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"attached_assets/replit_1756384141180.md":{"content":"# Store Management System - LAROZA\n\n## Overview\n\nThis is a full-stack web application for LAROZA (لاروزا), an internal store management system designed for employees. The system provides comprehensive inventory management, sales tracking, returns processing, and accounting capabilities, all with a complete Arabic interface using right-to-left (RTL) layout.\n\nThe application follows a modern web architecture with React frontend, Express.js backend, and PostgreSQL database, utilizing TypeScript throughout for type safety and better development experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development\n- **UI Library**: Shadcn/ui components with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with RTL support and custom Arabic fonts (Cairo, Amiri)\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Layout**: Responsive design with sidebar navigation and RTL support\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints following standard HTTP conventions\n- **Middleware**: Custom logging, CORS, and error handling\n- **Development**: Hot reloading with Vite integration for full-stack development\n\n### Database Architecture\n- **Database**: PostgreSQL with Drizzle ORM\n- **Schema Design**: Normalized relational structure with proper foreign key relationships\n- **Key Tables**:\n  - Products: Core product information with model numbers\n  - Product Inventory: Color/size matrix with quantities (6 colors × 8 sizes)\n  - Sales: Transaction records with payment methods and channels\n  - Sale Items: Line items linking products to sales\n  - Returns: Return transactions with refund/exchange tracking\n  - Expenses: Business expense tracking\n  - Purchases: Supplier purchase records\n\n### Data Flow Architecture\n- **Product Management**: Multi-dimensional inventory tracking (color × size × quantity)\n- **Sales Processing**: Automatic inventory deduction with payment fee calculations\n- **Returns System**: Inventory restoration with accounting adjustments\n- **Reporting**: Date-range filtering for sales, expenses, and profit/loss analysis\n\n### Component Architecture\n- **Modular Design**: Feature-based component organization\n- **Shared Components**: Reusable UI components in `/components/ui`\n- **Page Components**: Route-specific components in `/pages`\n- **Form Components**: Specialized forms for sales, returns, and inventory management\n- **Layout Components**: Consistent sidebar navigation and header structure\n\n### Type Safety\n- **Shared Schema**: Common TypeScript types between frontend and backend\n- **Validation**: Zod schemas for runtime type checking and form validation\n- **Database Types**: Drizzle-generated types for type-safe database operations\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver for database connectivity\n- **drizzle-orm**: Type-safe ORM for PostgreSQL with migration support\n- **@tanstack/react-query**: Server state management and caching\n\n### UI and Styling Dependencies\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework with RTL support\n- **class-variance-authority**: Type-safe CSS class composition\n- **lucide-react**: Modern icon library\n\n### Form and Validation Dependencies\n- **react-hook-form**: Performant form library with validation\n- **@hookform/resolvers**: Integration between React Hook Form and validation libraries\n- **zod**: TypeScript-first schema validation\n\n### Development Dependencies\n- **vite**: Fast build tool and development server\n- **typescript**: Static type checking\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### Font Dependencies\n- **Google Fonts**: Cairo and Amiri fonts for proper Arabic typography\n- **Font Awesome**: Icon library for UI elements\n\n### Database Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle Kit**: Database migration and schema management tools","size_bytes":4353},"attached_assets/routes_1756384408395.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertProductSchema, \n  insertProductInventorySchema,\n  insertSaleSchema,\n  insertSaleItemSchema,\n  insertReturnSchema,\n  insertReturnItemSchema,\n  insertExpenseSchema,\n  insertPurchaseSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body.product);\n      const inventoryData = z.array(insertProductInventorySchema).parse(req.body.inventory);\n\n      // Check if model number already exists\n      const existingProduct = await storage.getProductByModelNumber(productData.modelNumber);\n      if (existingProduct) {\n        return res.status(400).json({ message: \"Model number already exists\" });\n      }\n\n      const product = await storage.createProduct(productData);\n      \n      // Add inventory items\n      const inventoryItems = inventoryData.map(item => ({ ...item, productId: product.id }));\n      await storage.bulkUpdateInventory(inventoryItems);\n\n      const productWithInventory = await storage.getProductById(product.id);\n      res.status(201).json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const updatedProduct = await storage.updateProduct(req.params.id, productData);\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      const productWithInventory = await storage.getProductById(req.params.id);\n      res.json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const inventory = await storage.getProductInventory(req.params.id);\n      res.json(inventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.put(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const { color, size, quantity } = req.body;\n      const updatedInventory = await storage.updateInventory(req.params.id, color, size, quantity);\n      res.json(updatedInventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update inventory\" });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/sales\", async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/:id\", async (req, res) => {\n    try {\n      const sale = await storage.getSaleById(req.params.id);\n      if (!sale) {\n        return res.status(404).json({ message: \"Sale not found\" });\n      }\n      res.json(sale);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sale\" });\n    }\n  });\n\n  app.post(\"/api/sales\", async (req, res) => {\n    try {\n      const saleData = insertSaleSchema.parse(req.body.sale);\n      const items = z.array(insertSaleItemSchema).parse(req.body.items);\n\n      // Calculate fees for Visa payments\n      let fees = 0;\n      if (saleData.paymentMethod === 'visa') {\n        fees = parseFloat(saleData.subtotal) * 0.05; // 5% fee\n      }\n\n      const total = parseFloat(saleData.subtotal) + fees;\n      \n      const saleWithCalculations = {\n        ...saleData,\n        fees: fees.toFixed(2),\n        total: total.toFixed(2),\n      };\n\n      const sale = await storage.createSale(saleWithCalculations, items);\n      res.status(201).json(sale);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create sale\" });\n    }\n  });\n\n  // Returns routes\n  app.get(\"/api/returns\", async (req, res) => {\n    try {\n      const returns = await storage.getReturns();\n      res.json(returns);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch returns\" });\n    }\n  });\n\n  app.post(\"/api/returns\", async (req, res) => {\n    try {\n      const returnData = insertReturnSchema.parse(req.body.return);\n      const items = z.array(insertReturnItemSchema).parse(req.body.items);\n\n      const returnRecord = await storage.createReturn(returnData, items);\n      res.status(201).json(returnRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create return\" });\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenses = await storage.getExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenseData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  // Purchases routes\n  app.get(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchases = await storage.getPurchases();\n      res.json(purchases);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch purchases\" });\n    }\n  });\n\n  app.post(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchaseData = insertPurchaseSchema.parse(req.body);\n      const purchase = await storage.createPurchase(purchaseData);\n      res.status(201).json(purchase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create purchase\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reports routes\n  app.get(\"/api/reports/sales\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const sales = await storage.getSalesByDateRange(start, end);\n      \n      // Calculate totals by channel\n      const inStoreSales = sales.filter(sale => sale.channel === 'in-store');\n      const onlineSales = sales.filter(sale => sale.channel === 'online');\n      \n      const inStoreTotal = inStoreSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      const onlineTotal = onlineSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      \n      res.json({\n        sales,\n        summary: {\n          totalSales: inStoreTotal + onlineTotal,\n          inStoreTotal,\n          onlineTotal,\n          inStoreCount: inStoreSales.length,\n          onlineCount: onlineSales.length,\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate sales report\" });\n    }\n  });\n\n  app.get(\"/api/reports/expenses\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const expenses = await storage.getExpensesByDateRange(start, end);\n      const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n      \n      res.json({\n        expenses,\n        totalExpenses,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate expenses report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10006},"attached_assets/routes_1756384451228.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertProductSchema, \n  insertProductInventorySchema,\n  insertSaleSchema,\n  insertSaleItemSchema,\n  insertReturnSchema,\n  insertReturnItemSchema,\n  insertExpenseSchema,\n  insertPurchaseSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body.product);\n      const inventoryData = z.array(insertProductInventorySchema).parse(req.body.inventory);\n\n      // Check if model number already exists\n      const existingProduct = await storage.getProductByModelNumber(productData.modelNumber);\n      if (existingProduct) {\n        return res.status(400).json({ message: \"Model number already exists\" });\n      }\n\n      const product = await storage.createProduct(productData);\n      \n      // Add inventory items\n      const inventoryItems = inventoryData.map(item => ({ ...item, productId: product.id }));\n      await storage.bulkUpdateInventory(inventoryItems);\n\n      const productWithInventory = await storage.getProductById(product.id);\n      res.status(201).json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const updatedProduct = await storage.updateProduct(req.params.id, productData);\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      const productWithInventory = await storage.getProductById(req.params.id);\n      res.json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const inventory = await storage.getProductInventory(req.params.id);\n      res.json(inventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.put(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const { color, size, quantity } = req.body;\n      const updatedInventory = await storage.updateInventory(req.params.id, color, size, quantity);\n      res.json(updatedInventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update inventory\" });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/sales\", async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/:id\", async (req, res) => {\n    try {\n      const sale = await storage.getSaleById(req.params.id);\n      if (!sale) {\n        return res.status(404).json({ message: \"Sale not found\" });\n      }\n      res.json(sale);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sale\" });\n    }\n  });\n\n  app.post(\"/api/sales\", async (req, res) => {\n    try {\n      const saleData = insertSaleSchema.parse(req.body.sale);\n      const items = z.array(insertSaleItemSchema).parse(req.body.items);\n\n      // Calculate fees for Visa payments\n      let fees = 0;\n      if (saleData.paymentMethod === 'visa') {\n        fees = parseFloat(saleData.subtotal) * 0.05; // 5% fee\n      }\n\n      const total = parseFloat(saleData.subtotal) + fees;\n      \n      const saleWithCalculations = {\n        ...saleData,\n        fees: fees.toFixed(2),\n        total: total.toFixed(2),\n      };\n\n      const sale = await storage.createSale(saleWithCalculations, items);\n      res.status(201).json(sale);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create sale\" });\n    }\n  });\n\n  // Returns routes\n  app.get(\"/api/returns\", async (req, res) => {\n    try {\n      const returns = await storage.getReturns();\n      res.json(returns);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch returns\" });\n    }\n  });\n\n  app.post(\"/api/returns\", async (req, res) => {\n    try {\n      const returnData = insertReturnSchema.parse(req.body.return);\n      const items = z.array(insertReturnItemSchema).parse(req.body.items);\n\n      const returnRecord = await storage.createReturn(returnData, items);\n      res.status(201).json(returnRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create return\" });\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenses = await storage.getExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenseData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  // Purchases routes\n  app.get(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchases = await storage.getPurchases();\n      res.json(purchases);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch purchases\" });\n    }\n  });\n\n  app.post(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchaseData = insertPurchaseSchema.parse(req.body);\n      const purchase = await storage.createPurchase(purchaseData);\n      res.status(201).json(purchase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create purchase\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reports routes\n  app.get(\"/api/reports/sales\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const sales = await storage.getSalesByDateRange(start, end);\n      \n      // Calculate totals by channel\n      const inStoreSales = sales.filter(sale => sale.channel === 'in-store');\n      const onlineSales = sales.filter(sale => sale.channel === 'online');\n      \n      const inStoreTotal = inStoreSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      const onlineTotal = onlineSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      \n      res.json({\n        sales,\n        summary: {\n          totalSales: inStoreTotal + onlineTotal,\n          inStoreTotal,\n          onlineTotal,\n          inStoreCount: inStoreSales.length,\n          onlineCount: onlineSales.length,\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate sales report\" });\n    }\n  });\n\n  app.get(\"/api/reports/expenses\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const expenses = await storage.getExpensesByDateRange(start, end);\n      const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n      \n      res.json({\n        expenses,\n        totalExpenses,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate expenses report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10006},"attached_assets/routes_1756384459943.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertProductSchema, \n  insertProductInventorySchema,\n  insertSaleSchema,\n  insertSaleItemSchema,\n  insertReturnSchema,\n  insertReturnItemSchema,\n  insertExpenseSchema,\n  insertPurchaseSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body.product);\n      const inventoryData = z.array(insertProductInventorySchema).parse(req.body.inventory);\n\n      // Check if model number already exists\n      const existingProduct = await storage.getProductByModelNumber(productData.modelNumber);\n      if (existingProduct) {\n        return res.status(400).json({ message: \"Model number already exists\" });\n      }\n\n      const product = await storage.createProduct(productData);\n      \n      // Add inventory items\n      const inventoryItems = inventoryData.map(item => ({ ...item, productId: product.id }));\n      await storage.bulkUpdateInventory(inventoryItems);\n\n      const productWithInventory = await storage.getProductById(product.id);\n      res.status(201).json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const updatedProduct = await storage.updateProduct(req.params.id, productData);\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      const productWithInventory = await storage.getProductById(req.params.id);\n      res.json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const inventory = await storage.getProductInventory(req.params.id);\n      res.json(inventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.put(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const { color, size, quantity } = req.body;\n      const updatedInventory = await storage.updateInventory(req.params.id, color, size, quantity);\n      res.json(updatedInventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update inventory\" });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/sales\", async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/:id\", async (req, res) => {\n    try {\n      const sale = await storage.getSaleById(req.params.id);\n      if (!sale) {\n        return res.status(404).json({ message: \"Sale not found\" });\n      }\n      res.json(sale);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sale\" });\n    }\n  });\n\n  app.post(\"/api/sales\", async (req, res) => {\n    try {\n      const saleData = insertSaleSchema.parse(req.body.sale);\n      const items = z.array(insertSaleItemSchema).parse(req.body.items);\n\n      // Calculate fees for Visa payments\n      let fees = 0;\n      if (saleData.paymentMethod === 'visa') {\n        fees = parseFloat(saleData.subtotal) * 0.05; // 5% fee\n      }\n\n      const total = parseFloat(saleData.subtotal) + fees;\n      \n      const saleWithCalculations = {\n        ...saleData,\n        fees: fees.toFixed(2),\n        total: total.toFixed(2),\n      };\n\n      const sale = await storage.createSale(saleWithCalculations, items);\n      res.status(201).json(sale);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create sale\" });\n    }\n  });\n\n  // Returns routes\n  app.get(\"/api/returns\", async (req, res) => {\n    try {\n      const returns = await storage.getReturns();\n      res.json(returns);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch returns\" });\n    }\n  });\n\n  app.post(\"/api/returns\", async (req, res) => {\n    try {\n      const returnData = insertReturnSchema.parse(req.body.return);\n      const items = z.array(insertReturnItemSchema).parse(req.body.items);\n\n      const returnRecord = await storage.createReturn(returnData, items);\n      res.status(201).json(returnRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create return\" });\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenses = await storage.getExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenseData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  // Purchases routes\n  app.get(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchases = await storage.getPurchases();\n      res.json(purchases);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch purchases\" });\n    }\n  });\n\n  app.post(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchaseData = insertPurchaseSchema.parse(req.body);\n      const purchase = await storage.createPurchase(purchaseData);\n      res.status(201).json(purchase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create purchase\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reports routes\n  app.get(\"/api/reports/sales\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const sales = await storage.getSalesByDateRange(start, end);\n      \n      // Calculate totals by channel\n      const inStoreSales = sales.filter(sale => sale.channel === 'in-store');\n      const onlineSales = sales.filter(sale => sale.channel === 'online');\n      \n      const inStoreTotal = inStoreSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      const onlineTotal = onlineSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      \n      res.json({\n        sales,\n        summary: {\n          totalSales: inStoreTotal + onlineTotal,\n          inStoreTotal,\n          onlineTotal,\n          inStoreCount: inStoreSales.length,\n          onlineCount: onlineSales.length,\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate sales report\" });\n    }\n  });\n\n  app.get(\"/api/reports/expenses\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const expenses = await storage.getExpensesByDateRange(start, end);\n      const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n      \n      res.json({\n        expenses,\n        totalExpenses,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate expenses report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10006},"attached_assets/schema_1756384485401.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  modelNumber: varchar(\"model_number\").notNull().unique(),\n  companyName: text(\"company_name\").notNull(),\n  productType: varchar(\"product_type\").notNull(),\n  storePrice: decimal(\"store_price\", { precision: 10, scale: 2 }).notNull(),\n  onlinePrice: decimal(\"online_price\", { precision: 10, scale: 2 }).notNull(),\n  imageUrl: text(\"image_url\"),\n  specifications: text(\"specifications\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Product inventory (colors and sizes)\nexport const productInventory = pgTable(\"product_inventory\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  color: varchar(\"color\").notNull(), // black, white, red, blue, green, brown\n  size: varchar(\"size\").notNull(), // 38, 40, 42, 44, 46, 48, 50, 52\n  quantity: integer(\"quantity\").notNull().default(0),\n});\n\n// Sales table\nexport const sales = pgTable(\"sales\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: varchar(\"invoice_number\").notNull().unique(),\n  channel: varchar(\"channel\").notNull(), // \"in-store\" or \"online\"\n  paymentMethod: varchar(\"payment_method\").notNull(), // \"cash\", \"visa\", \"bank-transfer\", \"cod\"\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  fees: decimal(\"fees\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Sale items\nexport const saleItems = pgTable(\"sale_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  saleId: varchar(\"sale_id\").references(() => sales.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  color: varchar(\"color\").notNull(),\n  size: varchar(\"size\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Returns table\nexport const returns = pgTable(\"returns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  originalSaleId: varchar(\"original_sale_id\").references(() => sales.id).notNull(),\n  returnType: varchar(\"return_type\").notNull(), // \"refund\" or \"exchange\"\n  refundAmount: decimal(\"refund_amount\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Return items\nexport const returnItems = pgTable(\"return_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  returnId: varchar(\"return_id\").references(() => returns.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  color: varchar(\"color\").notNull(),\n  size: varchar(\"size\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n});\n\n// Expenses table\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\").notNull(), // \"rent\", \"salaries\", \"utilities\", \"other\"\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  date: timestamp(\"date\").defaultNow().notNull(),\n});\n\n// Purchase invoices from suppliers\nexport const purchases = pgTable(\"purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  supplierName: text(\"supplier_name\").notNull(),\n  invoiceNumber: varchar(\"invoice_number\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  date: timestamp(\"date\").defaultNow().notNull(),\n});\n\n// Schemas for validation\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductInventorySchema = createInsertSchema(productInventory).omit({\n  id: true,\n});\n\nexport const insertSaleSchema = createInsertSchema(sales).omit({\n  id: true,\n  invoiceNumber: true,\n  createdAt: true,\n});\n\nexport const insertSaleItemSchema = createInsertSchema(saleItems).omit({\n  id: true,\n});\n\nexport const insertReturnSchema = createInsertSchema(returns).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReturnItemSchema = createInsertSchema(returnItems).omit({\n  id: true,\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n});\n\nexport const insertPurchaseSchema = createInsertSchema(purchases).omit({\n  id: true,\n});\n\n// Types\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type ProductInventory = typeof productInventory.$inferSelect;\nexport type InsertProductInventory = z.infer<typeof insertProductInventorySchema>;\nexport type Sale = typeof sales.$inferSelect;\nexport type InsertSale = z.infer<typeof insertSaleSchema>;\nexport type SaleItem = typeof saleItems.$inferSelect;\nexport type InsertSaleItem = z.infer<typeof insertSaleItemSchema>;\nexport type Return = typeof returns.$inferSelect;\nexport type InsertReturn = z.infer<typeof insertReturnSchema>;\nexport type ReturnItem = typeof returnItems.$inferSelect;\nexport type InsertReturnItem = z.infer<typeof insertReturnItemSchema>;\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type Purchase = typeof purchases.$inferSelect;\nexport type InsertPurchase = z.infer<typeof insertPurchaseSchema>;\n\n// Extended types for API responses\nexport type ProductWithInventory = Product & {\n  inventory: ProductInventory[];\n  totalQuantity: number;\n  status: 'in-stock' | 'low-stock' | 'out-of-stock';\n};\n\nexport type SaleWithItems = Sale & {\n  items: (SaleItem & { product: Product })[];\n};\n\nexport type ReturnWithItems = Return & {\n  items: (ReturnItem & { product: Product })[];\n  originalSale: Sale;\n};\n\n// Constants\nexport const COLORS = ['black', 'white', 'red', 'blue', 'green', 'brown'] as const;\nexport const SIZES = ['38', '40', '42', '44', '46', '48', '50', '52'] as const;\nexport const PRODUCT_TYPES = ['dress', 'evening-wear', 'hijab', 'abaya', 'accessories'] as const;\nexport const PAYMENT_METHODS = ['cash', 'visa', 'bank-transfer', 'cod'] as const;\nexport const EXPENSE_CATEGORIES = ['rent', 'salaries', 'utilities', 'other'] as const;\n","size_bytes":6695},"attached_assets/storage_1756384408396.ts":{"content":"import { \n  type Product, \n  type InsertProduct, \n  type ProductInventory, \n  type InsertProductInventory,\n  type Sale,\n  type InsertSale,\n  type SaleItem,\n  type InsertSaleItem,\n  type Return,\n  type InsertReturn,\n  type ReturnItem,\n  type InsertReturnItem,\n  type Expense,\n  type InsertExpense,\n  type Purchase,\n  type InsertPurchase,\n  type ProductWithInventory,\n  type SaleWithItems,\n  type ReturnWithItems,\n  COLORS,\n  SIZES\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Products\n  getProducts(): Promise<ProductWithInventory[]>;\n  getProductById(id: string): Promise<ProductWithInventory | undefined>;\n  getProductByModelNumber(modelNumber: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  \n  // Product Inventory\n  getProductInventory(productId: string): Promise<ProductInventory[]>;\n  updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory>;\n  bulkUpdateInventory(inventoryItems: InsertProductInventory[]): Promise<ProductInventory[]>;\n  \n  // Sales\n  getSales(): Promise<SaleWithItems[]>;\n  getSaleById(id: string): Promise<SaleWithItems | undefined>;\n  createSale(sale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems>;\n  getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]>;\n  \n  // Returns\n  getReturns(): Promise<ReturnWithItems[]>;\n  getReturnById(id: string): Promise<ReturnWithItems | undefined>;\n  createReturn(returnData: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems>;\n  \n  // Expenses\n  getExpenses(): Promise<Expense[]>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]>;\n  \n  // Purchases\n  getPurchases(): Promise<Purchase[]>;\n  createPurchase(purchase: InsertPurchase): Promise<Purchase>;\n  getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]>;\n  \n  // Analytics\n  getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private products: Map<string, Product> = new Map();\n  private inventory: Map<string, ProductInventory> = new Map();\n  private sales: Map<string, Sale> = new Map();\n  private saleItems: Map<string, SaleItem> = new Map();\n  private returns: Map<string, Return> = new Map();\n  private returnItems: Map<string, ReturnItem> = new Map();\n  private expenses: Map<string, Expense> = new Map();\n  private purchases: Map<string, Purchase> = new Map();\n\n  constructor() {\n    // Initialize with some sample data for testing\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample products\n    const product1: Product = {\n      id: randomUUID(),\n      modelNumber: \"EVE-001\",\n      companyName: \"شركة الأزياء الراقية\",\n      productType: \"evening-wear\",\n      storePrice: \"890.00\",\n      onlinePrice: \"850.00\",\n      imageUrl: null,\n      specifications: \"فستان سهرة أنيق مصنوع من أجود الأقمشة\",\n      createdAt: new Date(),\n    };\n\n    const product2: Product = {\n      id: randomUUID(),\n      modelNumber: \"HIJ-025\",\n      companyName: \"شركة الحجاب الفاخر\",\n      productType: \"hijab\",\n      storePrice: \"150.00\",\n      onlinePrice: \"140.00\",\n      imageUrl: null,\n      specifications: \"حجاب حرير فاخر بجودة عالية\",\n      createdAt: new Date(),\n    };\n\n    this.products.set(product1.id, product1);\n    this.products.set(product2.id, product2);\n\n    // Sample inventory\n    COLORS.forEach((color) => {\n      SIZES.forEach((size) => {\n        const inventory1: ProductInventory = {\n          id: randomUUID(),\n          productId: product1.id,\n          color,\n          size,\n          quantity: Math.floor(Math.random() * 20) + 1,\n        };\n        const inventory2: ProductInventory = {\n          id: randomUUID(),\n          productId: product2.id,\n          color,\n          size,\n          quantity: Math.floor(Math.random() * 10) + 1,\n        };\n        this.inventory.set(inventory1.id, inventory1);\n        this.inventory.set(inventory2.id, inventory2);\n      });\n    });\n  }\n\n  // Products\n  async getProducts(): Promise<ProductWithInventory[]> {\n    const productsArray = Array.from(this.products.values());\n    const productsWithInventory = await Promise.all(\n      productsArray.map(async (product) => {\n        const inventory = await this.getProductInventory(product.id);\n        const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n        let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n        \n        if (totalQuantity === 0) {\n          status = 'out-of-stock';\n        } else if (totalQuantity < 10) {\n          status = 'low-stock';\n        }\n\n        return {\n          ...product,\n          inventory,\n          totalQuantity,\n          status,\n        } as ProductWithInventory;\n      })\n    );\n    \n    return productsWithInventory;\n  }\n\n  async getProductById(id: string): Promise<ProductWithInventory | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n\n    const inventory = await this.getProductInventory(id);\n    const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n    let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n    \n    if (totalQuantity === 0) {\n      status = 'out-of-stock';\n    } else if (totalQuantity < 10) {\n      status = 'low-stock';\n    }\n\n    return {\n      ...product,\n      inventory,\n      totalQuantity,\n      status,\n    } as ProductWithInventory;\n  }\n\n  async getProductByModelNumber(modelNumber: string): Promise<Product | undefined> {\n    return Array.from(this.products.values()).find(p => p.modelNumber === modelNumber);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = {\n      ...insertProduct,\n      id,\n      imageUrl: insertProduct.imageUrl || null,\n      specifications: insertProduct.specifications || null,\n      createdAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, updateData: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existingProduct = this.products.get(id);\n    if (!existingProduct) return undefined;\n\n    const updatedProduct = { ...existingProduct, ...updateData };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  // Product Inventory\n  async getProductInventory(productId: string): Promise<ProductInventory[]> {\n    return Array.from(this.inventory.values()).filter(item => item.productId === productId);\n  }\n\n  async updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory> {\n    const existingItem = Array.from(this.inventory.values()).find(\n      item => item.productId === productId && item.color === color && item.size === size\n    );\n\n    if (existingItem) {\n      existingItem.quantity = quantity;\n      this.inventory.set(existingItem.id, existingItem);\n      return existingItem;\n    } else {\n      const id = randomUUID();\n      const newItem: ProductInventory = {\n        id,\n        productId,\n        color,\n        size,\n        quantity,\n      };\n      this.inventory.set(id, newItem);\n      return newItem;\n    }\n  }\n\n  async bulkUpdateInventory(inventoryItems: InsertProductInventory[]): Promise<ProductInventory[]> {\n    const results: ProductInventory[] = [];\n    \n    for (const item of inventoryItems) {\n      const result = await this.updateInventory(item.productId, item.color, item.size, item.quantity || 0);\n      results.push(result);\n    }\n    \n    return results;\n  }\n\n  // Sales\n  async getSales(): Promise<SaleWithItems[]> {\n    const salesArray = Array.from(this.sales.values());\n    return Promise.all(\n      salesArray.map(async (sale) => {\n        const items = Array.from(this.saleItems.values())\n          .filter(item => item.saleId === sale.id)\n          .map(item => ({\n            ...item,\n            product: this.products.get(item.productId)!,\n          }));\n        \n        return {\n          ...sale,\n          items,\n        } as SaleWithItems;\n      })\n    );\n  }\n\n  async getSaleById(id: string): Promise<SaleWithItems | undefined> {\n    const sale = this.sales.get(id);\n    if (!sale) return undefined;\n\n    const items = Array.from(this.saleItems.values())\n      .filter(item => item.saleId === id)\n      .map(item => ({\n        ...item,\n        product: this.products.get(item.productId)!,\n      }));\n\n    return {\n      ...sale,\n      items,\n    } as SaleWithItems;\n  }\n\n  async createSale(insertSale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems> {\n    const saleId = randomUUID();\n    const invoiceNumber = `INV-${Date.now()}`;\n    \n    const sale: Sale = {\n      ...insertSale,\n      id: saleId,\n      invoiceNumber,\n      fees: insertSale.fees || \"0\",\n      createdAt: new Date(),\n    };\n\n    this.sales.set(saleId, sale);\n\n    // Create sale items and update inventory\n    const saleItemsWithProducts = [];\n    for (const item of items) {\n      const saleItemId = randomUUID();\n      const saleItem: SaleItem = {\n        ...item,\n        id: saleItemId,\n        saleId,\n      };\n      \n      this.saleItems.set(saleItemId, saleItem);\n      \n      // Update inventory (decrease quantity)\n      const inventoryItem = Array.from(this.inventory.values()).find(\n        inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n      );\n      \n      if (inventoryItem && inventoryItem.quantity >= item.quantity) {\n        inventoryItem.quantity -= item.quantity;\n        this.inventory.set(inventoryItem.id, inventoryItem);\n      }\n\n      saleItemsWithProducts.push({\n        ...saleItem,\n        product: this.products.get(item.productId)!,\n      });\n    }\n\n    return {\n      ...sale,\n      items: saleItemsWithProducts,\n    } as SaleWithItems;\n  }\n\n  async getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]> {\n    const allSales = await this.getSales();\n    return allSales.filter(sale => {\n      const saleDate = new Date(sale.createdAt);\n      return saleDate >= startDate && saleDate <= endDate;\n    });\n  }\n\n  // Returns\n  async getReturns(): Promise<ReturnWithItems[]> {\n    const returnsArray = Array.from(this.returns.values());\n    return Promise.all(\n      returnsArray.map(async (returnData) => {\n        const items = Array.from(this.returnItems.values())\n          .filter(item => item.returnId === returnData.id)\n          .map(item => ({\n            ...item,\n            product: this.products.get(item.productId)!,\n          }));\n        \n        const originalSale = this.sales.get(returnData.originalSaleId)!;\n        \n        return {\n          ...returnData,\n          items,\n          originalSale,\n        } as ReturnWithItems;\n      })\n    );\n  }\n\n  async getReturnById(id: string): Promise<ReturnWithItems | undefined> {\n    const returnData = this.returns.get(id);\n    if (!returnData) return undefined;\n\n    const items = Array.from(this.returnItems.values())\n      .filter(item => item.returnId === id)\n      .map(item => ({\n        ...item,\n        product: this.products.get(item.productId)!,\n      }));\n\n    const originalSale = this.sales.get(returnData.originalSaleId)!;\n\n    return {\n      ...returnData,\n      items,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  async createReturn(insertReturn: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems> {\n    const returnId = randomUUID();\n    \n    const returnData: Return = {\n      ...insertReturn,\n      id: returnId,\n      refundAmount: insertReturn.refundAmount || \"0\",\n      createdAt: new Date(),\n    };\n\n    this.returns.set(returnId, returnData);\n\n    // Create return items and update inventory\n    const returnItemsWithProducts = [];\n    for (const item of items) {\n      const returnItemId = randomUUID();\n      const returnItem: ReturnItem = {\n        ...item,\n        id: returnItemId,\n        returnId,\n      };\n      \n      this.returnItems.set(returnItemId, returnItem);\n      \n      // Update inventory (increase quantity)\n      const inventoryItem = Array.from(this.inventory.values()).find(\n        inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n      );\n      \n      if (inventoryItem) {\n        inventoryItem.quantity += item.quantity;\n        this.inventory.set(inventoryItem.id, inventoryItem);\n      }\n\n      returnItemsWithProducts.push({\n        ...returnItem,\n        product: this.products.get(item.productId)!,\n      });\n    }\n\n    const originalSale = this.sales.get(insertReturn.originalSaleId)!;\n\n    return {\n      ...returnData,\n      items: returnItemsWithProducts,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  // Expenses\n  async getExpenses(): Promise<Expense[]> {\n    return Array.from(this.expenses.values());\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<Expense> {\n    const id = randomUUID();\n    const expense: Expense = {\n      ...insertExpense,\n      id,\n      date: insertExpense.date || new Date(),\n    };\n    this.expenses.set(id, expense);\n    return expense;\n  }\n\n  async getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]> {\n    const allExpenses = await this.getExpenses();\n    return allExpenses.filter(expense => {\n      const expenseDate = new Date(expense.date);\n      return expenseDate >= startDate && expenseDate <= endDate;\n    });\n  }\n\n  // Purchases\n  async getPurchases(): Promise<Purchase[]> {\n    return Array.from(this.purchases.values());\n  }\n\n  async createPurchase(insertPurchase: InsertPurchase): Promise<Purchase> {\n    const id = randomUUID();\n    const purchase: Purchase = {\n      ...insertPurchase,\n      id,\n      date: insertPurchase.date || new Date(),\n    };\n    this.purchases.set(id, purchase);\n    return purchase;\n  }\n\n  async getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]> {\n    const allPurchases = await this.getPurchases();\n    return allPurchases.filter(purchase => {\n      const purchaseDate = new Date(purchase.date);\n      return purchaseDate >= startDate && purchaseDate <= endDate;\n    });\n  }\n\n  // Analytics\n  async getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }> {\n    const products = await this.getProducts();\n    const totalProducts = products.length;\n    const outOfStockCount = products.filter(p => p.status === 'out-of-stock').length;\n\n    const today = new Date();\n    const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000);\n    \n    const todaySalesData = await this.getSalesByDateRange(todayStart, todayEnd);\n    const todaySales = todaySalesData.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n    \n    const onlineOrdersCount = todaySalesData.filter(sale => sale.channel === 'online').length;\n\n    return {\n      totalProducts,\n      todaySales,\n      outOfStockCount,\n      onlineOrdersCount,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15653},"attached_assets/storage_1756384459944.ts":{"content":"import { \n  type Product, \n  type InsertProduct, \n  type ProductInventory, \n  type InsertProductInventory,\n  type Sale,\n  type InsertSale,\n  type SaleItem,\n  type InsertSaleItem,\n  type Return,\n  type InsertReturn,\n  type ReturnItem,\n  type InsertReturnItem,\n  type Expense,\n  type InsertExpense,\n  type Purchase,\n  type InsertPurchase,\n  type ProductWithInventory,\n  type SaleWithItems,\n  type ReturnWithItems,\n  COLORS,\n  SIZES\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Products\n  getProducts(): Promise<ProductWithInventory[]>;\n  getProductById(id: string): Promise<ProductWithInventory | undefined>;\n  getProductByModelNumber(modelNumber: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  \n  // Product Inventory\n  getProductInventory(productId: string): Promise<ProductInventory[]>;\n  updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory>;\n  bulkUpdateInventory(inventoryItems: InsertProductInventory[]): Promise<ProductInventory[]>;\n  \n  // Sales\n  getSales(): Promise<SaleWithItems[]>;\n  getSaleById(id: string): Promise<SaleWithItems | undefined>;\n  createSale(sale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems>;\n  getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]>;\n  \n  // Returns\n  getReturns(): Promise<ReturnWithItems[]>;\n  getReturnById(id: string): Promise<ReturnWithItems | undefined>;\n  createReturn(returnData: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems>;\n  \n  // Expenses\n  getExpenses(): Promise<Expense[]>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]>;\n  \n  // Purchases\n  getPurchases(): Promise<Purchase[]>;\n  createPurchase(purchase: InsertPurchase): Promise<Purchase>;\n  getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]>;\n  \n  // Analytics\n  getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private products: Map<string, Product> = new Map();\n  private inventory: Map<string, ProductInventory> = new Map();\n  private sales: Map<string, Sale> = new Map();\n  private saleItems: Map<string, SaleItem> = new Map();\n  private returns: Map<string, Return> = new Map();\n  private returnItems: Map<string, ReturnItem> = new Map();\n  private expenses: Map<string, Expense> = new Map();\n  private purchases: Map<string, Purchase> = new Map();\n\n  constructor() {\n    // Initialize with some sample data for testing\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample products\n    const product1: Product = {\n      id: randomUUID(),\n      modelNumber: \"EVE-001\",\n      companyName: \"شركة الأزياء الراقية\",\n      productType: \"evening-wear\",\n      storePrice: \"890.00\",\n      onlinePrice: \"850.00\",\n      imageUrl: null,\n      specifications: \"فستان سهرة أنيق مصنوع من أجود الأقمشة\",\n      createdAt: new Date(),\n    };\n\n    const product2: Product = {\n      id: randomUUID(),\n      modelNumber: \"HIJ-025\",\n      companyName: \"شركة الحجاب الفاخر\",\n      productType: \"hijab\",\n      storePrice: \"150.00\",\n      onlinePrice: \"140.00\",\n      imageUrl: null,\n      specifications: \"حجاب حرير فاخر بجودة عالية\",\n      createdAt: new Date(),\n    };\n\n    this.products.set(product1.id, product1);\n    this.products.set(product2.id, product2);\n\n    // Sample inventory\n    COLORS.forEach((color) => {\n      SIZES.forEach((size) => {\n        const inventory1: ProductInventory = {\n          id: randomUUID(),\n          productId: product1.id,\n          color,\n          size,\n          quantity: Math.floor(Math.random() * 20) + 1,\n        };\n        const inventory2: ProductInventory = {\n          id: randomUUID(),\n          productId: product2.id,\n          color,\n          size,\n          quantity: Math.floor(Math.random() * 10) + 1,\n        };\n        this.inventory.set(inventory1.id, inventory1);\n        this.inventory.set(inventory2.id, inventory2);\n      });\n    });\n  }\n\n  // Products\n  async getProducts(): Promise<ProductWithInventory[]> {\n    const productsArray = Array.from(this.products.values());\n    const productsWithInventory = await Promise.all(\n      productsArray.map(async (product) => {\n        const inventory = await this.getProductInventory(product.id);\n        const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n        let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n        \n        if (totalQuantity === 0) {\n          status = 'out-of-stock';\n        } else if (totalQuantity < 10) {\n          status = 'low-stock';\n        }\n\n        return {\n          ...product,\n          inventory,\n          totalQuantity,\n          status,\n        } as ProductWithInventory;\n      })\n    );\n    \n    return productsWithInventory;\n  }\n\n  async getProductById(id: string): Promise<ProductWithInventory | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n\n    const inventory = await this.getProductInventory(id);\n    const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n    let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n    \n    if (totalQuantity === 0) {\n      status = 'out-of-stock';\n    } else if (totalQuantity < 10) {\n      status = 'low-stock';\n    }\n\n    return {\n      ...product,\n      inventory,\n      totalQuantity,\n      status,\n    } as ProductWithInventory;\n  }\n\n  async getProductByModelNumber(modelNumber: string): Promise<Product | undefined> {\n    return Array.from(this.products.values()).find(p => p.modelNumber === modelNumber);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = {\n      ...insertProduct,\n      id,\n      imageUrl: insertProduct.imageUrl || null,\n      specifications: insertProduct.specifications || null,\n      createdAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, updateData: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existingProduct = this.products.get(id);\n    if (!existingProduct) return undefined;\n\n    const updatedProduct = { ...existingProduct, ...updateData };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  // Product Inventory\n  async getProductInventory(productId: string): Promise<ProductInventory[]> {\n    return Array.from(this.inventory.values()).filter(item => item.productId === productId);\n  }\n\n  async updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory> {\n    const existingItem = Array.from(this.inventory.values()).find(\n      item => item.productId === productId && item.color === color && item.size === size\n    );\n\n    if (existingItem) {\n      existingItem.quantity = quantity;\n      this.inventory.set(existingItem.id, existingItem);\n      return existingItem;\n    } else {\n      const id = randomUUID();\n      const newItem: ProductInventory = {\n        id,\n        productId,\n        color,\n        size,\n        quantity,\n      };\n      this.inventory.set(id, newItem);\n      return newItem;\n    }\n  }\n\n  async bulkUpdateInventory(inventoryItems: InsertProductInventory[]): Promise<ProductInventory[]> {\n    const results: ProductInventory[] = [];\n    \n    for (const item of inventoryItems) {\n      const result = await this.updateInventory(item.productId, item.color, item.size, item.quantity || 0);\n      results.push(result);\n    }\n    \n    return results;\n  }\n\n  // Sales\n  async getSales(): Promise<SaleWithItems[]> {\n    const salesArray = Array.from(this.sales.values());\n    return Promise.all(\n      salesArray.map(async (sale) => {\n        const items = Array.from(this.saleItems.values())\n          .filter(item => item.saleId === sale.id)\n          .map(item => ({\n            ...item,\n            product: this.products.get(item.productId)!,\n          }));\n        \n        return {\n          ...sale,\n          items,\n        } as SaleWithItems;\n      })\n    );\n  }\n\n  async getSaleById(id: string): Promise<SaleWithItems | undefined> {\n    const sale = this.sales.get(id);\n    if (!sale) return undefined;\n\n    const items = Array.from(this.saleItems.values())\n      .filter(item => item.saleId === id)\n      .map(item => ({\n        ...item,\n        product: this.products.get(item.productId)!,\n      }));\n\n    return {\n      ...sale,\n      items,\n    } as SaleWithItems;\n  }\n\n  async createSale(insertSale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems> {\n    const saleId = randomUUID();\n    const invoiceNumber = `INV-${Date.now()}`;\n    \n    const sale: Sale = {\n      ...insertSale,\n      id: saleId,\n      invoiceNumber,\n      fees: insertSale.fees || \"0\",\n      createdAt: new Date(),\n    };\n\n    this.sales.set(saleId, sale);\n\n    // Create sale items and update inventory\n    const saleItemsWithProducts = [];\n    for (const item of items) {\n      const saleItemId = randomUUID();\n      const saleItem: SaleItem = {\n        ...item,\n        id: saleItemId,\n        saleId,\n      };\n      \n      this.saleItems.set(saleItemId, saleItem);\n      \n      // Update inventory (decrease quantity)\n      const inventoryItem = Array.from(this.inventory.values()).find(\n        inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n      );\n      \n      if (inventoryItem && inventoryItem.quantity >= item.quantity) {\n        inventoryItem.quantity -= item.quantity;\n        this.inventory.set(inventoryItem.id, inventoryItem);\n      }\n\n      saleItemsWithProducts.push({\n        ...saleItem,\n        product: this.products.get(item.productId)!,\n      });\n    }\n\n    return {\n      ...sale,\n      items: saleItemsWithProducts,\n    } as SaleWithItems;\n  }\n\n  async getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]> {\n    const allSales = await this.getSales();\n    return allSales.filter(sale => {\n      const saleDate = new Date(sale.createdAt);\n      return saleDate >= startDate && saleDate <= endDate;\n    });\n  }\n\n  // Returns\n  async getReturns(): Promise<ReturnWithItems[]> {\n    const returnsArray = Array.from(this.returns.values());\n    return Promise.all(\n      returnsArray.map(async (returnData) => {\n        const items = Array.from(this.returnItems.values())\n          .filter(item => item.returnId === returnData.id)\n          .map(item => ({\n            ...item,\n            product: this.products.get(item.productId)!,\n          }));\n        \n        const originalSale = this.sales.get(returnData.originalSaleId)!;\n        \n        return {\n          ...returnData,\n          items,\n          originalSale,\n        } as ReturnWithItems;\n      })\n    );\n  }\n\n  async getReturnById(id: string): Promise<ReturnWithItems | undefined> {\n    const returnData = this.returns.get(id);\n    if (!returnData) return undefined;\n\n    const items = Array.from(this.returnItems.values())\n      .filter(item => item.returnId === id)\n      .map(item => ({\n        ...item,\n        product: this.products.get(item.productId)!,\n      }));\n\n    const originalSale = this.sales.get(returnData.originalSaleId)!;\n\n    return {\n      ...returnData,\n      items,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  async createReturn(insertReturn: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems> {\n    const returnId = randomUUID();\n    \n    const returnData: Return = {\n      ...insertReturn,\n      id: returnId,\n      refundAmount: insertReturn.refundAmount || \"0\",\n      createdAt: new Date(),\n    };\n\n    this.returns.set(returnId, returnData);\n\n    // Create return items and update inventory\n    const returnItemsWithProducts = [];\n    for (const item of items) {\n      const returnItemId = randomUUID();\n      const returnItem: ReturnItem = {\n        ...item,\n        id: returnItemId,\n        returnId,\n      };\n      \n      this.returnItems.set(returnItemId, returnItem);\n      \n      // Update inventory (increase quantity)\n      const inventoryItem = Array.from(this.inventory.values()).find(\n        inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n      );\n      \n      if (inventoryItem) {\n        inventoryItem.quantity += item.quantity;\n        this.inventory.set(inventoryItem.id, inventoryItem);\n      }\n\n      returnItemsWithProducts.push({\n        ...returnItem,\n        product: this.products.get(item.productId)!,\n      });\n    }\n\n    const originalSale = this.sales.get(insertReturn.originalSaleId)!;\n\n    return {\n      ...returnData,\n      items: returnItemsWithProducts,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  // Expenses\n  async getExpenses(): Promise<Expense[]> {\n    return Array.from(this.expenses.values());\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<Expense> {\n    const id = randomUUID();\n    const expense: Expense = {\n      ...insertExpense,\n      id,\n      date: insertExpense.date || new Date(),\n    };\n    this.expenses.set(id, expense);\n    return expense;\n  }\n\n  async getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]> {\n    const allExpenses = await this.getExpenses();\n    return allExpenses.filter(expense => {\n      const expenseDate = new Date(expense.date);\n      return expenseDate >= startDate && expenseDate <= endDate;\n    });\n  }\n\n  // Purchases\n  async getPurchases(): Promise<Purchase[]> {\n    return Array.from(this.purchases.values());\n  }\n\n  async createPurchase(insertPurchase: InsertPurchase): Promise<Purchase> {\n    const id = randomUUID();\n    const purchase: Purchase = {\n      ...insertPurchase,\n      id,\n      date: insertPurchase.date || new Date(),\n    };\n    this.purchases.set(id, purchase);\n    return purchase;\n  }\n\n  async getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]> {\n    const allPurchases = await this.getPurchases();\n    return allPurchases.filter(purchase => {\n      const purchaseDate = new Date(purchase.date);\n      return purchaseDate >= startDate && purchaseDate <= endDate;\n    });\n  }\n\n  // Analytics\n  async getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }> {\n    const products = await this.getProducts();\n    const totalProducts = products.length;\n    const outOfStockCount = products.filter(p => p.status === 'out-of-stock').length;\n\n    const today = new Date();\n    const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000);\n    \n    const todaySalesData = await this.getSalesByDateRange(todayStart, todayEnd);\n    const todaySales = todaySalesData.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n    \n    const onlineOrdersCount = todaySalesData.filter(sale => sale.channel === 'online').length;\n\n    return {\n      totalProducts,\n      todaySales,\n      outOfStockCount,\n      onlineOrdersCount,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15653},"attached_assets/tailwind.config_1756384141180.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"attached_assets/vite.config_1756384141181.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/vite_1756384408396.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"attached_assets/vite_1756384459944.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport helmet from \"helmet\";\nimport cors from \"cors\";\nimport compression from \"compression\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Production middleware with proper CSP configuration for development\napp.use(helmet({\n  contentSecurityPolicy: process.env.NODE_ENV === 'production'\n}));\napp.use(cors());\napp.use(compression());\napp.use(express.json({ limit: \"1mb\" }));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Platform compatibility - use PORT env var for production deployment\n  const port = Number(process.env.PORT) || 3000;\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2153},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\n// import { storage } from \"./storage\";\nimport { storage } from \"./storage.realtime\";\nimport { \n  insertProductSchema, \n  insertSaleSchema, \n  insertSaleItemSchema,\n  insertReturnSchema,\n  insertReturnItemSchema,\n  insertExpenseSchema,\n  insertPurchaseSchema,\n  insertProductInventorySchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body.product);\n      const inventoryData = req.body.inventory?.map((item: any) => \n        insertProductInventorySchema.parse(item)\n      ) || [];\n\n      // Check if model number already exists\n      const existingProduct = await storage.getProductByModelNumber(productData.modelNumber);\n      if (existingProduct) {\n        return res.status(400).json({ message: \"Product with this model number already exists\" });\n      }\n\n      const product = await storage.createProduct(productData);\n      \n      // Create inventory entries\n      if (inventoryData.length > 0) {\n        const inventoryWithProductId = inventoryData.map((item: any) => ({\n          ...item,\n          productId: product.id\n        }));\n        await storage.bulkUpdateInventory(inventoryWithProductId);\n      }\n\n      const productWithInventory = await storage.getProductById(product.id);\n      res.status(201).json(productWithInventory);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        res.status(400).json({ message: \"Invalid product data\", errors: error });\n      } else {\n        res.status(500).json({ message: \"Failed to create product\" });\n      }\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      // Handle both product data and inventory data\n      if (req.body.product && req.body.inventory) {\n        // Full update with inventory\n        const productData = insertProductSchema.parse(req.body.product);\n        const inventoryData = req.body.inventory?.map((item: any) => \n          insertProductInventorySchema.parse(item)\n        ) || [];\n\n        const product = await storage.updateProduct(req.params.id, productData);\n        if (!product) {\n          return res.status(404).json({ message: \"Product not found\" });\n        }\n\n        // Update inventory - delete all existing and add new ones\n        await storage.deleteProductInventory(req.params.id);\n        if (inventoryData.length > 0) {\n          const inventoryWithProductId = inventoryData.map((item: any) => ({\n            ...item,\n            productId: req.params.id\n          }));\n          await storage.bulkUpdateInventory(inventoryWithProductId);\n        }\n\n        const productWithInventory = await storage.getProductById(req.params.id);\n        res.json(productWithInventory);\n      } else {\n        // Simple product data update only\n        const requestBody = { ...req.body };\n        if (typeof requestBody.storePrice === 'number') {\n          requestBody.storePrice = requestBody.storePrice.toString();\n        }\n        if (typeof requestBody.onlinePrice === 'number') {\n          requestBody.onlinePrice = requestBody.onlinePrice.toString();\n        }\n        \n        const productData = insertProductSchema.partial().parse(requestBody);\n        const product = await storage.updateProduct(req.params.id, productData);\n        if (!product) {\n          return res.status(404).json({ message: \"Product not found\" });\n        }\n        res.json(product);\n      }\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteProduct(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const inventory = await storage.getProductInventory(req.params.id);\n      res.json(inventory);\n    } catch (error) {\n      console.error(\"Error fetching inventory:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.put(\"/api/inventory\", async (req, res) => {\n    try {\n      const inventoryData = req.body.map((item: any) => \n        insertProductInventorySchema.parse(item)\n      );\n      const inventory = await storage.bulkUpdateInventory(inventoryData);\n      res.json(inventory);\n    } catch (error) {\n      console.error(\"Error updating inventory:\", error);\n      res.status(500).json({ message: \"Failed to update inventory\" });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/sales\", async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json(sales);\n    } catch (error) {\n      console.error(\"Error fetching sales:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/:id\", async (req, res) => {\n    try {\n      const sale = await storage.getSaleById(req.params.id);\n      if (!sale) {\n        return res.status(404).json({ message: \"Sale not found\" });\n      }\n      res.json(sale);\n    } catch (error) {\n      console.error(\"Error fetching sale:\", error);\n      res.status(500).json({ message: \"Failed to fetch sale\" });\n    }\n  });\n\n  app.post(\"/api/sales\", async (req, res) => {\n    try {\n      const saleData = insertSaleSchema.parse(req.body.sale);\n      const itemsData = req.body.items.map((item: any) => \n        insertSaleItemSchema.parse(item)\n      );\n\n      // Validate inventory availability\n      for (const item of itemsData) {\n        const inventory = await storage.getProductInventory(item.productId);\n        const availableItem = inventory.find(\n          inv => inv.color === item.color && inv.size === item.size\n        );\n        \n        if (!availableItem || availableItem.quantity < item.quantity) {\n          return res.status(400).json({ \n            message: `Insufficient inventory for ${item.color} ${item.size}. Available: ${availableItem?.quantity || 0}, Requested: ${item.quantity}` \n          });\n        }\n      }\n\n      const sale = await storage.createSale(saleData, itemsData);\n      res.status(201).json(sale);\n    } catch (error) {\n      console.error(\"Error creating sale:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        res.status(400).json({ message: \"Invalid sale data\", errors: error });\n      } else {\n        res.status(500).json({ message: \"Failed to create sale\" });\n      }\n    }\n  });\n\n  // Returns routes\n  app.get(\"/api/returns\", async (req, res) => {\n    try {\n      const returns = await storage.getReturns();\n      res.json(returns);\n    } catch (error) {\n      console.error(\"Error fetching returns:\", error);\n      res.status(500).json({ message: \"Failed to fetch returns\" });\n    }\n  });\n\n  app.post(\"/api/returns\", async (req, res) => {\n    try {\n      const returnData = insertReturnSchema.parse(req.body.return);\n      const itemsData = req.body.items.map((item: any) => \n        insertReturnItemSchema.parse(item)\n      );\n\n      const returnRecord = await storage.createReturn(returnData, itemsData);\n      res.status(201).json(returnRecord);\n    } catch (error) {\n      console.error(\"Error creating return:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        res.status(400).json({ message: \"Invalid return data\", errors: error });\n      } else {\n        res.status(500).json({ message: \"Failed to create return\" });\n      }\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenses = await storage.getExpenses();\n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error fetching expenses:\", error);\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      // تحويل المبلغ إلى string إذا كان number\n      const requestBody = { ...req.body };\n      if (typeof requestBody.amount === 'number') {\n        requestBody.amount = requestBody.amount.toString();\n      }\n      \n      const expenseData = insertExpenseSchema.parse(requestBody);\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  // Purchases routes\n  app.get(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchases = await storage.getPurchases();\n      res.json(purchases);\n    } catch (error) {\n      console.error(\"Error fetching purchases:\", error);\n      res.status(500).json({ message: \"Failed to fetch purchases\" });\n    }\n  });\n\n  app.post(\"/api/purchases\", async (req, res) => {\n    try {\n      // تحويل المبلغ إلى string إذا كان number\n      const requestBody = { ...req.body };\n      if (typeof requestBody.amount === 'number') {\n        requestBody.amount = requestBody.amount.toString();\n      }\n      \n      const purchaseData = insertPurchaseSchema.parse(requestBody);\n      const purchase = await storage.createPurchase(purchaseData);\n      res.status(201).json(purchase);\n    } catch (error) {\n      console.error(\"Error creating purchase:\", error);\n      res.status(500).json({ message: \"Failed to create purchase\" });\n    }\n  });\n\n  // Dashboard analytics\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11023},"server/storage.ts":{"content":"import { \n  type Product, \n  type InsertProduct, \n  type ProductInventory, \n  type InsertProductInventory,\n  type Sale,\n  type InsertSale,\n  type SaleItem,\n  type InsertSaleItem,\n  type Return,\n  type InsertReturn,\n  type ReturnItem,\n  type InsertReturnItem,\n  type Expense,\n  type InsertExpense,\n  type Purchase,\n  type InsertPurchase,\n  type ProductWithInventory,\n  type SaleWithItems,\n  type ReturnWithItems,\n  COLORS,\n  SIZES\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Products\n  getProducts(): Promise<ProductWithInventory[]>;\n  getProductById(id: string): Promise<ProductWithInventory | undefined>;\n  getProductByModelNumber(modelNumber: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  \n  // Product Inventory\n  getProductInventory(productId: string): Promise<ProductInventory[]>;\n  updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory>;\n  bulkUpdateInventory(inventoryItems: (InsertProductInventory & { productId: string })[]): Promise<ProductInventory[]>;\n  deleteProductInventory(productId: string): Promise<boolean>;\n  \n  // Sales\n  getSales(): Promise<SaleWithItems[]>;\n  getSaleById(id: string): Promise<SaleWithItems | undefined>;\n  createSale(sale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems>;\n  getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]>;\n  \n  // Returns\n  getReturns(): Promise<ReturnWithItems[]>;\n  getReturnById(id: string): Promise<ReturnWithItems | undefined>;\n  createReturn(returnData: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems>;\n  \n  // Expenses\n  getExpenses(): Promise<Expense[]>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]>;\n  \n  // Purchases\n  getPurchases(): Promise<Purchase[]>;\n  createPurchase(purchase: InsertPurchase): Promise<Purchase>;\n  getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]>;\n  \n  // Analytics\n  getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private products: Map<string, Product> = new Map();\n  private inventory: Map<string, ProductInventory> = new Map();\n  private sales: Map<string, Sale> = new Map();\n  private saleItems: Map<string, SaleItem> = new Map();\n  private returns: Map<string, Return> = new Map();\n  private returnItems: Map<string, ReturnItem> = new Map();\n  private expenses: Map<string, Expense> = new Map();\n  private purchases: Map<string, Purchase> = new Map();\n\n  constructor() {\n    // Initialize with some sample data for testing\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample products\n    const product1: Product = {\n      id: randomUUID(),\n      modelNumber: \"EVE-001\",\n      companyName: \"شركة الأزياء الراقية\",\n      productType: \"evening-wear\",\n      storePrice: \"890.00\",\n      onlinePrice: \"850.00\",\n      imageUrl: null,\n      specifications: \"فستان سهرة أنيق مصنوع من أجود الأقمشة\",\n      createdAt: new Date(),\n    };\n\n    const product2: Product = {\n      id: randomUUID(),\n      modelNumber: \"HIJ-025\",\n      companyName: \"شركة الحجاب الفاخر\",\n      productType: \"hijab\",\n      storePrice: \"150.00\",\n      onlinePrice: \"140.00\",\n      imageUrl: null,\n      specifications: \"حجاب حرير فاخر بجودة عالية\",\n      createdAt: new Date(),\n    };\n\n    this.products.set(product1.id, product1);\n    this.products.set(product2.id, product2);\n\n    // Sample inventory\n    COLORS.forEach((color) => {\n      SIZES.forEach((size) => {\n        const inventory1: ProductInventory = {\n          id: randomUUID(),\n          productId: product1.id,\n          color,\n          size,\n          quantity: Math.floor(Math.random() * 20) + 1,\n        };\n        const inventory2: ProductInventory = {\n          id: randomUUID(),\n          productId: product2.id,\n          color,\n          size,\n          quantity: Math.floor(Math.random() * 10) + 1,\n        };\n        this.inventory.set(inventory1.id, inventory1);\n        this.inventory.set(inventory2.id, inventory2);\n      });\n    });\n  }\n\n  // Products\n  async getProducts(): Promise<ProductWithInventory[]> {\n    const productsArray = Array.from(this.products.values());\n    const productsWithInventory = await Promise.all(\n      productsArray.map(async (product) => {\n        const inventory = await this.getProductInventory(product.id);\n        const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n        let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n        \n        if (totalQuantity === 0) {\n          status = 'out-of-stock';\n        } else if (totalQuantity < 10) {\n          status = 'low-stock';\n        }\n\n        return {\n          ...product,\n          inventory,\n          totalQuantity,\n          status,\n        } as ProductWithInventory;\n      })\n    );\n    \n    return productsWithInventory;\n  }\n\n  async getProductById(id: string): Promise<ProductWithInventory | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n\n    const inventory = await this.getProductInventory(id);\n    const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n    let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n    \n    if (totalQuantity === 0) {\n      status = 'out-of-stock';\n    } else if (totalQuantity < 10) {\n      status = 'low-stock';\n    }\n\n    return {\n      ...product,\n      inventory,\n      totalQuantity,\n      status,\n    } as ProductWithInventory;\n  }\n\n  async getProductByModelNumber(modelNumber: string): Promise<Product | undefined> {\n    return Array.from(this.products.values()).find(p => p.modelNumber === modelNumber);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = {\n      ...insertProduct,\n      id,\n      imageUrl: insertProduct.imageUrl || null,\n      specifications: insertProduct.specifications || null,\n      createdAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, updateData: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existingProduct = this.products.get(id);\n    if (!existingProduct) return undefined;\n\n    const updatedProduct = { ...existingProduct, ...updateData };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  // Product Inventory\n  async getProductInventory(productId: string): Promise<ProductInventory[]> {\n    return Array.from(this.inventory.values()).filter(item => item.productId === productId);\n  }\n\n  async updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory> {\n    const existingItem = Array.from(this.inventory.values()).find(\n      item => item.productId === productId && item.color === color && item.size === size\n    );\n\n    if (existingItem) {\n      existingItem.quantity = quantity;\n      this.inventory.set(existingItem.id, existingItem);\n      return existingItem;\n    } else {\n      const id = randomUUID();\n      const newItem: ProductInventory = {\n        id,\n        productId,\n        color,\n        size,\n        quantity,\n      };\n      this.inventory.set(id, newItem);\n      return newItem;\n    }\n  }\n\n  async bulkUpdateInventory(inventoryItems: (InsertProductInventory & { productId: string })[]): Promise<ProductInventory[]> {\n    const results: ProductInventory[] = [];\n    \n    for (const item of inventoryItems) {\n      const result = await this.updateInventory(item.productId, item.color, item.size, item.quantity || 0);\n      results.push(result);\n    }\n    \n    return results;\n  }\n\n  async deleteProductInventory(productId: string): Promise<boolean> {\n    const inventoryItems = Array.from(this.inventory.entries()).filter(\n      ([, item]) => item.productId === productId\n    );\n    \n    for (const [id] of inventoryItems) {\n      this.inventory.delete(id);\n    }\n    \n    return true;\n  }\n\n  // Sales\n  async getSales(): Promise<SaleWithItems[]> {\n    const salesArray = Array.from(this.sales.values());\n    return Promise.all(\n      salesArray.map(async (sale) => {\n        const items = Array.from(this.saleItems.values())\n          .filter(item => item.saleId === sale.id)\n          .map(item => ({\n            ...item,\n            product: this.products.get(item.productId)!,\n          }));\n        \n        return {\n          ...sale,\n          items,\n        } as SaleWithItems;\n      })\n    );\n  }\n\n  async getSaleById(id: string): Promise<SaleWithItems | undefined> {\n    const sale = this.sales.get(id);\n    if (!sale) return undefined;\n\n    const items = Array.from(this.saleItems.values())\n      .filter(item => item.saleId === id)\n      .map(item => ({\n        ...item,\n        product: this.products.get(item.productId)!,\n      }));\n\n    return {\n      ...sale,\n      items,\n    } as SaleWithItems;\n  }\n\n  async createSale(insertSale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems> {\n    const saleId = randomUUID();\n    const invoiceNumber = `INV-${Date.now()}`;\n    \n    const sale: Sale = {\n      ...insertSale,\n      id: saleId,\n      invoiceNumber,\n      trackingNumber: insertSale.trackingNumber || null,\n      fees: insertSale.fees || \"0\",\n      createdAt: new Date(),\n    };\n\n    this.sales.set(saleId, sale);\n\n    // Create sale items and update inventory\n    const saleItemsWithProducts = [];\n    for (const item of items) {\n      const saleItemId = randomUUID();\n      const saleItem: SaleItem = {\n        ...item,\n        id: saleItemId,\n        saleId,\n      };\n      \n      this.saleItems.set(saleItemId, saleItem);\n      \n      // Update inventory (decrease quantity)\n      const inventoryItem = Array.from(this.inventory.values()).find(\n        inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n      );\n      \n      if (inventoryItem && inventoryItem.quantity >= item.quantity) {\n        inventoryItem.quantity -= item.quantity;\n        this.inventory.set(inventoryItem.id, inventoryItem);\n      }\n\n      saleItemsWithProducts.push({\n        ...saleItem,\n        product: this.products.get(item.productId)!,\n      });\n    }\n\n    return {\n      ...sale,\n      items: saleItemsWithProducts,\n    } as SaleWithItems;\n  }\n\n  async getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]> {\n    const allSales = await this.getSales();\n    return allSales.filter(sale => {\n      const saleDate = new Date(sale.createdAt);\n      return saleDate >= startDate && saleDate <= endDate;\n    });\n  }\n\n  // Returns\n  async getReturns(): Promise<ReturnWithItems[]> {\n    const returnsArray = Array.from(this.returns.values());\n    return Promise.all(\n      returnsArray.map(async (returnData) => {\n        const items = Array.from(this.returnItems.values())\n          .filter(item => item.returnId === returnData.id)\n          .map(item => ({\n            ...item,\n            product: this.products.get(item.productId)!,\n          }));\n        \n        const originalSale = this.sales.get(returnData.originalSaleId)!;\n        \n        return {\n          ...returnData,\n          items,\n          originalSale,\n        } as ReturnWithItems;\n      })\n    );\n  }\n\n  async getReturnById(id: string): Promise<ReturnWithItems | undefined> {\n    const returnData = this.returns.get(id);\n    if (!returnData) return undefined;\n\n    const items = Array.from(this.returnItems.values())\n      .filter(item => item.returnId === id)\n      .map(item => ({\n        ...item,\n        product: this.products.get(item.productId)!,\n      }));\n\n    const originalSale = this.sales.get(returnData.originalSaleId)!;\n\n    return {\n      ...returnData,\n      items,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  async createReturn(insertReturn: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems> {\n    const returnId = randomUUID();\n    \n    const returnData: Return = {\n      ...insertReturn,\n      id: returnId,\n      exchangeType: insertReturn.exchangeType || null,\n      newProductId: insertReturn.newProductId || null,\n      newColor: insertReturn.newColor || null,\n      newSize: insertReturn.newSize || null,\n      refundAmount: insertReturn.refundAmount || \"0\",\n      createdAt: new Date(),\n    };\n\n    this.returns.set(returnId, returnData);\n\n    // Create return items and handle inventory based on return type\n    const returnItemsWithProducts = [];\n    for (const item of items) {\n      const returnItemId = randomUUID();\n      const returnItem: ReturnItem = {\n        ...item,\n        id: returnItemId,\n        returnId,\n      };\n      \n      this.returnItems.set(returnItemId, returnItem);\n      \n      if (returnData.returnType === 'refund') {\n        // For refunds: simply return items to original inventory\n        const inventoryItem = Array.from(this.inventory.values()).find(\n          inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n        );\n        \n        if (inventoryItem) {\n          inventoryItem.quantity += item.quantity;\n          this.inventory.set(inventoryItem.id, inventoryItem);\n        }\n      } else if (returnData.returnType === 'exchange') {\n        // Handle different types of exchanges\n        if (returnData.exchangeType === 'product-to-product') {\n          // Exchange with different product: return original item and deduct from new product\n          const originalInventory = Array.from(this.inventory.values()).find(\n            inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n          );\n          if (originalInventory) {\n            originalInventory.quantity += item.quantity;\n            this.inventory.set(originalInventory.id, originalInventory);\n          }\n          \n          // Deduct from new product using the specified new color and size\n          if (returnData.newProductId && returnData.newColor && returnData.newSize) {\n            const newInventory = Array.from(this.inventory.values()).find(\n              inv => inv.productId === returnData.newProductId && inv.color === returnData.newColor && inv.size === returnData.newSize\n            );\n            if (newInventory && newInventory.quantity >= item.quantity) {\n              newInventory.quantity -= item.quantity;\n              this.inventory.set(newInventory.id, newInventory);\n            }\n          }\n        } else if (returnData.exchangeType === 'color-change') {\n          // Color change: return old color and deduct from new color\n          const originalInventory = Array.from(this.inventory.values()).find(\n            inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n          );\n          if (originalInventory) {\n            originalInventory.quantity += item.quantity;\n            this.inventory.set(originalInventory.id, originalInventory);\n          }\n          \n          // Deduct from new color\n          if (returnData.newColor) {\n            const newColorInventory = Array.from(this.inventory.values()).find(\n              inv => inv.productId === item.productId && inv.color === returnData.newColor && inv.size === item.size\n            );\n            if (newColorInventory && newColorInventory.quantity >= item.quantity) {\n              newColorInventory.quantity -= item.quantity;\n              this.inventory.set(newColorInventory.id, newColorInventory);\n            }\n          }\n        } else if (returnData.exchangeType === 'size-change') {\n          // Size change: return old size and deduct from new size\n          const originalInventory = Array.from(this.inventory.values()).find(\n            inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n          );\n          if (originalInventory) {\n            originalInventory.quantity += item.quantity;\n            this.inventory.set(originalInventory.id, originalInventory);\n          }\n          \n          // Deduct from new size\n          if (returnData.newSize) {\n            const newSizeInventory = Array.from(this.inventory.values()).find(\n              inv => inv.productId === item.productId && inv.color === item.color && inv.size === returnData.newSize\n            );\n            if (newSizeInventory && newSizeInventory.quantity >= item.quantity) {\n              newSizeInventory.quantity -= item.quantity;\n              this.inventory.set(newSizeInventory.id, newSizeInventory);\n            }\n          }\n        }\n      }\n\n      returnItemsWithProducts.push({\n        ...returnItem,\n        product: this.products.get(item.productId)!,\n      });\n    }\n\n    const originalSale = this.sales.get(insertReturn.originalSaleId)!;\n\n    return {\n      ...returnData,\n      items: returnItemsWithProducts,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  // Expenses\n  async getExpenses(): Promise<Expense[]> {\n    return Array.from(this.expenses.values());\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<Expense> {\n    const id = randomUUID();\n    const expense: Expense = {\n      ...insertExpense,\n      id,\n      date: insertExpense.date || new Date(),\n    };\n    this.expenses.set(id, expense);\n    return expense;\n  }\n\n  async getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]> {\n    const allExpenses = await this.getExpenses();\n    return allExpenses.filter(expense => {\n      const expenseDate = new Date(expense.date);\n      return expenseDate >= startDate && expenseDate <= endDate;\n    });\n  }\n\n  // Purchases\n  async getPurchases(): Promise<Purchase[]> {\n    return Array.from(this.purchases.values());\n  }\n\n  async createPurchase(insertPurchase: InsertPurchase): Promise<Purchase> {\n    const id = randomUUID();\n    const purchase: Purchase = {\n      ...insertPurchase,\n      id,\n      date: insertPurchase.date || new Date(),\n    };\n    this.purchases.set(id, purchase);\n    return purchase;\n  }\n\n  async getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]> {\n    const allPurchases = await this.getPurchases();\n    return allPurchases.filter(purchase => {\n      const purchaseDate = new Date(purchase.date);\n      return purchaseDate >= startDate && purchaseDate <= endDate;\n    });\n  }\n\n  // Analytics\n  async getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }> {\n    const products = await this.getProducts();\n    const totalProducts = products.length;\n    const outOfStockCount = products.filter(p => p.status === 'out-of-stock').length;\n\n    const today = new Date();\n    const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000);\n    \n    const todaySalesData = await this.getSalesByDateRange(todayStart, todayEnd);\n    const todaySales = todaySalesData.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n    \n    const onlineOrdersCount = todaySalesData.filter(sale => sale.channel === 'online').length;\n\n    return {\n      totalProducts,\n      todaySales,\n      outOfStockCount,\n      onlineOrdersCount,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":19798},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  modelNumber: text(\"model_number\").notNull().unique(),\n  companyName: text(\"company_name\").notNull(),\n  productType: text(\"product_type\").notNull(),\n  storePrice: decimal(\"store_price\", { precision: 10, scale: 2 }).notNull(),\n  onlinePrice: decimal(\"online_price\", { precision: 10, scale: 2 }).notNull(),\n  imageUrl: text(\"image_url\"),\n  specifications: text(\"specifications\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Product inventory table\nexport const productInventory = pgTable(\"product_inventory\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  color: text(\"color\").notNull(),\n  size: text(\"size\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(0),\n});\n\n// Sales table\nexport const sales = pgTable(\"sales\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: text(\"invoice_number\").notNull().unique(),\n  channel: text(\"channel\").notNull(), // 'in-store' or 'online'\n  paymentMethod: text(\"payment_method\").notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  customerPhone: text(\"customer_phone\").notNull(),\n  trackingNumber: text(\"tracking_number\"), // For online sales only\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  fees: decimal(\"fees\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Sale items table\nexport const saleItems = pgTable(\"sale_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  saleId: varchar(\"sale_id\").notNull().references(() => sales.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  color: text(\"color\").notNull(),\n  size: text(\"size\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Returns table\nexport const returns = pgTable(\"returns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  originalSaleId: varchar(\"original_sale_id\").notNull().references(() => sales.id),\n  returnType: text(\"return_type\").notNull(), // 'refund' or 'exchange'\n  exchangeType: text(\"exchange_type\"), // 'item-to-item' or 'size-to-size' for exchanges\n  newProductId: varchar(\"new_product_id\").references(() => products.id), // For item-to-item exchanges\n  newColor: text(\"new_color\"), // For exchanges\n  newSize: text(\"new_size\"), // For exchanges\n  refundAmount: decimal(\"refund_amount\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Return items table\nexport const returnItems = pgTable(\"return_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  returnId: varchar(\"return_id\").notNull().references(() => returns.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  color: text(\"color\").notNull(),\n  size: text(\"size\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n});\n\n// Expenses table\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  date: timestamp(\"date\").defaultNow().notNull(),\n});\n\n// Purchases table\nexport const purchases = pgTable(\"purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  supplier: text(\"supplier\").notNull(),\n  date: timestamp(\"date\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductInventorySchema = createInsertSchema(productInventory).omit({\n  id: true,\n  productId: true, // This will be added on the server side\n});\n\nexport const insertSaleSchema = createInsertSchema(sales).omit({\n  id: true,\n  invoiceNumber: true,\n  createdAt: true,\n});\n\nexport const insertSaleItemSchema = createInsertSchema(saleItems).omit({\n  id: true,\n  saleId: true,\n});\n\nexport const insertReturnSchema = createInsertSchema(returns).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReturnItemSchema = createInsertSchema(returnItems).omit({\n  id: true,\n  returnId: true,\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n});\n\nexport const insertPurchaseSchema = createInsertSchema(purchases).omit({\n  id: true,\n});\n\n// Types\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type ProductInventory = typeof productInventory.$inferSelect;\nexport type InsertProductInventory = z.infer<typeof insertProductInventorySchema>;\nexport type Sale = typeof sales.$inferSelect;\nexport type InsertSale = z.infer<typeof insertSaleSchema>;\nexport type SaleItem = typeof saleItems.$inferSelect;\nexport type InsertSaleItem = z.infer<typeof insertSaleItemSchema>;\nexport type Return = typeof returns.$inferSelect;\nexport type InsertReturn = z.infer<typeof insertReturnSchema>;\nexport type ReturnItem = typeof returnItems.$inferSelect;\nexport type InsertReturnItem = z.infer<typeof insertReturnItemSchema>;\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type Purchase = typeof purchases.$inferSelect;\nexport type InsertPurchase = z.infer<typeof insertPurchaseSchema>;\n\n// Extended types\nexport interface ProductWithInventory extends Product {\n  inventory: ProductInventory[];\n  totalQuantity: number;\n  status: 'in-stock' | 'low-stock' | 'out-of-stock';\n}\n\nexport interface SaleWithItems extends Sale {\n  items: (SaleItem & { product: Product })[];\n}\n\nexport interface ReturnWithItems extends Return {\n  items: (ReturnItem & { product: Product })[];\n  originalSale: Sale;\n}\n\n// Constants\nexport const COLORS = [\n  \"أسود\", \"أبيض\", \"أحمر\", \"أزرق\", \"أخضر\", \"وردي\"\n] as const;\n\nexport const SIZES = [\n  \"36\", \"38\", \"40\", \"42\", \"44\", \"46\", \"48\", \"50\"\n] as const;\n\nexport const PRODUCT_TYPES = [\n  \"dress\", \"evening-wear\", \"hijab\", \"abaya\", \"accessories\"\n] as const;\n\nexport const SALES_CHANNELS = [\n  \"in-store\", \"online\"\n] as const;\n\nexport const PAYMENT_METHODS = [\n  \"cash\", \"visa\", \"bank-transfer\", \"cash-on-delivery\"\n] as const;\n\nexport const RETURN_TYPES = [\n  \"refund\", \"exchange\"\n] as const;\n","size_bytes":7009},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Inventory from \"@/pages/inventory\";\nimport Sales from \"@/pages/sales\";\nimport Returns from \"@/pages/returns\";\nimport Accounting from \"@/pages/accounting\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/inventory\" component={Inventory} />\n      <Route path=\"/sales\" component={Sales} />\n      <Route path=\"/returns\" component={Returns} />\n      <Route path=\"/accounting\" component={Accounting} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background text-foreground\" dir=\"rtl\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1244},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 96%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(347, 77%, 38%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(160, 84%, 39%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(215, 20.2%, 65.1%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar-background: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(347, 77%, 38%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(160, 84%, 39%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(215, 20.2%, 65.1%);\n  --font-sans: 'Cairo', 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(347, 77%, 38%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(160, 84%, 39%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(215, 20.2%, 65.1%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar-background: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(347, 77%, 38%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(160, 84%, 39%);\n  --sidebar-accent-foreground: hsl(0, 0%, 100%);\n  --sidebar-border: hsl(210, 5.2632%, 14.9020%);\n  --sidebar-ring: hsl(215, 20.2%, 65.1%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n}\n\n.sidebar-active {\n  background: var(--accent);\n  color: var(--accent-foreground);\n}\n\n.status-badge {\n  font-size: 0.75rem;\n  padding: 0.25rem 0.5rem;\n}\n","size_bytes":3255},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/accounting.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { BarChart, DollarSign, TrendingUp, Package } from \"lucide-react\";\n\nexport default function Accounting() {\n  const [showExpenseForm, setShowExpenseForm] = useState(false);\n  const [showPurchaseForm, setShowPurchaseForm] = useState(false);\n  const [expenseData, setExpenseData] = useState({\n    description: \"\",\n    category: \"\",\n    amount: \"\",\n  });\n  const [purchaseData, setPurchaseData] = useState({\n    supplierName: \"\",\n    invoiceNumber: \"\",\n    totalAmount: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: expenses, isLoading: expensesLoading } = useQuery({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const { data: purchases, isLoading: purchasesLoading } = useQuery({\n    queryKey: [\"/api/purchases\"],\n  });\n\n  const { data: sales } = useQuery({\n    queryKey: [\"/api/sales\"],\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/expenses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          description: data.description,\n          category: data.category,\n          amount: data.amount,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create expense');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تسجيل المصروف بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      setShowExpenseForm(false);\n      setExpenseData({ description: \"\", category: \"\", amount: \"\" });\n    },\n    onError: () => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في تسجيل المصروف\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createPurchaseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/purchases', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          supplier: data.supplierName,\n          description: `فاتورة رقم ${data.invoiceNumber}`,\n          amount: data.totalAmount,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create purchase');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تسجيل فاتورة الشراء بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      setShowPurchaseForm(false);\n      setPurchaseData({ supplierName: \"\", invoiceNumber: \"\", totalAmount: \"\" });\n    },\n    onError: () => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في تسجيل فاتورة الشراء\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleExpenseSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createExpenseMutation.mutate(expenseData);\n  };\n\n  const handlePurchaseSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createPurchaseMutation.mutate(purchaseData);\n  };\n\n  // حساب الإحصائيات\n  const totalSales = (sales as any[])?.reduce((sum, sale) => sum + parseFloat(sale.total), 0) || 0;\n  const totalExpenses = (expenses as any[])?.reduce((sum, expense) => sum + parseFloat(expense.amount), 0) || 0;\n  const totalPurchases = (purchases as any[])?.reduce((sum, purchase) => sum + parseFloat(purchase.amount), 0) || 0;\n  const netProfit = totalSales - totalExpenses - totalPurchases;\n\n  const expenseCategories = [\n    { value: \"rent\", label: \"إيجار\" },\n    { value: \"utilities\", label: \"فواتير\" },\n    { value: \"marketing\", label: \"تسويق\" },\n    { value: \"supplies\", label: \"مستلزمات\" },\n    { value: \"transportation\", label: \"نقل\" },\n    { value: \"other\", label: \"أخرى\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-hidden\">\n        <Header title=\"المحاسبة\" subtitle=\"إدارة المصروفات والتقارير المالية\" />\n        \n        <div className=\"p-6 overflow-y-auto h-full space-y-6\">\n          {/* الإحصائيات المالية */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">إجمالي المبيعات</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-primary\">{totalSales.toFixed(2)} درهم</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">إجمالي المصروفات</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-destructive\">{totalExpenses.toFixed(2)} درهم</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">إجمالي المشتريات</CardTitle>\n                <Package className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-600\">{totalPurchases.toFixed(2)} درهم</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">صافي الربح</CardTitle>\n                <BarChart className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className={`text-2xl font-bold ${netProfit >= 0 ? 'text-accent' : 'text-destructive'}`}>\n                  {netProfit.toFixed(2)} درهم\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* أزرار الإجراءات */}\n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Button onClick={() => setShowExpenseForm(true)}>\n              إضافة مصروف جديد\n            </Button>\n            <Button onClick={() => setShowPurchaseForm(true)} variant=\"outline\">\n              إضافة فاتورة شراء\n            </Button>\n          </div>\n\n          {/* قائمة المصروفات */}\n          <Card>\n            <CardHeader>\n              <CardTitle>المصروفات الأخيرة</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {expensesLoading ? (\n                <p>جاري التحميل...</p>\n              ) : (expenses as any[])?.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {(expenses as any[]).map((expense: any) => (\n                    <div key={expense.id} className=\"flex items-center justify-between p-3 border rounded\">\n                      <div>\n                        <p className=\"font-medium\">{expense.description}</p>\n                        <p className=\"text-sm text-muted-foreground\">{expense.category}</p>\n                      </div>\n                      <Badge variant=\"destructive\">{expense.amount} درهم</Badge>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-muted-foreground\">لا توجد مصروفات مسجلة</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* قائمة فواتير الشراء */}\n          <Card>\n            <CardHeader>\n              <CardTitle>فواتير الشراء الأخيرة</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {purchasesLoading ? (\n                <p>جاري التحميل...</p>\n              ) : (purchases as any[])?.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {(purchases as any[]).map((purchase: any) => (\n                    <div key={purchase.id} className=\"flex items-center justify-between p-3 border rounded\">\n                      <div>\n                        <p className=\"font-medium\">{purchase.supplier}</p>\n                        <p className=\"text-sm text-muted-foreground\">{purchase.description}</p>\n                      </div>\n                      <Badge variant=\"secondary\">{purchase.amount} درهم</Badge>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-muted-foreground\">لا توجد فواتير شراء مسجلة</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* نافذة إضافة مصروف */}\n        {showExpenseForm && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <Card className=\"w-full max-w-md m-4\">\n              <CardHeader>\n                <CardTitle>إضافة مصروف جديد</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleExpenseSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"description\">الوصف</Label>\n                    <Input\n                      id=\"description\"\n                      value={expenseData.description}\n                      onChange={(e) => setExpenseData(prev => ({ ...prev, description: e.target.value }))}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"category\">الفئة</Label>\n                    <Select \n                      value={expenseData.category} \n                      onValueChange={(value) => setExpenseData(prev => ({ ...prev, category: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"اختر الفئة\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {expenseCategories.map((cat) => (\n                          <SelectItem key={cat.value} value={cat.value}>\n                            {cat.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"amount\">المبلغ (درهم)</Label>\n                    <Input\n                      id=\"amount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={expenseData.amount}\n                      onChange={(e) => setExpenseData(prev => ({ ...prev, amount: e.target.value }))}\n                      required\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setShowExpenseForm(false)}>\n                      إلغاء\n                    </Button>\n                    <Button type=\"submit\" disabled={createExpenseMutation.isPending}>\n                      حفظ\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* نافذة إضافة فاتورة شراء */}\n        {showPurchaseForm && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <Card className=\"w-full max-w-md m-4\">\n              <CardHeader>\n                <CardTitle>إضافة فاتورة شراء</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handlePurchaseSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"supplierName\">اسم المورد</Label>\n                    <Input\n                      id=\"supplierName\"\n                      value={purchaseData.supplierName}\n                      onChange={(e) => setPurchaseData(prev => ({ ...prev, supplierName: e.target.value }))}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"invoiceNumber\">رقم الفاتورة</Label>\n                    <Input\n                      id=\"invoiceNumber\"\n                      value={purchaseData.invoiceNumber}\n                      onChange={(e) => setPurchaseData(prev => ({ ...prev, invoiceNumber: e.target.value }))}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"totalAmount\">المبلغ الإجمالي (درهم)</Label>\n                    <Input\n                      id=\"totalAmount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={purchaseData.totalAmount}\n                      onChange={(e) => setPurchaseData(prev => ({ ...prev, totalAmount: e.target.value }))}\n                      required\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setShowPurchaseForm(false)}>\n                      إلغاء\n                    </Button>\n                    <Button type=\"submit\" disabled={createPurchaseMutation.isPending}>\n                      حفظ\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":14876},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport ProductTable from \"@/components/products/product-table\";\nimport AddProductModal from \"@/components/products/add-product-modal\";\nimport SaleForm from \"@/components/sales/sale-form\";\nimport ReturnForm from \"@/components/returns/return-form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useState } from \"react\";\nimport { Package, TrendingUp, AlertTriangle, RotateCcw } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const [showAddProduct, setShowAddProduct] = useState(false);\n  const [showSaleForm, setShowSaleForm] = useState(false);\n  const [showReturnForm, setShowReturnForm] = useState(false);\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const statsData = (stats as any) || {};\n  const productsArray = (products as any) || [];\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-hidden\">\n        <Header title=\"لوحة التحكم الرئيسية\" subtitle=\"مرحباً بك في نظام إدارة متجر لاروزا\" />\n        \n        <div className=\"p-6 overflow-y-auto h-full\">\n          {/* Quick Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">إجمالي المنتجات</p>\n                    <p className=\"text-3xl font-bold text-primary\" data-testid=\"text-total-products\">\n                      {statsLoading ? \"...\" : statsData.totalProducts || 0}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Package className=\"text-primary text-xl\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">مبيعات اليوم</p>\n                    <p className=\"text-3xl font-bold text-accent\" data-testid=\"text-today-sales\">\n                      {statsLoading ? \"...\" : statsData.todaySales || 0}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">درهم إماراتي</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"text-accent text-xl\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">مخزون منخفض</p>\n                    <p className=\"text-3xl font-bold text-destructive\" data-testid=\"text-low-stock\">\n                      {statsLoading ? \"...\" : statsData.outOfStockCount || 0}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">منتج يحتاج تجديد</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                    <AlertTriangle className=\"text-destructive text-xl\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">طلبات أونلاين</p>\n                    <p className=\"text-3xl font-bold text-muted-foreground\" data-testid=\"text-online-orders\">\n                      {statsLoading ? \"...\" : statsData.onlineOrdersCount || 0}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">اليوم</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-muted/20 rounded-lg flex items-center justify-center\">\n                    <RotateCcw className=\"text-muted-foreground text-xl\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-xl font-semibold mb-4\">الإجراءات السريعة</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <button \n                onClick={() => setShowAddProduct(true)}\n                className=\"bg-primary text-primary-foreground p-4 rounded-lg hover:bg-primary/90 transition-colors\"\n                data-testid=\"button-add-product\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <Package className=\"text-xl\" />\n                  <span className=\"font-medium\">إضافة منتج جديد</span>\n                </div>\n              </button>\n              <button \n                onClick={() => setShowSaleForm(true)}\n                className=\"bg-accent text-accent-foreground p-4 rounded-lg hover:bg-accent/90 transition-colors\"\n                data-testid=\"button-new-sale\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <TrendingUp className=\"text-xl\" />\n                  <span className=\"font-medium\">تسجيل بيع جديد</span>\n                </div>\n              </button>\n              <button \n                onClick={() => setShowReturnForm(true)}\n                className=\"bg-secondary text-secondary-foreground p-4 rounded-lg hover:bg-secondary/80 transition-colors\"\n                data-testid=\"button-new-return\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <RotateCcw className=\"text-xl\" />\n                  <span className=\"font-medium\">تسجيل مرتجع</span>\n                </div>\n              </button>\n            </div>\n          </div>\n\n          {/* Product Inventory Table */}\n          <ProductTable products={productsArray} isLoading={productsLoading} />\n        </div>\n      </main>\n\n      {/* Modals */}\n      {showAddProduct && (\n        <AddProductModal onClose={() => setShowAddProduct(false)} />\n      )}\n      {showSaleForm && (\n        <SaleForm onClose={() => setShowSaleForm(false)} />\n      )}\n      {showReturnForm && (\n        <ReturnForm onClose={() => setShowReturnForm(false)} />\n      )}\n    </div>\n  );\n}\n","size_bytes":7086},"client/src/pages/inventory.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport ProductTable from \"@/components/products/product-table\";\nimport AddProductModal from \"@/components/products/add-product-modal\";\nimport { useState } from \"react\";\n\nexport default function Inventory() {\n  const [showAddProduct, setShowAddProduct] = useState(false);\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const productsArray = (products as any) || [];\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-hidden\">\n        <Header title=\"إدارة المخزون\" subtitle=\"إدارة المنتجات والمخزون\" />\n        \n        <div className=\"p-6 overflow-y-auto h-full\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold\">جدول المنتجات</h2>\n            <button \n              onClick={() => setShowAddProduct(true)}\n              className=\"bg-primary text-primary-foreground px-6 py-3 rounded-lg hover:bg-primary/90 transition-colors\"\n              data-testid=\"button-add-product\"\n            >\n              إضافة منتج جديد\n            </button>\n          </div>\n\n          <ProductTable products={productsArray} isLoading={isLoading} />\n        </div>\n      </main>\n\n      {showAddProduct && (\n        <AddProductModal onClose={() => setShowAddProduct(false)} />\n      )}\n    </div>\n  );\n}\n","size_bytes":1562},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/returns.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport ReturnForm from \"@/components/returns/return-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\nimport { RotateCcw } from \"lucide-react\";\n\nexport default function Returns() {\n  const [showReturnForm, setShowReturnForm] = useState(false);\n\n  const { data: returns, isLoading } = useQuery({\n    queryKey: [\"/api/returns\"],\n  });\n\n  const returnsArray = (returns as any) || [];\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-hidden\">\n        <Header title=\"المرتجعات\" subtitle=\"إدارة المرتجعات والاستبدالات\" />\n        \n        <div className=\"p-6 overflow-y-auto h-full\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold\">سجل المرتجعات</h2>\n            <button \n              onClick={() => setShowReturnForm(true)}\n              className=\"bg-primary text-primary-foreground px-6 py-3 rounded-lg hover:bg-primary/90 transition-colors\"\n              data-testid=\"button-new-return\"\n            >\n              تسجيل مرتجع جديد\n            </button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center\">جاري التحميل...</div>\n          ) : (\n            <div className=\"space-y-4\">\n              {returnsArray.length === 0 ? (\n                <Card>\n                  <CardContent className=\"p-8 text-center\">\n                    <RotateCcw className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">لا توجد مرتجعات مسجلة بعد</p>\n                  </CardContent>\n                </Card>\n              ) : (\n                returnsArray.map((returnItem: any) => (\n                  <Card key={returnItem.id} data-testid={`card-return-${returnItem.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg\">\n                          مرتجع #{returnItem.id.slice(-8)}\n                        </CardTitle>\n                        <Badge variant={returnItem.returnType === 'refund' ? 'destructive' : 'secondary'}>\n                          {returnItem.returnType === 'refund' ? 'استرداد' : 'استبدال'}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">الفاتورة الأصلية:</span>\n                          <p className=\"font-medium\">{returnItem.originalSale?.invoiceNumber || 'غير محدد'}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">مبلغ الاسترداد:</span>\n                          <p className=\"font-bold text-primary\">{returnItem.refundAmount} درهم</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">التاريخ:</span>\n                          <p className=\"text-sm\">{new Date(returnItem.createdAt).toLocaleDateString('ar-AE')}</p>\n                        </div>\n                      </div>\n                      \n                      {/* Exchange Details */}\n                      {returnItem.returnType === 'exchange' && returnItem.exchangeType && (\n                        <div className=\"mt-4 p-3 bg-accent/10 rounded-lg border border-accent/20\">\n                          <span className=\"text-sm font-medium text-accent-foreground mb-2 block\">تفاصيل الاستبدال:</span>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                            <div>\n                              <span className=\"text-muted-foreground\">نوع الاستبدال:</span>\n                              <p className=\"font-medium\">\n                                {returnItem.exchangeType === 'product-to-product' && 'استبدال منتج بمنتج آخر'}\n                                {returnItem.exchangeType === 'color-change' && 'تغيير اللون'}\n                                {returnItem.exchangeType === 'size-change' && 'تغيير المقاس'}\n                              </p>\n                            </div>\n                            \n                            {returnItem.exchangeType === 'product-to-product' && returnItem.newProductId && (\n                              <>\n                                <div>\n                                  <span className=\"text-muted-foreground\">المنتج الجديد:</span>\n                                  <p className=\"font-medium\">معرف المنتج: {returnItem.newProductId}</p>\n                                </div>\n                                {returnItem.newColor && (\n                                  <div>\n                                    <span className=\"text-muted-foreground\">اللون الجديد:</span>\n                                    <p className=\"font-medium\">{returnItem.newColor}</p>\n                                  </div>\n                                )}\n                                {returnItem.newSize && (\n                                  <div>\n                                    <span className=\"text-muted-foreground\">المقاس الجديد:</span>\n                                    <p className=\"font-medium\">{returnItem.newSize}</p>\n                                  </div>\n                                )}\n                              </>\n                            )}\n                            \n                            {returnItem.exchangeType === 'color-change' && returnItem.newColor && (\n                              <div>\n                                <span className=\"text-muted-foreground\">اللون الجديد:</span>\n                                <p className=\"font-medium\">{returnItem.newColor}</p>\n                              </div>\n                            )}\n                            \n                            {returnItem.exchangeType === 'size-change' && returnItem.newSize && (\n                              <div>\n                                <span className=\"text-muted-foreground\">المقاس الجديد:</span>\n                                <p className=\"font-medium\">{returnItem.newSize}</p>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                      {returnItem.items && returnItem.items.length > 0 && (\n                        <div className=\"mt-4\">\n                          <span className=\"text-muted-foreground text-sm\">العناصر المرتجعة:</span>\n                          <div className=\"mt-2 space-y-1\">\n                            {returnItem.items.map((item: any, index: number) => (\n                              <div key={index} className=\"text-sm bg-muted/30 p-2 rounded\">\n                                {item.product?.modelNumber} - {item.color} - {item.size} (الكمية: {item.quantity})\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          )}\n        </div>\n      </main>\n\n      {showReturnForm && (\n        <ReturnForm onClose={() => setShowReturnForm(false)} />\n      )}\n    </div>\n  );\n}\n","size_bytes":7995},"client/src/pages/sales.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport SaleForm from \"@/components/sales/sale-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\nimport { TrendingUp } from \"lucide-react\";\n\nexport default function Sales() {\n  const [showSaleForm, setShowSaleForm] = useState(false);\n\n  const { data: sales, isLoading } = useQuery({\n    queryKey: [\"/api/sales\"],\n  });\n\n  const salesArray = (sales as any) || [];\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-hidden\">\n        <Header title=\"المبيعات\" subtitle=\"إدارة المبيعات وتسجيل العمليات الجديدة\" />\n        \n        <div className=\"p-6 overflow-y-auto h-full\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold\">سجل المبيعات</h2>\n            <button \n              onClick={() => setShowSaleForm(true)}\n              className=\"bg-primary text-primary-foreground px-6 py-3 rounded-lg hover:bg-primary/90 transition-colors\"\n              data-testid=\"button-new-sale\"\n            >\n              تسجيل بيع جديد\n            </button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center\">جاري التحميل...</div>\n          ) : (\n            <div className=\"space-y-4\">\n              {salesArray.length === 0 ? (\n                <Card>\n                  <CardContent className=\"p-8 text-center\">\n                    <TrendingUp className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">لا توجد مبيعات مسجلة بعد</p>\n                  </CardContent>\n                </Card>\n              ) : (\n                salesArray.map((sale: any) => (\n                  <Card key={sale.id} data-testid={`card-sale-${sale.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg\">\n                          فاتورة رقم: {sale.invoiceNumber}\n                        </CardTitle>\n                        <Badge variant={sale.channel === 'online' ? 'secondary' : 'default'}>\n                          {sale.channel === 'online' ? 'أونلاين' : 'في المتجر'}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">طريقة الدفع:</span>\n                          <p className=\"font-medium\">{sale.paymentMethod}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">المجموع الفرعي:</span>\n                          <p className=\"font-medium\">{sale.subtotal} درهم</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">الرسوم:</span>\n                          <p className=\"font-medium\">{sale.fees} درهم</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">المجموع الإجمالي:</span>\n                          <p className=\"font-bold text-primary\">{sale.total} درهم</p>\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mt-4 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">التاريخ:</span>\n                          <p className=\"text-sm\">{new Date(sale.createdAt).toLocaleDateString('ar-AE')}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">اسم العميل:</span>\n                          <p className=\"font-medium\">{sale.customerName}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">رقم الهاتف:</span>\n                          <p className=\"font-medium\">{sale.customerPhone}</p>\n                        </div>\n                        {sale.channel === 'online' && sale.trackingNumber && (\n                          <div className=\"md:col-span-3\">\n                            <span className=\"text-muted-foreground\">رقم التتبع:</span>\n                            <p className=\"font-medium text-accent\">{sale.trackingNumber}</p>\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* عرض تفاصيل القطع المباعة */}\n                      {sale.items && sale.items.length > 0 && (\n                        <div className=\"mt-6 border-t pt-4\">\n                          <h3 className=\"text-sm font-medium text-muted-foreground mb-3\">القطع المباعة:</h3>\n                          <div className=\"space-y-2\">\n                            {sale.items.map((item: any) => (\n                              <div key={item.id} className=\"flex justify-between items-center p-3 bg-muted/50 rounded-lg\">\n                                <div className=\"space-y-1\">\n                                  <div className=\"flex items-center gap-4 text-sm\">\n                                    <span className=\"font-medium\">{item.product?.modelNumber}</span>\n                                    <span className=\"text-muted-foreground\">|</span>\n                                    <span>اللون: <span className=\"font-medium\">{item.color}</span></span>\n                                    <span className=\"text-muted-foreground\">|</span>\n                                    <span>المقاس: <span className=\"font-medium\">{item.size}</span></span>\n                                  </div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    {item.product?.companyName} - {item.product?.productType}\n                                  </div>\n                                </div>\n                                <div className=\"text-left\">\n                                  <div className=\"text-sm font-medium\">\n                                    الكمية: {item.quantity}\n                                  </div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    {item.unitPrice} درهم للقطعة\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          )}\n        </div>\n      </main>\n\n      {showSaleForm && (\n        <SaleForm onClose={() => setShowSaleForm(false)} />\n      )}\n    </div>\n  );\n}\n","size_bytes":7411},"client/src/components/layout/header.tsx":{"content":"import { User } from \"lucide-react\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n}\n\nexport default function Header({ title, subtitle }: HeaderProps) {\n  const today = new Date().toLocaleDateString('ar-AE', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  return (\n    <header className=\"bg-card border-b border-border shadow-sm\">\n      <div className=\"flex items-center justify-between px-6 py-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">{title}</h2>\n          <p className=\"text-muted-foreground\">{subtitle}</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <span className=\"text-sm text-muted-foreground\" data-testid=\"text-today-date\">\n            اليوم: {today}\n          </span>\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <User className=\"text-primary-foreground\" size={20} />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1003},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Gem, Home, Package, TrendingUp, RotateCcw, BarChart } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  const navigation = [\n    { name: \"لوحة التحكم\", href: \"/dashboard\", icon: Home },\n    { name: \"إدارة المخزون\", href: \"/inventory\", icon: Package },\n    { name: \"المبيعات\", href: \"/sales\", icon: TrendingUp },\n    { name: \"المرتجعات\", href: \"/returns\", icon: RotateCcw },\n    { name: \"المحاسبة\", href: \"/accounting\", icon: BarChart },\n  ];\n\n  return (\n    <nav className=\"w-64 bg-card border-l border-border shadow-lg\">\n      <div className=\"p-6 border-b border-border\">\n        {/* Logo and Brand */}\n        <div className=\"flex items-center gap-3 mb-2\">\n          <div className=\"w-12 h-12 bg-white rounded-lg flex items-center justify-center p-1\">\n            <img \n              src=\"/logo.png\" \n              alt=\"شعار لاروزا\" \n              className=\"w-full h-full object-contain\"\n            />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-primary\">لاروزا</h1>\n            <p className=\"text-sm text-muted-foreground\">LAROZA</p>\n          </div>\n        </div>\n        <p className=\"text-xs text-muted-foreground\">نظام إدارة المتجر الداخلي</p>\n      </div>\n      \n      {/* Navigation Menu */}\n      <div className=\"p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href || (item.href === \"/dashboard\" && location === \"/\");\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <a\n                className={cn(\n                  \"flex items-center gap-3 px-4 py-3 rounded-lg transition-colors\",\n                  isActive\n                    ? \"bg-accent text-accent-foreground sidebar-active\"\n                    : \"hover:bg-muted\"\n                )}\n                data-testid={`nav-${item.name.replace(/\\s+/g, '-')}`}\n              >\n                <Icon size={20} />\n                <span>{item.name}</span>\n              </a>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2301},"client/src/components/products/add-product-modal.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema, type InsertProduct, COLORS, SIZES } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ColorSizeManager from \"./color-size-manager\";\n\ninterface AddProductModalProps {\n  onClose: () => void;\n}\n\nexport default function AddProductModal({ onClose }: AddProductModalProps) {\n  const [inventory, setInventory] = useState<Record<string, Record<string, number>>>({});\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertProduct>({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      modelNumber: \"\",\n      companyName: \"\",\n      productType: \"\",\n      storePrice: \"0\",\n      onlinePrice: \"0\",\n      imageUrl: \"\",\n      specifications: \"\",\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: { product: InsertProduct; inventory: any[] }) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"تم إضافة المنتج بنجاح\",\n        description: \"تم حفظ المنتج والمخزون بنجاح\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطأ في إضافة المنتج\",\n        description: error instanceof Error ? error.message : \"حدث خطأ غير متوقع\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setImageFile(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setImagePreview(result);\n        form.setValue(\"imageUrl\", result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onSubmit = (data: InsertProduct) => {\n    // Convert inventory object to array format\n    const inventoryArray = [];\n    for (const color of Object.keys(inventory)) {\n      for (const size of Object.keys(inventory[color])) {\n        if (inventory[color][size] > 0) {\n          inventoryArray.push({\n            color,\n            size,\n            quantity: inventory[color][size],\n          });\n        }\n      }\n    }\n\n    createProductMutation.mutate({\n      product: data,\n      inventory: inventoryArray,\n    });\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>إضافة منتج جديد</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Product Info */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"modelNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>رقم الموديل <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"مثال: DRS-001\" \n                        {...field}\n                        data-testid=\"input-model-number\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"companyName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>اسم الشركة <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"مثال: شركة الأزياء الراقية\" \n                        {...field}\n                        data-testid=\"input-company-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"productType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>نوع المنتج <span className=\"text-destructive\">*</span></FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-product-type\">\n                          <SelectValue placeholder=\"اختر نوع المنتج\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"dress\">فستان</SelectItem>\n                        <SelectItem value=\"evening-wear\">فستان سهرة</SelectItem>\n                        <SelectItem value=\"hijab\">حجاب</SelectItem>\n                        <SelectItem value=\"abaya\">عباية</SelectItem>\n                        <SelectItem value=\"accessories\">إكسسوارات</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"imageUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>صورة المنتج</FormLabel>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex gap-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => fileInputRef.current?.click()}\n                          data-testid=\"button-upload-image\"\n                        >\n                          رفع صورة من الجهاز\n                        </Button>\n                        <input\n                          type=\"file\"\n                          ref={fileInputRef}\n                          onChange={handleImageUpload}\n                          accept=\"image/*\"\n                          className=\"hidden\"\n                          data-testid=\"file-input-image\"\n                        />\n                      </div>\n                      <FormControl>\n                        <Input \n                          placeholder=\"أو أدخل رابط الصورة\" \n                          {...field}\n                          value={imageFile ? `تم رفع الصورة: ${imageFile.name}` : field.value || \"\"}\n                          readOnly={!!imageFile}\n                          data-testid=\"input-image-url\"\n                        />\n                      </FormControl>\n                      {imagePreview && (\n                        <div className=\"mt-2 relative\">\n                          <img \n                            src={imagePreview} \n                            alt=\"معاينة الصورة\" \n                            className=\"w-32 h-32 object-cover rounded-md border\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setImageFile(null);\n                              setImagePreview(\"\");\n                              form.setValue(\"imageUrl\", \"\");\n                            }}\n                            className=\"absolute top-1 right-1 h-6 w-6 p-0\"\n                          >\n                            ×\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"storePrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>سعر المتجر (درهم) <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field}\n                        data-testid=\"input-store-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"onlinePrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>سعر الأونلاين (درهم) <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field}\n                        data-testid=\"input-online-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <FormField\n              control={form.control}\n              name=\"specifications\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>مواصفات المنتج</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"وصف تفصيلي للمنتج...\" \n                      rows={3}\n                      {...field}\n                      value={field.value || \"\"}\n                      data-testid=\"textarea-specifications\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Color & Size Management */}\n            <ColorSizeManager inventory={inventory} onInventoryChange={setInventory} />\n\n            {/* Form Actions */}\n            <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-6 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                إلغاء\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createProductMutation.isPending}\n                data-testid=\"button-save-product\"\n              >\n                {createProductMutation.isPending ? \"جاري الحفظ...\" : \"حفظ المنتج\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12284},"client/src/components/products/color-size-manager.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2, Plus, Minus } from \"lucide-react\";\nimport { COLORS, SIZES } from \"@shared/schema\";\n\ninterface ColorSizeManagerProps {\n  inventory: Record<string, Record<string, number>>;\n  onInventoryChange: (inventory: Record<string, Record<string, number>>) => void;\n}\n\nexport default function ColorSizeManager({ inventory, onInventoryChange }: ColorSizeManagerProps) {\n  const [newColor, setNewColor] = useState(\"\");\n  const [activeColor, setActiveColor] = useState<string>(\"\");\n  const [newSize, setNewSize] = useState(\"\");\n\n  // Initialize inventory with default colors if empty\n  const availableColors = Object.keys(inventory).length > 0 ? Object.keys(inventory) : [];\n\n  const addColor = () => {\n    if (newColor.trim() && !inventory[newColor.trim()]) {\n      const updatedInventory = {\n        ...inventory,\n        [newColor.trim()]: {}\n      };\n      onInventoryChange(updatedInventory);\n      if (!activeColor) {\n        setActiveColor(newColor.trim());\n      }\n      setNewColor(\"\");\n    }\n  };\n\n  const removeColor = (color: string) => {\n    const updatedInventory = { ...inventory };\n    delete updatedInventory[color];\n    onInventoryChange(updatedInventory);\n    if (activeColor === color) {\n      setActiveColor(Object.keys(updatedInventory)[0] || \"\");\n    }\n  };\n\n  const addSize = (color: string) => {\n    if (newSize.trim() && !inventory[color]?.[newSize.trim()]) {\n      const updatedInventory = {\n        ...inventory,\n        [color]: {\n          ...inventory[color],\n          [newSize.trim()]: 0\n        }\n      };\n      onInventoryChange(updatedInventory);\n      setNewSize(\"\");\n    }\n  };\n\n  const removeSize = (color: string, size: string) => {\n    const updatedInventory = { ...inventory };\n    if (updatedInventory[color]) {\n      delete updatedInventory[color][size];\n      onInventoryChange(updatedInventory);\n    }\n  };\n\n  const updateQuantity = (color: string, size: string, quantity: number) => {\n    const updatedInventory = {\n      ...inventory,\n      [color]: {\n        ...inventory[color],\n        [size]: Math.max(0, quantity)\n      }\n    };\n    onInventoryChange(updatedInventory);\n  };\n\n  const getColorTotal = (color: string) => {\n    if (!inventory[color]) return 0;\n    return Object.values(inventory[color]).reduce((sum, qty) => sum + qty, 0);\n  };\n\n  const getColorSizeCount = (color: string) => {\n    if (!inventory[color]) return 0;\n    return Object.keys(inventory[color]).length;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h4 className=\"text-lg font-semibold\">إدارة الألوان والمقاسات</h4>\n        <div className=\"flex items-center gap-2\">\n          <Input \n            type=\"text\" \n            placeholder=\"اسم اللون الجديد\" \n            value={newColor}\n            onChange={(e) => setNewColor(e.target.value)}\n            className=\"w-40\"\n            data-testid=\"input-new-color\"\n          />\n          <Button \n            type=\"button\" \n            onClick={addColor}\n            size=\"sm\"\n            data-testid=\"button-add-color\"\n          >\n            <Plus className=\"w-4 h-4 ml-2\" />\n            إضافة لون\n          </Button>\n        </div>\n      </div>\n\n      {/* Color Overview Cards */}\n      {availableColors.length > 0 && (\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {availableColors.map((color) => (\n            <Card key={color} className=\"text-center\">\n              <CardContent className=\"p-4\">\n                <div className=\"font-semibold text-lg mb-2\">{color}</div>\n                <div className=\"text-2xl font-bold text-primary mb-1\">\n                  {getColorTotal(color)}\n                </div>\n                <div className=\"text-sm text-muted-foreground mb-2\">قطعة إجمالي</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {getColorSizeCount(color)} مقاس متوفر\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Color Tab Management */}\n      {availableColors.length > 0 && (\n        <div className=\"space-y-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            {availableColors.map((color) => (\n              <div key={color} className=\"relative\">\n                <Button\n                  type=\"button\"\n                  variant={activeColor === color ? \"default\" : \"outline\"}\n                  className=\"relative pl-6\"\n                  onClick={() => setActiveColor(color)}\n                  data-testid={`button-color-tab-${color}`}\n                >\n                  {color}\n                  <button\n                    type=\"button\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      removeColor(color);\n                    }}\n                    className=\"absolute -top-1 -right-1 h-4 w-4 bg-destructive text-destructive-foreground rounded-full text-xs flex items-center justify-center\"\n                  >\n                    ×\n                  </button>\n                </Button>\n              </div>\n            ))}\n          </div>\n\n          {/* Size Quantity Grid */}\n          {activeColor && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <h5 className=\"font-medium\">إدارة المقاسات والكميات</h5>\n                  <Badge variant=\"secondary\">({activeColor})</Badge>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"مقاس جديد\"\n                    value={newSize}\n                    onChange={(e) => setNewSize(e.target.value)}\n                    className=\"w-32\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => addSize(activeColor)}\n                    data-testid=\"button-add-size\"\n                  >\n                    <Plus className=\"w-4 h-4 ml-2\" />\n                    إضافة مقاس\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {inventory[activeColor] && Object.entries(inventory[activeColor]).map(([size, quantity], index) => (\n                  <Card \n                    key={`${activeColor}-${size}`}\n                    className={`${quantity > 0 ? 'border-green-200 bg-green-50/50' : 'border-gray-200 bg-gray-50/50'} transition-all`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"text-center mb-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <Input\n                            value={size}\n                            readOnly\n                            className=\"text-center text-lg font-semibold border-none bg-transparent\"\n                            data-testid={`input-size-${index}`}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeSize(activeColor, size)}\n                            className=\"text-destructive\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div className=\"text-center mb-4\">\n                        <div className=\"text-3xl font-bold text-amber-600 mb-1\">{quantity}</div>\n                        <div className=\"text-sm text-muted-foreground\">قطعة</div>\n                      </div>\n\n                      <div className=\"flex items-center justify-center mb-4\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantity(activeColor, size, quantity - 1)}\n                          disabled={quantity <= 0}\n                          data-testid={`button-decrement-${index}`}\n                        >\n                          <Minus className=\"w-4 h-4\" />\n                        </Button>\n                        <Input\n                          type=\"number\"\n                          value={quantity}\n                          onChange={(e) => updateQuantity(activeColor, size, parseInt(e.target.value) || 0)}\n                          className=\"text-center border-l-0 border-r-0 w-20 mx-2\"\n                          data-testid={`input-quantity-${index}`}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantity(activeColor, size, quantity + 1)}\n                          data-testid={`button-increment-${index}`}\n                        >\n                          <Plus className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <span className={`text-sm ${quantity > 0 ? 'text-green-600' : 'text-orange-500'}`}>\n                          {quantity > 0 ? 'متوفر' : 'مخزون منتهي!'}\n                        </span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10140},"client/src/components/products/edit-product-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema, type InsertProduct, type ProductWithInventory } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ColorSizeManager from \"./color-size-manager\";\n\ninterface EditProductModalProps {\n  product: ProductWithInventory;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function EditProductModal({ product, open, onOpenChange }: EditProductModalProps) {\n  const [inventory, setInventory] = useState<Record<string, Record<string, number>>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current inventory for this product\n  const { data: currentInventory } = useQuery({\n    queryKey: [\"/api/products\", product.id, \"inventory\"],\n    enabled: open,\n  });\n\n  // Initialize inventory state from product data\n  useEffect(() => {\n    if (currentInventory && Array.isArray(currentInventory)) {\n      const inventoryMap: Record<string, Record<string, number>> = {};\n      currentInventory.forEach((item: any) => {\n        if (!inventoryMap[item.color]) {\n          inventoryMap[item.color] = {};\n        }\n        inventoryMap[item.color][item.size] = item.quantity;\n      });\n      setInventory(inventoryMap);\n    }\n  }, [currentInventory]);\n\n  const form = useForm<InsertProduct>({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      modelNumber: product.modelNumber,\n      companyName: product.companyName,\n      productType: product.productType,\n      storePrice: product.storePrice.toString(),\n      onlinePrice: product.onlinePrice.toString(),\n      imageUrl: product.imageUrl || \"\",\n      specifications: product.specifications || \"\",\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async (data: { product: InsertProduct; inventory: any[] }) => {\n      const response = await apiRequest(\"PUT\", `/api/products/${product.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"تم التحديث بنجاح\",\n        description: \"تم تحديث المنتج والمخزون بنجاح\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطأ في التحديث\",\n        description: error instanceof Error ? error.message : \"حدث خطأ غير متوقع\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertProduct) => {\n    // Convert inventory object to array format\n    const inventoryArray = [];\n    for (const color of Object.keys(inventory)) {\n      for (const size of Object.keys(inventory[color])) {\n        if (inventory[color][size] >= 0) {\n          inventoryArray.push({\n            color,\n            size,\n            quantity: inventory[color][size],\n          });\n        }\n      }\n    }\n\n    updateProductMutation.mutate({\n      product: data,\n      inventory: inventoryArray,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>تعديل المنتج - {product.modelNumber}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Product Info */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"modelNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>رقم الموديل <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"مثال: DRS-001\" \n                        {...field}\n                        data-testid=\"input-edit-model-number\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"companyName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>اسم الشركة <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"مثال: شركة الأزياء الراقية\" \n                        {...field}\n                        data-testid=\"input-edit-company-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"productType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>نوع المنتج <span className=\"text-destructive\">*</span></FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-product-type\">\n                          <SelectValue placeholder=\"اختر نوع المنتج\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"dress\">فستان</SelectItem>\n                        <SelectItem value=\"evening-wear\">فستان سهرة</SelectItem>\n                        <SelectItem value=\"hijab\">حجاب</SelectItem>\n                        <SelectItem value=\"abaya\">عباية</SelectItem>\n                        <SelectItem value=\"accessories\">إكسسوارات</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"imageUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>صورة المنتج</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"رابط الصورة\" \n                        {...field}\n                        value={field.value || \"\"}\n                        data-testid=\"input-edit-image-url\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"storePrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>سعر المتجر (درهم) <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field}\n                        data-testid=\"input-edit-store-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"onlinePrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>سعر الأونلاين (درهم) <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field}\n                        data-testid=\"input-edit-online-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <FormField\n              control={form.control}\n              name=\"specifications\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>مواصفات المنتج</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"وصف تفصيلي للمنتج...\" \n                      rows={3}\n                      {...field}\n                      value={field.value || \"\"}\n                      data-testid=\"textarea-edit-specifications\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Color & Size Management with Delete Functionality */}\n            <ColorSizeManager inventory={inventory} onInventoryChange={setInventory} />\n\n            {/* Form Actions */}\n            <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-6 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-edit\"\n              >\n                إلغاء\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateProductMutation.isPending}\n                data-testid=\"button-save-edit\"\n              >\n                {updateProductMutation.isPending ? \"جاري التحديث...\" : \"حفظ التغييرات\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10755},"client/src/components/products/product-table.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Eye, Edit, Trash2, Package, Image as ImageIcon } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport EditProductModal from \"./edit-product-modal\";\nimport type { ProductWithInventory } from \"@shared/schema\";\n\ninterface ProductTableProps {\n  products?: ProductWithInventory[];\n  isLoading: boolean;\n}\n\nexport default function ProductTable({ products, isLoading }: ProductTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedProduct, setSelectedProduct] = useState<ProductWithInventory | null>(null);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/products/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete product');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"تم الحذف\",\n        description: \"تم حذف المنتج بنجاح\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"خطأ\",\n        description: \"حدث خطأ أثناء حذف المنتج\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleView = (product: ProductWithInventory) => {\n    setSelectedProduct(product);\n    setIsViewModalOpen(true);\n  };\n\n  const handleEdit = (product: ProductWithInventory) => {\n    setSelectedProduct(product);\n    setIsEditModalOpen(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (confirm('هل أنت متأكد من حذف هذا المنتج؟')) {\n      deleteProductMutation.mutate(id);\n    }\n  };\n\n  const filteredProducts = products?.filter((product) => {\n    const matchesSearch = product.modelNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.companyName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || product.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'in-stock':\n        return <Badge className=\"bg-accent text-accent-foreground\">متوفر</Badge>;\n      case 'low-stock':\n        return <Badge variant=\"secondary\">مخزون قليل</Badge>;\n      case 'out-of-stock':\n        return <Badge variant=\"destructive\">نفذ</Badge>;\n      default:\n        return <Badge variant=\"outline\">غير محدد</Badge>;\n    }\n  };\n\n  const getProductTypeName = (type: string) => {\n    const typeMap: Record<string, string> = {\n      'dress': 'فستان',\n      'evening-wear': 'فستان سهرة',\n      'hijab': 'حجاب',\n      'abaya': 'عباية',\n      'accessories': 'إكسسوارات'\n    };\n    return typeMap[type] || type;\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <Package className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">جاري تحميل المنتجات...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      {/* الجدول الرئيسي مع عرض محسن يظهر صورة وتفاصيل المنتج */}\n      <div className=\"space-y-6\">\n        {/* البحث والفلترة */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">جدول المخزون</h3>\n              <div className=\"flex items-center space-x-4 space-x-reverse\">\n                <Input \n                  type=\"text\" \n                  placeholder=\"البحث في المنتجات...\" \n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-64\"\n                  data-testid=\"input-search-products\"\n                />\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">جميع المنتجات</SelectItem>\n                    <SelectItem value=\"in-stock\">متوفر</SelectItem>\n                    <SelectItem value=\"low-stock\">مخزون قليل</SelectItem>\n                    <SelectItem value=\"out-of-stock\">نفذ</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* عرض المنتجات في شكل بطاقات مع صور */}\n        {filteredProducts.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Package className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground\">\n                {products?.length === 0 ? \"لا توجد منتجات مضافة بعد\" : \"لم يتم العثور على منتجات مطابقة\"}\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredProducts.map((product) => (\n              <Card key={product.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n                {/* صورة المنتج */}\n                <div className=\"aspect-[3/4] bg-muted flex items-center justify-center relative overflow-hidden\">\n                  {product.imageUrl ? (\n                    <img \n                      src={product.imageUrl} \n                      alt={`صورة ${product.modelNumber}`}\n                      className=\"w-full h-full object-cover\"\n                      onError={(e) => {\n                        e.currentTarget.style.display = 'none';\n                        e.currentTarget.nextElementSibling?.classList.remove('hidden');\n                      }}\n                    />\n                  ) : null}\n                  <div className={`text-center ${product.imageUrl ? 'hidden' : ''}`}>\n                    <ImageIcon className=\"h-16 w-16 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-sm text-muted-foreground\">صورة المنتج</p>\n                  </div>\n                </div>\n                \n                <CardContent className=\"p-4\">\n                  {/* معلومات المنتج */}\n                  <div className=\"space-y-3\">\n                    <div>\n                      <h3 className=\"font-bold text-lg text-right\">{product.modelNumber}</h3>\n                      <p className=\"text-muted-foreground text-right\">{product.companyName}</p>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-right\">\n                        <p className=\"text-sm text-muted-foreground\">النوع</p>\n                        <p className=\"font-medium\">{getProductTypeName(product.productType)}</p>\n                      </div>\n                      <div>{getStatusBadge(product.status)}</div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-right\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">سعر المتجر</p>\n                        <p className=\"font-bold text-primary\">{product.storePrice} درهم</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">سعر الأونلاين</p>\n                        <p className=\"font-bold text-accent\">{product.onlinePrice} درهم</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-center p-2 bg-muted/30 rounded\">\n                      <p className=\"text-sm text-muted-foreground\">المخزون المتاح</p>\n                      <p className=\"font-bold text-lg\">{product.totalQuantity} قطعة</p>\n                    </div>\n                    \n                    {/* أزرار الإجراءات */}\n                    <div className=\"flex items-center justify-center space-x-2 space-x-reverse pt-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        title=\"تعديل\"\n                        onClick={() => handleEdit(product)}\n                        data-testid={`button-edit-${product.id}`}\n                      >\n                        <Edit className=\"h-4 w-4 ml-1\" />\n                        تعديل\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        title=\"عرض التفاصيل\"\n                        onClick={() => handleView(product)}\n                        data-testid={`button-view-${product.id}`}\n                      >\n                        <Eye className=\"h-4 w-4 ml-1\" />\n                        التفاصيل\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        title=\"حذف\"\n                        onClick={() => handleDelete(product.id)}\n                        disabled={deleteProductMutation.isPending}\n                        data-testid={`button-delete-${product.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 ml-1 text-destructive\" />\n                        حذف\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* نافذة عرض التفاصيل */}\n      {selectedProduct && (\n        <Dialog open={isViewModalOpen} onOpenChange={setIsViewModalOpen}>\n          <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>تفاصيل المنتج - {selectedProduct.modelNumber}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-6\">\n              {/* صورة المنتج */}\n              <div className=\"flex justify-center\">\n                <div className=\"w-48 h-64 bg-muted rounded-lg flex flex-col items-center justify-center relative overflow-hidden\">\n                  {selectedProduct.imageUrl ? (\n                    <img \n                      src={selectedProduct.imageUrl} \n                      alt={`صورة ${selectedProduct.modelNumber}`}\n                      className=\"w-full h-full object-cover rounded-lg\"\n                      onError={(e) => {\n                        e.currentTarget.style.display = 'none';\n                        e.currentTarget.nextElementSibling?.classList.remove('hidden');\n                      }}\n                    />\n                  ) : null}\n                  <div className={`text-center ${selectedProduct.imageUrl ? 'hidden' : ''}`}>\n                    <ImageIcon className=\"h-12 w-12 text-muted-foreground mb-2\" />\n                    <span className=\"text-muted-foreground text-sm\">لا توجد صورة</span>\n                  </div>\n                </div>\n              </div>\n              \n              {/* معلومات المنتج */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">رقم الموديل</label>\n                  <p className=\"text-lg font-semibold\">{selectedProduct.modelNumber}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">اسم الشركة</label>\n                  <p className=\"text-lg\">{selectedProduct.companyName}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">نوع المنتج</label>\n                  <p className=\"text-lg\">{getProductTypeName(selectedProduct.productType)}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">الحالة</label>\n                  <div className=\"mt-1\">{getStatusBadge(selectedProduct.status)}</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">سعر المتجر</label>\n                  <p className=\"text-lg font-bold text-primary\">{selectedProduct.storePrice} درهم</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">سعر الأونلاين</label>\n                  <p className=\"text-lg font-bold text-accent\">{selectedProduct.onlinePrice} درهم</p>\n                </div>\n              </div>\n              \n              {/* تفاصيل المخزون بعرض موسع */}\n              <div className=\"w-full\">\n                <label className=\"text-lg font-bold text-center block mb-4\">تفاصيل المخزون</label>\n                \n                <div className=\"bg-gradient-to-r from-primary/10 to-accent/10 p-6 rounded-lg\">\n                  <div className=\"text-center mb-6\">\n                    <p className=\"text-3xl font-bold text-primary\">{selectedProduct.totalQuantity}</p>\n                    <p className=\"text-lg text-muted-foreground\">إجمالي القطع المتاحة</p>\n                  </div>\n                  \n                  {/* عرض تفاصيل الألوان والمقاسات مرتبة حسب اللون */}\n                  {selectedProduct.inventory && selectedProduct.inventory.length > 0 ? (\n                    <div>\n                      <h4 className=\"text-lg font-semibold mb-4 text-center\">توزيع المخزون</h4>\n                      \n                      {/* Group inventory by color and display each color with all its sizes */}\n                      {(() => {\n                        const groupedByColor: Record<string, any[]> = {};\n                        selectedProduct.inventory.forEach((item: any) => {\n                          if (!groupedByColor[item.color]) {\n                            groupedByColor[item.color] = [];\n                          }\n                          groupedByColor[item.color].push(item);\n                        });\n                        \n                        return Object.entries(groupedByColor)\n                          .sort(([a], [b]) => a.localeCompare(b))\n                          .map(([color, items]) => (\n                          <div key={color} className=\"mb-6 bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n                            <div className=\"bg-primary/10 p-4 border-b border-gray-200\">\n                              <h5 className=\"text-xl font-bold text-primary text-center\">{color}</h5>\n                              <p className=\"text-sm text-muted-foreground text-center mt-1\">\n                                إجمالي الكمية: {items.reduce((sum, item) => sum + item.quantity, 0)} قطعة\n                              </p>\n                            </div>\n                            <div className=\"p-4\">\n                              <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3\">\n                                {items\n                                  .sort((a, b) => a.size.localeCompare(b.size))\n                                  .map((item: any, index: number) => (\n                                  <div key={index} className=\"bg-accent/10 p-3 rounded-lg text-center border border-accent/20\">\n                                    <div className=\"text-lg font-bold text-gray-800 mb-1\">\n                                      {item.size}\n                                    </div>\n                                    <div className=\"text-2xl font-bold text-accent\">\n                                      {item.quantity}\n                                    </div>\n                                    <div className=\"text-xs text-muted-foreground\">\n                                      قطعة\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                        ));\n                      })()}\n                      \n                      {/* ملخص الألوان */}\n                      <div className=\"mt-6 p-4 bg-white/50 rounded-lg\">\n                        <h5 className=\"font-semibold mb-2 text-center\">ملخص الألوان المتاحة:</h5>\n                        <div className=\"flex flex-wrap justify-center gap-2\">\n                          {Array.from(new Set(selectedProduct.inventory.map((item: any) => item.color))).map((color: string) => {\n                            const colorTotal = selectedProduct.inventory\n                              .filter((item: any) => item.color === color)\n                              .reduce((sum: number, item: any) => sum + item.quantity, 0);\n                            return (\n                              <div key={color} className=\"bg-primary/20 px-3 py-1 rounded-full text-sm\">\n                                <span className=\"font-medium\">{color}</span>: {colorTotal} قطعة\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                      \n                      {/* ملخص المقاسات */}\n                      <div className=\"mt-4 p-4 bg-white/50 rounded-lg\">\n                        <h5 className=\"font-semibold mb-2 text-center\">ملخص المقاسات المتاحة:</h5>\n                        <div className=\"flex flex-wrap justify-center gap-2\">\n                          {Array.from(new Set(selectedProduct.inventory.map((item: any) => item.size))).map((size: string) => {\n                            const sizeTotal = selectedProduct.inventory\n                              .filter((item: any) => item.size === size)\n                              .reduce((sum: number, item: any) => sum + item.quantity, 0);\n                            return (\n                              <div key={size} className=\"bg-accent/20 px-3 py-1 rounded-full text-sm\">\n                                <span className=\"font-medium\">{size}</span>: {sizeTotal} قطعة\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Package className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-lg text-muted-foreground\">لا توجد تفاصيل مخزون متاحة</p>\n                      <p className=\"text-sm text-muted-foreground mt-2\">يرجى إضافة مخزون لهذا المنتج</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* نافذة التعديل */}\n      {selectedProduct && (\n        <EditProductModal \n          product={selectedProduct} \n          open={isEditModalOpen} \n          onOpenChange={setIsEditModalOpen}\n        />\n      )}\n    </>\n  );\n}","size_bytes":20652},"client/src/components/returns/return-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertReturnSchema, type InsertReturn, type InsertReturnItem } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Trash2, Plus } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst returnFormSchema = z.object({\n  originalSaleId: z.string().min(1, \"الفاتورة الأصلية مطلوبة\"),\n  returnType: z.string().min(1, \"نوع المرتجع مطلوب\"),\n  exchangeType: z.string().optional(),\n  newProductId: z.string().optional(),\n  newColor: z.string().optional(),\n  newSize: z.string().optional(),\n  refundAmount: z.string().min(1, \"مبلغ الاسترداد مطلوب\"),\n  items: z.array(z.object({\n    productId: z.string().min(1, \"معرف المنتج مطلوب\"),\n    color: z.string().min(1, \"اللون مطلوب\"),\n    size: z.string().min(1, \"المقاس مطلوب\"),\n    quantity: z.number().min(1, \"الكمية يجب أن تكون على الأقل 1\"),\n  })).min(1, \"يجب إضافة عنصر واحد على الأقل\"),\n}).refine((data) => {\n  if (data.returnType === \"exchange\") {\n    if (!data.exchangeType) return false;\n    if (data.exchangeType === \"product-to-product\") {\n      return !!(data.newProductId && data.newColor && data.newSize);\n    }\n    if (data.exchangeType === \"color-change\" && !data.newColor) return false;\n    if (data.exchangeType === \"size-change\" && !data.newSize) return false;\n  }\n  return true;\n}, {\n  message: \"يجب ملء جميع الحقول المطلوبة للاستبدال\",\n  path: [\"exchangeType\"],\n});\n\ntype ReturnFormData = z.infer<typeof returnFormSchema>;\n\ninterface ReturnFormProps {\n  onClose: () => void;\n}\n\nexport default function ReturnForm({ onClose }: ReturnFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: sales } = useQuery({\n    queryKey: [\"/api/sales\"],\n  });\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const form = useForm<ReturnFormData>({\n    resolver: zodResolver(returnFormSchema),\n    defaultValues: {\n      originalSaleId: \"\",\n      returnType: \"\",\n      exchangeType: \"\",\n      newProductId: \"\",\n      newColor: \"\",\n      newSize: \"\",\n      refundAmount: \"0\",\n      items: [{ productId: \"\", color: \"\", size: \"\", quantity: 1 }],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"items\",\n  });\n\n  const createReturnMutation = useMutation({\n    mutationFn: async (data: { return: InsertReturn; items: InsertReturnItem[] }) => {\n      const response = await apiRequest(\"POST\", \"/api/returns\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/returns\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"تم تسجيل المرتجع بنجاح\",\n        description: \"تم حفظ المرتجع وتحديث المخزون\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطأ في تسجيل المرتجع\",\n        description: error instanceof Error ? error.message : \"حدث خطأ غير متوقع\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const selectedSale = (sales as any)?.find((sale: any) => sale.id === form.watch(\"originalSaleId\"));\n\n  // Auto-populate refund amount when sale is selected\n  const handleSaleChange = (saleId: string) => {\n    const sale = (sales as any)?.find((s: any) => s.id === saleId);\n    if (sale) {\n      form.setValue(\"refundAmount\", sale.total);\n    }\n  };\n\n  const onSubmit = (data: ReturnFormData) => {\n    const returnData: InsertReturn = {\n      originalSaleId: data.originalSaleId,\n      returnType: data.returnType as \"refund\" | \"exchange\",\n      exchangeType: data.exchangeType || null,\n      newProductId: data.newProductId || null,\n      newColor: data.newColor || null,\n      newSize: data.newSize || null,\n      refundAmount: data.refundAmount,\n    };\n\n    const itemsData: InsertReturnItem[] = data.items.map(item => ({\n      productId: item.productId,\n      color: item.color,\n      size: item.size,\n      quantity: item.quantity,\n    }));\n\n    createReturnMutation.mutate({\n      return: returnData,\n      items: itemsData,\n    });\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>تسجيل مرتجع</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Return Details */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"originalSaleId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الفاتورة الأصلية <span className=\"text-destructive\">*</span></FormLabel>\n                    <Select onValueChange={(value) => {\n                      field.onChange(value);\n                      handleSaleChange(value);\n                    }} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-original-sale\">\n                          <SelectValue placeholder=\"اختر الفاتورة الأصلية\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {(sales as any)?.map((sale: any) => (\n                          <SelectItem key={sale.id} value={sale.id}>\n                            {sale.invoiceNumber} - {sale.total} درهم\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"returnType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>نوع المرتجع <span className=\"text-destructive\">*</span></FormLabel>\n                    <Select onValueChange={(value) => {\n                      field.onChange(value);\n                      if (value === \"refund\") {\n                        form.setValue(\"exchangeType\", \"\");\n                        form.setValue(\"newProductId\", \"\");\n                        form.setValue(\"newColor\", \"\");\n                        form.setValue(\"newSize\", \"\");\n                      }\n                    }} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-return-type\">\n                          <SelectValue placeholder=\"اختر نوع المرتجع\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"refund\">استرداد</SelectItem>\n                        <SelectItem value=\"exchange\">استبدال</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"refundAmount\"\n                render={({ field }) => (\n                  <FormItem className=\"md:col-span-2\">\n                    <FormLabel>مبلغ الاسترداد (درهم) <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field}\n                        data-testid=\"input-refund-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Exchange Options - Show only when exchange is selected */}\n            {form.watch(\"returnType\") === \"exchange\" && (\n              <Card className=\"bg-accent/10 border-accent/20\">\n                <CardContent className=\"p-6\">\n                  <h4 className=\"font-medium mb-4 text-accent-foreground\">خيارات الاستبدال</h4>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"exchangeType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>نوع الاستبدال <span className=\"text-destructive\">*</span></FormLabel>\n                          <Select onValueChange={(value) => {\n                            field.onChange(value);\n                            // Reset other fields when exchange type changes\n                            form.setValue(\"newProductId\", \"\");\n                            form.setValue(\"newColor\", \"\");\n                            form.setValue(\"newSize\", \"\");\n                          }} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-exchange-type\">\n                                <SelectValue placeholder=\"اختر نوع الاستبدال\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"product-to-product\">استبدال منتج بمنتج آخر</SelectItem>\n                              <SelectItem value=\"color-change\">تغيير اللون</SelectItem>\n                              <SelectItem value=\"size-change\">تغيير المقاس</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* New Product, Color, and Size Selection for product-to-product exchange */}\n                    {form.watch(\"exchangeType\") === \"product-to-product\" && (\n                      <>\n                        <FormField\n                          control={form.control}\n                          name=\"newProductId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>المنتج الجديد <span className=\"text-destructive\">*</span></FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-new-product\">\n                                    <SelectValue placeholder=\"اختر المنتج الجديد\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {(products as any)?.map((product: any) => (\n                                    <SelectItem key={product.id} value={product.id}>\n                                      {product.modelNumber} - {product.companyName}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"newColor\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>اللون الجديد <span className=\"text-destructive\">*</span></FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"مثال: أسود، أبيض، أحمر\" \n                                  {...field}\n                                  data-testid=\"input-new-color-product\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"newSize\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>المقاس الجديد <span className=\"text-destructive\">*</span></FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"مثال: 38، 40، L، XL\" \n                                  {...field}\n                                  data-testid=\"input-new-size-product\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </>\n                    )}\n\n                    {/* New Color for color change */}\n                    {form.watch(\"exchangeType\") === \"color-change\" && (\n                      <FormField\n                        control={form.control}\n                        name=\"newColor\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>اللون الجديد <span className=\"text-destructive\">*</span></FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"مثال: أسود، أبيض، أحمر\" \n                                {...field}\n                                data-testid=\"input-new-color\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    {/* New Size for size change */}\n                    {form.watch(\"exchangeType\") === \"size-change\" && (\n                      <FormField\n                        control={form.control}\n                        name=\"newSize\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>المقاس الجديد <span className=\"text-destructive\">*</span></FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"مثال: 38، 40، L، XL\" \n                                {...field}\n                                data-testid=\"input-new-size\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Show original sale details if selected */}\n            {selectedSale && (\n              <Card className=\"bg-muted/30\">\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-medium mb-2\">تفاصيل الفاتورة الأصلية:</h4>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">رقم الفاتورة:</span>\n                      <p className=\"font-medium\">{selectedSale.invoiceNumber}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">القناة:</span>\n                      <p className=\"font-medium\">{selectedSale.channel === 'online' ? 'أونلاين' : 'في المتجر'}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">طريقة الدفع:</span>\n                      <p className=\"font-medium\">{selectedSale.paymentMethod}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">المجموع:</span>\n                      <p className=\"font-bold text-primary\">{selectedSale.total} درهم</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Return Items */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-lg font-medium\">عناصر المرتجع</h4>\n                <Button \n                  type=\"button\" \n                  onClick={() => append({ productId: \"\", color: \"\", size: \"\", quantity: 1 })}\n                  data-testid=\"button-add-return-item\"\n                >\n                  <Plus className=\"w-4 h-4 ml-2\" />\n                  إضافة عنصر\n                </Button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {fields.map((field, index) => (\n                  <Card key={field.id}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"grid grid-cols-2 lg:grid-cols-5 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.productId`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>المنتج</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid={`select-return-product-${index}`}>\n                                    <SelectValue placeholder=\"اختر المنتج\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {(products as any)?.map((product: any) => (\n                                    <SelectItem key={product.id} value={product.id}>\n                                      {product.modelNumber} - {product.companyName}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.color`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>اللون</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"مثال: أسود، أبيض، أحمر\" \n                                  {...field}\n                                  data-testid={`input-return-color-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.size`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>المقاس</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"مثال: 38، 40، L، XL\" \n                                  {...field}\n                                  data-testid={`input-return-size-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.quantity`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>الكمية</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  min=\"1\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                  data-testid={`input-return-quantity-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <div className=\"flex items-end\">\n                          <Button \n                            type=\"button\" \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            onClick={() => remove(index)}\n                            disabled={fields.length === 1}\n                            data-testid={`button-remove-return-item-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            {/* Form Actions */}\n            <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-6 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel-return\"\n              >\n                إلغاء\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createReturnMutation.isPending}\n                data-testid=\"button-save-return\"\n              >\n                {createReturnMutation.isPending ? \"جاري الحفظ...\" : \"تسجيل المرتجع\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":24129},"client/src/components/sales/available-inventory.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface AvailableInventoryProps {\n  productId: string;\n  selectedColor?: string;\n  selectedSize?: string;\n  onColorSelect: (color: string) => void;\n  onSizeSelect: (size: string) => void;\n}\n\nexport default function AvailableInventory({ \n  productId, \n  selectedColor, \n  selectedSize, \n  onColorSelect, \n  onSizeSelect \n}: AvailableInventoryProps) {\n  const { data: inventory } = useQuery({\n    queryKey: [\"/api/products\", productId, \"inventory\"],\n    enabled: !!productId,\n  });\n\n  const inventoryArray = (inventory as any) || [];\n\n  if (!inventoryArray || inventoryArray.length === 0) {\n    return (\n      <Card className=\"bg-muted/20\">\n        <CardContent className=\"p-4\">\n          <p className=\"text-sm text-muted-foreground\">لا توجد معلومات مخزون متاحة</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Group inventory by color\n  const colorGroups = inventoryArray.reduce((groups: Record<string, any[]>, item: any) => {\n    if (!groups[item.color]) {\n      groups[item.color] = [];\n    }\n    groups[item.color].push(item);\n    return groups;\n  }, {});\n\n  const availableColors = Object.keys(colorGroups);\n  const selectedColorInventory = selectedColor ? colorGroups[selectedColor] || [] : [];\n\n  const getColorTotal = (color: string) => {\n    return colorGroups[color].reduce((sum: number, item: any) => sum + item.quantity, 0);\n  };\n\n  const getAvailableQuantity = () => {\n    if (!selectedColor || !selectedSize) return 0;\n    const item = inventoryArray.find((inv: any) => inv.color === selectedColor && inv.size === selectedSize);\n    return item ? item.quantity : 0;\n  };\n\n  return (\n    <Card className=\"bg-muted/20\">\n      <CardContent className=\"p-4\">\n        <h5 className=\"font-medium text-sm mb-4\">المخزون المتوفر:</h5>\n        \n        {/* Available Colors */}\n        <div className=\"mb-4\">\n          <label className=\"text-xs text-muted-foreground mb-2 block\">الألوان المتوفرة:</label>\n          <div className=\"flex flex-wrap gap-2\">\n            {availableColors.map((color) => (\n              <Button\n                key={color}\n                type=\"button\"\n                variant={selectedColor === color ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => onColorSelect(color)}\n                data-testid={`button-select-color-${color}`}\n              >\n                {color} ({getColorTotal(color)})\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Available Sizes for Selected Color */}\n        {selectedColor && selectedColorInventory.length > 0 && (\n          <div className=\"mb-4\">\n            <label className=\"text-xs text-muted-foreground mb-2 block\">\n              المقاسات المتوفرة لـ {selectedColor}:\n            </label>\n            <div className=\"flex flex-wrap gap-2\">\n              {selectedColorInventory.map((item: any) => (\n                <Button\n                  key={item.size}\n                  type=\"button\"\n                  variant={selectedSize === item.size ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => onSizeSelect(item.size)}\n                  disabled={item.quantity === 0}\n                  data-testid={`button-select-size-${item.size}`}\n                >\n                  {item.size} ({item.quantity})\n                </Button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Quantity Info */}\n        {selectedColor && selectedSize && (\n          <div className=\"flex items-center gap-2 mb-4\">\n            <span className=\"text-xs text-muted-foreground\">الكمية المتوفرة:</span>\n            <Badge variant={getAvailableQuantity() > 0 ? \"default\" : \"destructive\"}>\n              {getAvailableQuantity()} قطعة\n            </Badge>\n          </div>\n        )}\n\n        {/* Summary */}\n        <div className=\"text-xs text-muted-foreground\">\n          إجمالي: {availableColors.length} لون، {inventory.length} مقاس متوفر\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4296},"client/src/components/sales/sale-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertSaleSchema, type InsertSale, type InsertSaleItem } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Trash2, Plus } from \"lucide-react\";\nimport AvailableInventory from \"./available-inventory\";\nimport { z } from \"zod\";\n\nconst saleFormSchema = z.object({\n  channel: z.string().min(1, \"قناة البيع مطلوبة\"),\n  paymentMethod: z.string().min(1, \"طريقة الدفع مطلوبة\"),\n  customerName: z.string().min(1, \"اسم الزبون مطلوب\"),\n  customerPhone: z.string().min(1, \"رقم هاتف الزبون مطلوب\"),\n  trackingNumber: z.string().optional(),\n  items: z.array(z.object({\n    productId: z.string().min(1, \"المنتج مطلوب\"),\n    color: z.string().min(1, \"اللون مطلوب\"),\n    size: z.string().min(1, \"المقاس مطلوب\"),\n    quantity: z.number().min(1, \"الكمية يجب أن تكون على الأقل 1\"),\n    unitPrice: z.string().min(1, \"سعر الوحدة مطلوب\"),\n  })).min(1, \"يجب إضافة عنصر واحد على الأقل\"),\n});\n\ntype SaleFormData = z.infer<typeof saleFormSchema>;\n\ninterface SaleFormProps {\n  onClose: () => void;\n}\n\nexport default function SaleForm({ onClose }: SaleFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const form = useForm<SaleFormData>({\n    resolver: zodResolver(saleFormSchema),\n    defaultValues: {\n      channel: \"\",\n      paymentMethod: \"\",\n      customerName: \"\",\n      customerPhone: \"\",\n      trackingNumber: \"\",\n      items: [{ productId: \"\", color: \"\", size: \"\", quantity: 1, unitPrice: \"0\" }],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"items\",\n  });\n\n  const watchedItems = form.watch(\"items\");\n  const paymentMethod = form.watch(\"paymentMethod\");\n  const channel = form.watch(\"channel\");\n\n  const createSaleMutation = useMutation({\n    mutationFn: async (data: { sale: InsertSale; items: InsertSaleItem[] }) => {\n      const response = await apiRequest(\"POST\", \"/api/sales\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"تم تسجيل البيع بنجاح\",\n        description: \"تم حفظ البيع وتحديث المخزون\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطأ في تسجيل البيع\",\n        description: error instanceof Error ? error.message : \"حدث خطأ غير متوقع\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate totals\n  const subtotal = watchedItems.reduce((sum, item) => {\n    return sum + (item.quantity * parseFloat(item.unitPrice || \"0\"));\n  }, 0);\n\n  const feePercentage = paymentMethod === \"visa\" ? 0.05 : 0;\n  const fees = subtotal * feePercentage;\n  const total = subtotal + fees;\n\n  const onSubmit = (data: SaleFormData) => {\n    const saleData: InsertSale = {\n      channel: data.channel as \"in-store\" | \"online\",\n      paymentMethod: data.paymentMethod,\n      customerName: data.customerName,\n      customerPhone: data.customerPhone,\n      trackingNumber: data.trackingNumber || null,\n      subtotal: subtotal.toFixed(2),\n      fees: fees.toFixed(2),\n      total: total.toFixed(2),\n    };\n\n    const itemsData: InsertSaleItem[] = data.items.map(item => ({\n      productId: item.productId,\n      color: item.color,\n      size: item.size,\n      quantity: item.quantity,\n      unitPrice: item.unitPrice,\n    }));\n\n    createSaleMutation.mutate({\n      sale: saleData,\n      items: itemsData,\n    });\n  };\n\n  // Update unit price when product or channel changes\n  const updateUnitPrice = (index: number, productId: string) => {\n    const product = (products as any)?.find((p: any) => p.id === productId);\n    if (product) {\n      const channel = form.getValues(\"channel\");\n      const price = channel === \"online\" ? product.onlinePrice : product.storePrice;\n      form.setValue(`items.${index}.unitPrice`, price);\n    }\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>تسجيل بيع جديد</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Sale Details */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"channel\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>قناة البيع <span className=\"text-destructive\">*</span></FormLabel>\n                    <Select onValueChange={(value) => {\n                      field.onChange(value);\n                      // Update prices for all items when channel changes\n                      watchedItems.forEach((item, index) => {\n                        if (item.productId) {\n                          updateUnitPrice(index, item.productId);\n                        }\n                      });\n                    }} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-sales-channel\">\n                          <SelectValue placeholder=\"اختر قناة البيع\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"in-store\">في المتجر</SelectItem>\n                        <SelectItem value=\"online\">أونلاين</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"paymentMethod\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>طريقة الدفع <span className=\"text-destructive\">*</span></FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payment-method\">\n                          <SelectValue placeholder=\"اختر طريقة الدفع\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"cash\">نقدي</SelectItem>\n                        <SelectItem value=\"visa\">فيزا (+5% رسوم)</SelectItem>\n                        <SelectItem value=\"bank-transfer\">حوالة بنكية</SelectItem>\n                        <SelectItem value=\"cash-on-delivery\">الدفع عند الاستلام</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Customer Information */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"customerName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>اسم الزبون <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"أدخل اسم الزبون\" \n                        {...field}\n                        data-testid=\"input-customer-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"customerPhone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>رقم الهاتف <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"مثال: +971501234567\" \n                        {...field}\n                        data-testid=\"input-customer-phone\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Tracking Number for Online Sales */}\n            {channel === \"online\" && (\n              <FormField\n                control={form.control}\n                name=\"trackingNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>رقم التتبع (للمبيعات الأونلاين)</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"أدخل رقم التتبع للشحنة\" \n                        {...field}\n                        value={field.value || \"\"}\n                        data-testid=\"input-tracking-number\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Sale Items */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-lg font-medium\">عناصر البيع</h4>\n                <Button \n                  type=\"button\" \n                  onClick={() => append({ productId: \"\", color: \"\", size: \"\", quantity: 1, unitPrice: \"0\" })}\n                  data-testid=\"button-add-item\"\n                >\n                  <Plus className=\"w-4 h-4 ml-2\" />\n                  إضافة عنصر\n                </Button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {fields.map((field, index) => (\n                  <Card key={field.id}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"grid grid-cols-2 lg:grid-cols-6 gap-4 mb-4\">\n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.productId`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>المنتج</FormLabel>\n                              <Select onValueChange={(value) => {\n                                field.onChange(value);\n                                updateUnitPrice(index, value);\n                                // Reset color and size when product changes\n                                form.setValue(`items.${index}.color`, \"\");\n                                form.setValue(`items.${index}.size`, \"\");\n                              }} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid={`select-product-${index}`}>\n                                    <SelectValue placeholder=\"اختر المنتج\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {(products as any)?.map((product: any) => (\n                                    <SelectItem key={product.id} value={product.id}>\n                                      {product.modelNumber} - {product.companyName}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.color`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>اللون</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"مثال: أسود، أبيض، أحمر\" \n                                  {...field}\n                                  data-testid={`input-color-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.size`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>المقاس</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"مثال: 38، 40، L، XL\" \n                                  {...field}\n                                  data-testid={`input-size-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.quantity`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>الكمية</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  min=\"1\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                  data-testid={`input-quantity-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.unitPrice`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>سعر الوحدة</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  step=\"0.01\" \n                                  {...field}\n                                  data-testid={`input-unit-price-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <div className=\"flex items-end\">\n                          <Button \n                            type=\"button\" \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            onClick={() => remove(index)}\n                            disabled={fields.length === 1}\n                            data-testid={`button-remove-item-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      {/* Available Inventory Display */}\n                      {watchedItems[index]?.productId && (\n                        <AvailableInventory \n                          productId={watchedItems[index].productId}\n                          selectedColor={watchedItems[index].color}\n                          selectedSize={watchedItems[index].size}\n                          onColorSelect={(color) => form.setValue(`items.${index}.color`, color)}\n                          onSizeSelect={(size) => form.setValue(`items.${index}.size`, size)}\n                        />\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            {/* Summary */}\n            <Card className=\"bg-muted/30\">\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>المجموع الفرعي:</span>\n                    <span data-testid=\"text-subtotal\">{subtotal.toFixed(2)} درهم</span>\n                  </div>\n                  {paymentMethod === \"visa\" && (\n                    <div className=\"flex justify-between\">\n                      <span>رسوم فيزا (5%):</span>\n                      <span data-testid=\"text-fees\">{fees.toFixed(2)} درهم</span>\n                    </div>\n                  )}\n                  <div className=\"flex justify-between font-bold text-lg\">\n                    <span>المجموع الإجمالي:</span>\n                    <span data-testid=\"text-total\">{total.toFixed(2)} درهم</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Form Actions */}\n            <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-6 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                إلغاء\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createSaleMutation.isPending}\n                data-testid=\"button-save-sale\"\n              >\n                {createSaleMutation.isPending ? \"جاري الحفظ...\" : \"تسجيل البيع\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":19550},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"README.md":{"content":"\"# Laroza Store Management System\n\nA full-stack web application for internal store management with inventory tracking, sales management, returns processing, and accounting features.\n\n## Technology Stack\n\n- **Frontend**: React with TypeScript, Vite, TailwindCSS\n- **Backend**: Node.js with Express, Firebase Realtime Database  \n- **Database**: Firebase Realtime Database\n- **Authentication**: Firebase Admin SDK\n\n## Environment Setup\n\n### Required Environment Variables\n\nSet the following environment variables in your hosting platform dashboard:\n\n```bash\n# Firebase Service Account (required - choose one format)\nFIREBASE_CREDENTIALS=<paste-raw-json-here>\n# OR\nFIREBASE_CREDENTIALS_B64=<paste-base64-json-here>\n\n# Firebase Realtime Database URL (pre-configured)\nFIREBASE_DB_URL=https://laroza-8b3ad-default-rtdb.firebaseio.com/\n\n# Node environment\nNODE_ENV=production\n```\n\n### Firebase Service Account Setup\n\n1. Go to your Firebase Console → Project Settings → Service Accounts\n2. Generate a new private key (downloads a JSON file)\n3. Either:\n   - Paste the entire JSON content into `FIREBASE_CREDENTIALS`\n   - Or convert to base64 and paste into `FIREBASE_CREDENTIALS_B64`\n\n### Deployment Configuration\n\n**Build Command**: `npm run build`\n\n**Start Command**: `npm start`\n\nThe application will serve both the API and static frontend from the same server.\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Set up environment variables (copy from .env.example)\ncp .env.example .env\n\n# Start development server\nnpm run dev\n```\n\n## Production Deployment\n\n1. Set environment variables in your hosting platform\n2. Configure build and start commands as shown above\n3. Deploy to any generic Node.js hosting platform\n\nThe app will automatically:\n- Serve static files in production\n- Use the configured port from `PORT` environment variable\n- Connect to Firebase Realtime Database\n- Apply security middleware (helmet, CORS, compression)\n\n## API Testing\n\n### Products API\n\n```bash\n# Get all products (should be [] initially)\ncurl -s https://<your-host>/api/products\n\n# Create a product with initial inventory\ncurl -s -X POST https://<your-host>/api/products \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"product\": {\n      \"modelNumber\": \"AB-1001\",\n      \"companyName\": \"Laroza\",\n      \"productType\": \"abaya\",\n      \"storePrice\": \"120.00\",\n      \"onlinePrice\": \"135.00\",\n      \"imageUrl\": \"\",\n      \"specifications\": \"Black, chiffon\"\n    },\n    \"inventory\": [\n      { \"color\": \"black\", \"size\": \"M\", \"quantity\": 5 },\n      { \"color\": \"black\", \"size\": \"L\", \"quantity\": 3 }\n    ]\n  }'\n```\n\n### Sales API\n\n```bash\n# Get all sales\ncurl -s https://<your-host>/api/sales\n\n# Create a sale\ncurl -s -X POST https://<your-host>/api/sales \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"sale\": {\n      \"channel\": \"in-store\",\n      \"paymentMethod\": \"cash\",\n      \"customerName\": \"أحمد محمد\",\n      \"customerPhone\": \"+971501234567\",\n      \"subtotal\": \"120.00\",\n      \"fees\": \"0.00\",\n      \"total\": \"120.00\"\n    },\n    \"items\": [\n      {\n        \"productId\": \"<product-id>\",\n        \"color\": \"black\",\n        \"size\": \"M\", \n        \"quantity\": 1,\n        \"unitPrice\": \"120.00\"\n      }\n    ]\n  }'\n```\n\n### Returns API\n\n```bash\n# Get all returns\ncurl -s https://<your-host>/api/returns\n\n# Create a return/exchange\ncurl -s -X POST https://<your-host>/api/returns \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"return\": {\n      \"originalSaleId\": \"<sale-id>\",\n      \"returnType\": \"exchange\",\n      \"exchangeType\": \"color-change\",\n      \"newColor\": \"white\",\n      \"refundAmount\": \"0.00\"\n    },\n    \"items\": [\n      {\n        \"productId\": \"<product-id>\",\n        \"color\": \"black\",\n        \"size\": \"M\",\n        \"quantity\": 1\n      }\n    ]\n  }'\n```\n\n## Features\n\n- **Inventory Management**: Track products, colors, sizes, and quantities\n- **Sales Processing**: Handle in-store and online sales with automatic inventory updates\n- **Returns & Exchanges**: Support for refunds and three types of exchanges:\n  - Product-to-product exchange\n  - Color change\n  - Size change\n- **Accounting**: Track expenses and purchases\n- **Dashboard**: Real-time analytics and statistics\n- **RTL Support**: Full Arabic language support with right-to-left layout\n\n## Database Schema\n\nThe application uses Firebase Realtime Database with the following structure:\n\n```\n- products/\n- product_inventory/<productId>/\n- sales/\n- sale_items/<saleId>/\n- returns/\n- return_items/<returnId>/\n- expenses/\n- purchases/\n```\n\nAll timestamps are stored as Unix timestamps (milliseconds) for consistency across different time zones.\" \n","size_bytes":4616},"server/firebase.ts":{"content":"// server/firebase.ts\nimport admin from \"firebase-admin\";\n\nfunction getServiceAccount() {\n  const raw = process.env.FIREBASE_CREDENTIALS || \"\";\n  const b64 = process.env.FIREBASE_CREDENTIALS_B64 || \"\";\n  const jsonText = raw ? raw : (b64 ? Buffer.from(b64, \"base64\").toString(\"utf-8\") : \"\");\n  \n  // For development environment, provide a mock service account\n  if (!jsonText && process.env.NODE_ENV === \"development\") {\n    console.warn(\"Firebase credentials not found. Using fallback storage in development mode.\");\n    return {\n      type: \"service_account\",\n      project_id: \"development-mode\",\n      private_key_id: \"dev\",\n      private_key: \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC1...\\n-----END PRIVATE KEY-----\\n\",\n      client_email: \"dev@example.com\",\n      client_id: \"dev\",\n      auth_uri: \"https://accounts.google.com/o/oauth2/auth\",\n      token_uri: \"https://oauth2.googleapis.com/token\"\n    };\n  }\n  \n  if (!jsonText) throw new Error(\"FIREBASE_CREDENTIALS missing\");\n  return JSON.parse(jsonText);\n}\n\nconst databaseURL =\n  process.env.FIREBASE_DB_URL ||\n  \"https://laroza-8b3ad-default-rtdb.firebaseio.com/\"; // explicit RTDB URL as requested\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(getServiceAccount()),\n    databaseURL,\n  });\n}\n\nexport const rtdb = admin.database();","size_bytes":1374},"server/storage.realtime.ts":{"content":"import { \n  type Product, \n  type InsertProduct, \n  type ProductInventory, \n  type InsertProductInventory,\n  type Sale,\n  type InsertSale,\n  type SaleItem,\n  type InsertSaleItem,\n  type Return,\n  type InsertReturn,\n  type ReturnItem,\n  type InsertReturnItem,\n  type Expense,\n  type InsertExpense,\n  type Purchase,\n  type InsertPurchase,\n  type ProductWithInventory,\n  type SaleWithItems,\n  type ReturnWithItems,\n  COLORS,\n  SIZES\n} from \"@shared/schema\";\nimport { rtdb } from \"./firebase\";\nimport { IStorage } from \"./storage\";\n\nexport class RealtimeStorage implements IStorage {\n  \n  // Products\n  async getProducts(): Promise<ProductWithInventory[]> {\n    const productsSnapshot = await rtdb.ref('products').once('value');\n    const productsData = productsSnapshot.val() || {};\n    \n    const productsWithInventory = await Promise.all(\n      Object.entries(productsData).map(async ([id, product]: [string, any]) => {\n        const inventory = await this.getProductInventory(id);\n        const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n        let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n        \n        if (totalQuantity === 0) {\n          status = 'out-of-stock';\n        } else if (totalQuantity < 10) {\n          status = 'low-stock';\n        }\n\n        return {\n          ...product,\n          id,\n          inventory,\n          totalQuantity,\n          status,\n        } as ProductWithInventory;\n      })\n    );\n    \n    return productsWithInventory;\n  }\n\n  async getProductById(id: string): Promise<ProductWithInventory | undefined> {\n    const productSnapshot = await rtdb.ref(`products/${id}`).once('value');\n    const product = productSnapshot.val();\n    if (!product) return undefined;\n\n    const inventory = await this.getProductInventory(id);\n    const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n    let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n    \n    if (totalQuantity === 0) {\n      status = 'out-of-stock';\n    } else if (totalQuantity < 10) {\n      status = 'low-stock';\n    }\n\n    return {\n      ...product,\n      id,\n      inventory,\n      totalQuantity,\n      status,\n    } as ProductWithInventory;\n  }\n\n  async getProductByModelNumber(modelNumber: string): Promise<Product | undefined> {\n    const productsSnapshot = await rtdb.ref('products').orderByChild('modelNumber').equalTo(modelNumber).once('value');\n    const productsData = productsSnapshot.val();\n    \n    if (!productsData) return undefined;\n    \n    const productId = Object.keys(productsData)[0];\n    return { ...productsData[productId], id: productId } as Product;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const productRef = rtdb.ref('products').push();\n    const productId = productRef.key!;\n    \n    const newProduct: Product = {\n      ...product,\n      id: productId,\n      imageUrl: product.imageUrl || null,\n      specifications: product.specifications || null,\n      createdAt: new Date(Date.now()),\n    };\n    \n    await productRef.set(newProduct);\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const productRef = rtdb.ref(`products/${id}`);\n    const snapshot = await productRef.once('value');\n    const existingProduct = snapshot.val();\n    \n    if (!existingProduct) return undefined;\n    \n    const updatedProduct = { ...existingProduct, ...product };\n    await productRef.set(updatedProduct);\n    \n    return updatedProduct as Product;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    try {\n      await rtdb.ref(`products/${id}`).remove();\n      await rtdb.ref(`product_inventory/${id}`).remove();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n  \n  // Product Inventory\n  async getProductInventory(productId: string): Promise<ProductInventory[]> {\n    const inventorySnapshot = await rtdb.ref(`product_inventory/${productId}`).once('value');\n    const inventoryData = inventorySnapshot.val() || {};\n    \n    return Object.entries(inventoryData).map(([id, item]: [string, any]) => ({\n      ...item,\n      id,\n    })) as ProductInventory[];\n  }\n\n  async updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory> {\n    const inventoryRef = rtdb.ref(`product_inventory/${productId}`);\n    const snapshot = await inventoryRef.once('value');\n    const inventoryData = snapshot.val() || {};\n    \n    // Find existing inventory item\n    const existingKey = Object.keys(inventoryData).find(key => \n      inventoryData[key].color === color && inventoryData[key].size === size\n    );\n    \n    if (existingKey) {\n      const updatedItem = { ...inventoryData[existingKey], quantity };\n      await inventoryRef.child(existingKey).set(updatedItem);\n      return { ...updatedItem, id: existingKey } as ProductInventory;\n    } else {\n      // Create new inventory item\n      const newItemRef = inventoryRef.push();\n      const newItem: ProductInventory = {\n        id: newItemRef.key!,\n        productId,\n        color,\n        size,\n        quantity,\n      };\n      await newItemRef.set(newItem);\n      return newItem;\n    }\n  }\n\n  async bulkUpdateInventory(inventoryItems: (InsertProductInventory & { productId: string })[]): Promise<ProductInventory[]> {\n    const updates: Record<string, any> = {};\n    const results: ProductInventory[] = [];\n    \n    for (const item of inventoryItems) {\n      const inventoryRef = rtdb.ref(`product_inventory/${item.productId}`);\n      const newItemRef = inventoryRef.push();\n      const inventoryItem: ProductInventory = {\n        ...item,\n        id: newItemRef.key!,\n        quantity: item.quantity || 0,\n      };\n      \n      updates[`product_inventory/${item.productId}/${newItemRef.key}`] = inventoryItem;\n      results.push(inventoryItem);\n    }\n    \n    await rtdb.ref().update(updates);\n    return results;\n  }\n\n  async deleteProductInventory(productId: string): Promise<boolean> {\n    try {\n      await rtdb.ref(`product_inventory/${productId}`).remove();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n  \n  // Sales\n  async getSales(): Promise<SaleWithItems[]> {\n    const salesSnapshot = await rtdb.ref('sales').once('value');\n    const salesData = salesSnapshot.val() || {};\n    \n    const salesWithItems = await Promise.all(\n      Object.entries(salesData).map(async ([id, sale]: [string, any]) => {\n        const itemsSnapshot = await rtdb.ref(`sale_items/${id}`).once('value');\n        const itemsData = itemsSnapshot.val() || {};\n        \n        const items = await Promise.all(\n          Object.entries(itemsData).map(async ([itemId, item]: [string, any]) => {\n            const productSnapshot = await rtdb.ref(`products/${item.productId}`).once('value');\n            const product = productSnapshot.val();\n            \n            return {\n              ...item,\n              id: itemId,\n              product,\n            };\n          })\n        );\n        \n        return {\n          ...sale,\n          id,\n          items,\n        } as SaleWithItems;\n      })\n    );\n    \n    return salesWithItems;\n  }\n\n  async getSaleById(id: string): Promise<SaleWithItems | undefined> {\n    const saleSnapshot = await rtdb.ref(`sales/${id}`).once('value');\n    const sale = saleSnapshot.val();\n    if (!sale) return undefined;\n\n    const itemsSnapshot = await rtdb.ref(`sale_items/${id}`).once('value');\n    const itemsData = itemsSnapshot.val() || {};\n    \n    const items = await Promise.all(\n      Object.entries(itemsData).map(async ([itemId, item]: [string, any]) => {\n        const productSnapshot = await rtdb.ref(`products/${item.productId}`).once('value');\n        const product = productSnapshot.val();\n        \n        return {\n          ...item,\n          id: itemId,\n          product,\n        };\n      })\n    );\n\n    return {\n      ...sale,\n      id,\n      items,\n    } as SaleWithItems;\n  }\n\n  async createSale(sale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems> {\n    const saleRef = rtdb.ref('sales').push();\n    const saleId = saleRef.key!;\n    \n    // Validate inventory availability\n    for (const item of items) {\n      const inventorySnapshot = await rtdb.ref(`product_inventory/${item.productId}`).once('value');\n      const inventoryData = inventorySnapshot.val() || {};\n      \n      const inventoryItem = Object.values(inventoryData).find((inv: any) => \n        inv.color === item.color && inv.size === item.size\n      ) as any;\n      \n      if (!inventoryItem || inventoryItem.quantity < item.quantity) {\n        throw new Error(`Insufficient inventory for product ${item.productId}, color ${item.color}, size ${item.size}`);\n      }\n    }\n    \n    const newSale: Sale = {\n      ...sale,\n      id: saleId,\n      invoiceNumber: sale.invoiceNumber,\n      trackingNumber: sale.trackingNumber || null,\n      fees: sale.fees || \"0\",\n      createdAt: new Date(Date.now()),\n    };\n    \n    // Create updates for sale, sale items, and inventory decrements\n    const updates: Record<string, any> = {};\n    updates[`sales/${saleId}`] = newSale;\n    \n    const saleItemsWithProducts = [];\n    \n    for (const item of items) {\n      const saleItemRef = rtdb.ref(`sale_items/${saleId}`).push();\n      const saleItemId = saleItemRef.key!;\n      \n      const saleItem: SaleItem = {\n        ...item,\n        id: saleItemId,\n        saleId,\n      };\n      \n      updates[`sale_items/${saleId}/${saleItemId}`] = saleItem;\n      \n      // Get product details for response\n      const productSnapshot = await rtdb.ref(`products/${item.productId}`).once('value');\n      const product = productSnapshot.val();\n      \n      saleItemsWithProducts.push({\n        ...saleItem,\n        product,\n      });\n      \n      // Decrement inventory\n      const inventorySnapshot = await rtdb.ref(`product_inventory/${item.productId}`).once('value');\n      const inventoryData = inventorySnapshot.val() || {};\n      \n      const inventoryKey = Object.keys(inventoryData).find(key => \n        inventoryData[key].color === item.color && inventoryData[key].size === item.size\n      );\n      \n      if (inventoryKey) {\n        const currentQuantity = inventoryData[inventoryKey].quantity;\n        updates[`product_inventory/${item.productId}/${inventoryKey}/quantity`] = currentQuantity - item.quantity;\n      }\n    }\n    \n    await rtdb.ref().update(updates);\n    \n    return {\n      ...newSale,\n      items: saleItemsWithProducts,\n    } as SaleWithItems;\n  }\n\n  async getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]> {\n    const sales = await this.getSales();\n    return sales.filter(sale => {\n      const saleDate = new Date(sale.createdAt);\n      return saleDate >= startDate && saleDate <= endDate;\n    });\n  }\n  \n  // Returns\n  async getReturns(): Promise<ReturnWithItems[]> {\n    const returnsSnapshot = await rtdb.ref('returns').once('value');\n    const returnsData = returnsSnapshot.val() || {};\n    \n    const returnsWithItems = await Promise.all(\n      Object.entries(returnsData).map(async ([id, returnData]: [string, any]) => {\n        const itemsSnapshot = await rtdb.ref(`return_items/${id}`).once('value');\n        const itemsData = itemsSnapshot.val() || {};\n        \n        const items = await Promise.all(\n          Object.entries(itemsData).map(async ([itemId, item]: [string, any]) => {\n            const productSnapshot = await rtdb.ref(`products/${item.productId}`).once('value');\n            const product = productSnapshot.val();\n            \n            return {\n              ...item,\n              id: itemId,\n              product,\n            };\n          })\n        );\n        \n        const originalSaleSnapshot = await rtdb.ref(`sales/${returnData.originalSaleId}`).once('value');\n        const originalSale = originalSaleSnapshot.val();\n        \n        return {\n          ...returnData,\n          id,\n          items,\n          originalSale,\n        } as ReturnWithItems;\n      })\n    );\n    \n    return returnsWithItems;\n  }\n\n  async getReturnById(id: string): Promise<ReturnWithItems | undefined> {\n    const returnSnapshot = await rtdb.ref(`returns/${id}`).once('value');\n    const returnData = returnSnapshot.val();\n    if (!returnData) return undefined;\n\n    const itemsSnapshot = await rtdb.ref(`return_items/${id}`).once('value');\n    const itemsData = itemsSnapshot.val() || {};\n    \n    const items = await Promise.all(\n      Object.entries(itemsData).map(async ([itemId, item]: [string, any]) => {\n        const productSnapshot = await rtdb.ref(`products/${item.productId}`).once('value');\n        const product = productSnapshot.val();\n        \n        return {\n          ...item,\n          id: itemId,\n          product,\n        };\n      })\n    );\n\n    const originalSaleSnapshot = await rtdb.ref(`sales/${returnData.originalSaleId}`).once('value');\n    const originalSale = originalSaleSnapshot.val();\n\n    return {\n      ...returnData,\n      id,\n      items,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  async createReturn(insertReturn: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems> {\n    const returnRef = rtdb.ref('returns').push();\n    const returnId = returnRef.key!;\n    \n    const returnData: Return = {\n      ...insertReturn,\n      id: returnId,\n      exchangeType: insertReturn.exchangeType || null,\n      newProductId: insertReturn.newProductId || null,\n      newColor: insertReturn.newColor || null,\n      newSize: insertReturn.newSize || null,\n      refundAmount: insertReturn.refundAmount || \"0\",\n      createdAt: new Date(Date.now()),\n    };\n\n    const updates: Record<string, any> = {};\n    updates[`returns/${returnId}`] = returnData;\n\n    const returnItemsWithProducts = [];\n    \n    for (const item of items) {\n      const returnItemRef = rtdb.ref(`return_items/${returnId}`).push();\n      const returnItemId = returnItemRef.key!;\n      \n      const returnItem: ReturnItem = {\n        ...item,\n        id: returnItemId,\n        returnId,\n      };\n      \n      updates[`return_items/${returnId}/${returnItemId}`] = returnItem;\n      \n      // Get product details for response\n      const productSnapshot = await rtdb.ref(`products/${item.productId}`).once('value');\n      const product = productSnapshot.val();\n      \n      returnItemsWithProducts.push({\n        ...returnItem,\n        product,\n      });\n      \n      // Handle inventory updates based on return type\n      if (returnData.returnType === 'refund') {\n        // For refunds: simply return items to original inventory\n        await this.incrementInventory(item.productId, item.color, item.size, item.quantity, updates);\n      } else if (returnData.returnType === 'exchange') {\n        // Handle different types of exchanges\n        if (returnData.exchangeType === 'product-to-product') {\n          // Exchange with different product: return original item and deduct from new product\n          await this.incrementInventory(item.productId, item.color, item.size, item.quantity, updates);\n          \n          // Deduct from new product using the specified new color and size\n          if (returnData.newProductId && returnData.newColor && returnData.newSize) {\n            await this.decrementInventory(returnData.newProductId, returnData.newColor, returnData.newSize, item.quantity, updates);\n          }\n        } else if (returnData.exchangeType === 'color-change') {\n          // Color change: return old color and deduct from new color\n          await this.incrementInventory(item.productId, item.color, item.size, item.quantity, updates);\n          \n          // Deduct from new color\n          if (returnData.newColor) {\n            await this.decrementInventory(item.productId, returnData.newColor, item.size, item.quantity, updates);\n          }\n        } else if (returnData.exchangeType === 'size-change') {\n          // Size change: return old size and deduct from new size\n          await this.incrementInventory(item.productId, item.color, item.size, item.quantity, updates);\n          \n          // Deduct from new size\n          if (returnData.newSize) {\n            await this.decrementInventory(item.productId, item.color, returnData.newSize, item.quantity, updates);\n          }\n        }\n      }\n    }\n    \n    await rtdb.ref().update(updates);\n    \n    const originalSaleSnapshot = await rtdb.ref(`sales/${insertReturn.originalSaleId}`).once('value');\n    const originalSale = originalSaleSnapshot.val();\n\n    return {\n      ...returnData,\n      items: returnItemsWithProducts,\n      originalSale,\n    } as ReturnWithItems;\n  }\n  \n  private async incrementInventory(productId: string, color: string, size: string, quantity: number, updates: Record<string, any>) {\n    const inventorySnapshot = await rtdb.ref(`product_inventory/${productId}`).once('value');\n    const inventoryData = inventorySnapshot.val() || {};\n    \n    const inventoryKey = Object.keys(inventoryData).find(key => \n      inventoryData[key].color === color && inventoryData[key].size === size\n    );\n    \n    if (inventoryKey) {\n      const currentQuantity = inventoryData[inventoryKey].quantity;\n      updates[`product_inventory/${productId}/${inventoryKey}/quantity`] = currentQuantity + quantity;\n    }\n  }\n  \n  private async decrementInventory(productId: string, color: string, size: string, quantity: number, updates: Record<string, any>) {\n    const inventorySnapshot = await rtdb.ref(`product_inventory/${productId}`).once('value');\n    const inventoryData = inventorySnapshot.val() || {};\n    \n    const inventoryKey = Object.keys(inventoryData).find(key => \n      inventoryData[key].color === color && inventoryData[key].size === size\n    );\n    \n    if (inventoryKey) {\n      const currentQuantity = inventoryData[inventoryKey].quantity;\n      updates[`product_inventory/${productId}/${inventoryKey}/quantity`] = Math.max(0, currentQuantity - quantity);\n    }\n  }\n  \n  // Expenses\n  async getExpenses(): Promise<Expense[]> {\n    const expensesSnapshot = await rtdb.ref('expenses').once('value');\n    const expensesData = expensesSnapshot.val() || {};\n    \n    return Object.entries(expensesData).map(([id, expense]: [string, any]) => ({\n      ...expense,\n      id,\n      date: new Date(expense.date),\n    })) as Expense[];\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<Expense> {\n    const expenseRef = rtdb.ref('expenses').push();\n    const expenseId = expenseRef.key!;\n    \n    const expense: Expense = {\n      ...insertExpense,\n      id: expenseId,\n      date: insertExpense.date || new Date(Date.now()),\n    };\n    \n    await expenseRef.set({\n      ...expense,\n      date: expense.date.getTime(), // Store as timestamp\n    });\n    \n    return expense;\n  }\n\n  async getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]> {\n    const expenses = await this.getExpenses();\n    return expenses.filter(expense => {\n      const expenseDate = new Date(expense.date);\n      return expenseDate >= startDate && expenseDate <= endDate;\n    });\n  }\n  \n  // Purchases\n  async getPurchases(): Promise<Purchase[]> {\n    const purchasesSnapshot = await rtdb.ref('purchases').once('value');\n    const purchasesData = purchasesSnapshot.val() || {};\n    \n    return Object.entries(purchasesData).map(([id, purchase]: [string, any]) => ({\n      ...purchase,\n      id,\n      date: new Date(purchase.date),\n    })) as Purchase[];\n  }\n\n  async createPurchase(insertPurchase: InsertPurchase): Promise<Purchase> {\n    const purchaseRef = rtdb.ref('purchases').push();\n    const purchaseId = purchaseRef.key!;\n    \n    const purchase: Purchase = {\n      ...insertPurchase,\n      id: purchaseId,\n      date: insertPurchase.date || new Date(Date.now()),\n    };\n    \n    await purchaseRef.set({\n      ...purchase,\n      date: purchase.date.getTime(), // Store as timestamp\n    });\n    \n    return purchase;\n  }\n\n  async getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]> {\n    const purchases = await this.getPurchases();\n    return purchases.filter(purchase => {\n      const purchaseDate = new Date(purchase.date);\n      return purchaseDate >= startDate && purchaseDate <= endDate;\n    });\n  }\n  \n  // Analytics\n  async getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }> {\n    const products = await this.getProducts();\n    const totalProducts = products.length;\n    const outOfStockCount = products.filter(p => p.status === 'out-of-stock').length;\n\n    const today = new Date();\n    const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000);\n\n    const sales = await this.getSalesByDateRange(todayStart, todayEnd);\n    const todaySales = sales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n    const onlineOrdersCount = sales.filter(sale => sale.channel === 'online').length;\n\n    return {\n      totalProducts,\n      todaySales,\n      outOfStockCount,\n      onlineOrdersCount,\n    };\n  }\n}\n\nexport const storage = new RealtimeStorage();","size_bytes":21148}},"version":1}